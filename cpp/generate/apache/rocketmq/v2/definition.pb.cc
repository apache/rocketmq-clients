// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/definition.proto

#include "apache/rocketmq/v2/definition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apache {
namespace rocketmq {
namespace v2 {
PROTOBUF_CONSTEXPR FilterExpression::FilterExpression(
    ::_pbi::ConstantInitialized)
  : expression_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct FilterExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterExpressionDefaultTypeInternal() {}
  union {
    FilterExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterExpressionDefaultTypeInternal _FilterExpression_default_instance_;
PROTOBUF_CONSTEXPR RetryPolicy::RetryPolicy(
    ::_pbi::ConstantInitialized)
  : max_attempts_(0)
  , _oneof_case_{}{}
struct RetryPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetryPolicyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetryPolicyDefaultTypeInternal() {}
  union {
    RetryPolicy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetryPolicyDefaultTypeInternal _RetryPolicy_default_instance_;
PROTOBUF_CONSTEXPR ExponentialBackoff::ExponentialBackoff(
    ::_pbi::ConstantInitialized)
  : initial_(nullptr)
  , max_(nullptr)
  , multiplier_(0){}
struct ExponentialBackoffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExponentialBackoffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExponentialBackoffDefaultTypeInternal() {}
  union {
    ExponentialBackoff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExponentialBackoffDefaultTypeInternal _ExponentialBackoff_default_instance_;
PROTOBUF_CONSTEXPR CustomizedBackoff::CustomizedBackoff(
    ::_pbi::ConstantInitialized)
  : next_(){}
struct CustomizedBackoffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomizedBackoffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomizedBackoffDefaultTypeInternal() {}
  union {
    CustomizedBackoff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomizedBackoffDefaultTypeInternal _CustomizedBackoff_default_instance_;
PROTOBUF_CONSTEXPR Resource::Resource(
    ::_pbi::ConstantInitialized)
  : resource_namespace_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDefaultTypeInternal() {}
  union {
    Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDefaultTypeInternal _Resource_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionEntry::SubscriptionEntry(
    ::_pbi::ConstantInitialized)
  : topic_(nullptr)
  , expression_(nullptr){}
struct SubscriptionEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionEntryDefaultTypeInternal() {}
  union {
    SubscriptionEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionEntryDefaultTypeInternal _SubscriptionEntry_default_instance_;
PROTOBUF_CONSTEXPR Address::Address(
    ::_pbi::ConstantInitialized)
  : host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , port_(0){}
struct AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddressDefaultTypeInternal() {}
  union {
    Address _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddressDefaultTypeInternal _Address_default_instance_;
PROTOBUF_CONSTEXPR Endpoints::Endpoints(
    ::_pbi::ConstantInitialized)
  : addresses_()
  , scheme_(0)
{}
struct EndpointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndpointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndpointsDefaultTypeInternal() {}
  union {
    Endpoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndpointsDefaultTypeInternal _Endpoints_default_instance_;
PROTOBUF_CONSTEXPR Broker::Broker(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , endpoints_(nullptr)
  , id_(0){}
struct BrokerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerDefaultTypeInternal() {}
  union {
    Broker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerDefaultTypeInternal _Broker_default_instance_;
PROTOBUF_CONSTEXPR MessageQueue::MessageQueue(
    ::_pbi::ConstantInitialized)
  : accept_message_types_()
  , _accept_message_types_cached_byte_size_(0)
  , topic_(nullptr)
  , broker_(nullptr)
  , id_(0)
  , permission_(0)
{}
struct MessageQueueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageQueueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageQueueDefaultTypeInternal() {}
  union {
    MessageQueue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageQueueDefaultTypeInternal _MessageQueue_default_instance_;
PROTOBUF_CONSTEXPR Digest::Digest(
    ::_pbi::ConstantInitialized)
  : checksum_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct DigestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigestDefaultTypeInternal() {}
  union {
    Digest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigestDefaultTypeInternal _Digest_default_instance_;
PROTOBUF_CONSTEXPR SystemProperties::SystemProperties(
    ::_pbi::ConstantInitialized)
  : keys_()
  , tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , born_host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , store_host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , receipt_handle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_group_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trace_context_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , body_digest_(nullptr)
  , born_timestamp_(nullptr)
  , store_timestamp_(nullptr)
  , delivery_timestamp_(nullptr)
  , invisible_duration_(nullptr)
  , orphaned_transaction_recovery_duration_(nullptr)
  , body_encoding_(0)

  , message_type_(0)

  , queue_offset_(int64_t{0})
  , queue_id_(0)
  , delivery_attempt_(0){}
struct SystemPropertiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemPropertiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemPropertiesDefaultTypeInternal() {}
  union {
    SystemProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemPropertiesDefaultTypeInternal _SystemProperties_default_instance_;
PROTOBUF_CONSTEXPR Message_UserPropertiesEntry_DoNotUse::Message_UserPropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Message_UserPropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_UserPropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_UserPropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Message_UserPropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_UserPropertiesEntry_DoNotUseDefaultTypeInternal _Message_UserPropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized)
  : user_properties_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , body_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , topic_(nullptr)
  , system_properties_(nullptr){}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR Assignment::Assignment(
    ::_pbi::ConstantInitialized)
  : message_queue_(nullptr){}
struct AssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignmentDefaultTypeInternal() {}
  union {
    Assignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignmentDefaultTypeInternal _Assignment_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , code_(0)
{}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR UA::UA(
    ::_pbi::ConstantInitialized)
  : version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , platform_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , language_(0)
{}
struct UADefaultTypeInternal {
  PROTOBUF_CONSTEXPR UADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UADefaultTypeInternal() {}
  union {
    UA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UADefaultTypeInternal _UA_default_instance_;
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
static ::_pb::Metadata file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[11];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto = nullptr;

const uint32_t TableStruct_apache_2frocketmq_2fv2_2fdefinition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::FilterExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::FilterExpression, type_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::FilterExpression, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RetryPolicy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RetryPolicy, max_attempts_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RetryPolicy, strategy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ExponentialBackoff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ExponentialBackoff, initial_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ExponentialBackoff, max_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ExponentialBackoff, multiplier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::CustomizedBackoff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::CustomizedBackoff, next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Resource, resource_namespace_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Resource, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SubscriptionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SubscriptionEntry, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SubscriptionEntry, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Address, host_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Address, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Endpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Endpoints, scheme_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Endpoints, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Broker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Broker, name_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Broker, id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Broker, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::MessageQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::MessageQueue, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::MessageQueue, id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::MessageQueue, permission_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::MessageQueue, broker_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::MessageQueue, accept_message_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Digest, type_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Digest, checksum_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, tag_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, keys_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, message_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, body_digest_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, body_encoding_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, message_type_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, born_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, born_host_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, store_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, store_host_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, delivery_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, receipt_handle_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, queue_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, queue_offset_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, invisible_duration_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, delivery_attempt_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, message_group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, trace_context_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SystemProperties, orphaned_transaction_recovery_duration_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  5,
  1,
  ~0u,
  8,
  6,
  9,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message, user_properties_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message, system_properties_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Message, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Assignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Assignment, message_queue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Status, code_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Status, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::UA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::UA, language_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::UA, version_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::UA, platform_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::UA, hostname_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apache::rocketmq::v2::FilterExpression)},
  { 8, -1, -1, sizeof(::apache::rocketmq::v2::RetryPolicy)},
  { 18, -1, -1, sizeof(::apache::rocketmq::v2::ExponentialBackoff)},
  { 27, -1, -1, sizeof(::apache::rocketmq::v2::CustomizedBackoff)},
  { 34, -1, -1, sizeof(::apache::rocketmq::v2::Resource)},
  { 42, -1, -1, sizeof(::apache::rocketmq::v2::SubscriptionEntry)},
  { 50, -1, -1, sizeof(::apache::rocketmq::v2::Address)},
  { 58, -1, -1, sizeof(::apache::rocketmq::v2::Endpoints)},
  { 66, -1, -1, sizeof(::apache::rocketmq::v2::Broker)},
  { 75, -1, -1, sizeof(::apache::rocketmq::v2::MessageQueue)},
  { 86, -1, -1, sizeof(::apache::rocketmq::v2::Digest)},
  { 94, 119, -1, sizeof(::apache::rocketmq::v2::SystemProperties)},
  { 138, 146, -1, sizeof(::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse)},
  { 148, -1, -1, sizeof(::apache::rocketmq::v2::Message)},
  { 158, -1, -1, sizeof(::apache::rocketmq::v2::Assignment)},
  { 165, -1, -1, sizeof(::apache::rocketmq::v2::Status)},
  { 173, -1, -1, sizeof(::apache::rocketmq::v2::UA)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apache::rocketmq::v2::_FilterExpression_default_instance_._instance,
  &::apache::rocketmq::v2::_RetryPolicy_default_instance_._instance,
  &::apache::rocketmq::v2::_ExponentialBackoff_default_instance_._instance,
  &::apache::rocketmq::v2::_CustomizedBackoff_default_instance_._instance,
  &::apache::rocketmq::v2::_Resource_default_instance_._instance,
  &::apache::rocketmq::v2::_SubscriptionEntry_default_instance_._instance,
  &::apache::rocketmq::v2::_Address_default_instance_._instance,
  &::apache::rocketmq::v2::_Endpoints_default_instance_._instance,
  &::apache::rocketmq::v2::_Broker_default_instance_._instance,
  &::apache::rocketmq::v2::_MessageQueue_default_instance_._instance,
  &::apache::rocketmq::v2::_Digest_default_instance_._instance,
  &::apache::rocketmq::v2::_SystemProperties_default_instance_._instance,
  &::apache::rocketmq::v2::_Message_UserPropertiesEntry_DoNotUse_default_instance_._instance,
  &::apache::rocketmq::v2::_Message_default_instance_._instance,
  &::apache::rocketmq::v2::_Assignment_default_instance_._instance,
  &::apache::rocketmq::v2::_Status_default_instance_._instance,
  &::apache::rocketmq::v2::_UA_default_instance_._instance,
};

const char descriptor_table_protodef_apache_2frocketmq_2fv2_2fdefinition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#apache/rocketmq/v2/definition.proto\022\022a"
  "pache.rocketmq.v2\032\037google/protobuf/times"
  "tamp.proto\032\036google/protobuf/duration.pro"
  "to\"f\n\020FilterExpression\0222\n\004type\030\001 \001(\0162\036.a"
  "pache.rocketmq.v2.FilterTypeR\004type\022\036\n\nex"
  "pression\030\002 \001(\tR\nexpression\"\357\001\n\013RetryPoli"
  "cy\022!\n\014max_attempts\030\001 \001(\005R\013maxAttempts\022Y\n"
  "\023exponential_backoff\030\002 \001(\0132&.apache.rock"
  "etmq.v2.ExponentialBackoffH\000R\022exponentia"
  "lBackoff\022V\n\022customized_backoff\030\003 \001(\0132%.a"
  "pache.rocketmq.v2.CustomizedBackoffH\000R\021c"
  "ustomizedBackoffB\n\n\010strategy\"\226\001\n\022Exponen"
  "tialBackoff\0223\n\007initial\030\001 \001(\0132\031.google.pr"
  "otobuf.DurationR\007initial\022+\n\003max\030\002 \001(\0132\031."
  "google.protobuf.DurationR\003max\022\036\n\nmultipl"
  "ier\030\003 \001(\002R\nmultiplier\"B\n\021CustomizedBacko"
  "ff\022-\n\004next\030\001 \003(\0132\031.google.protobuf.Durat"
  "ionR\004next\"M\n\010Resource\022-\n\022resource_namesp"
  "ace\030\001 \001(\tR\021resourceNamespace\022\022\n\004name\030\002 \001"
  "(\tR\004name\"\215\001\n\021SubscriptionEntry\0222\n\005topic\030"
  "\001 \001(\0132\034.apache.rocketmq.v2.ResourceR\005top"
  "ic\022D\n\nexpression\030\002 \001(\0132$.apache.rocketmq"
  ".v2.FilterExpressionR\nexpression\"1\n\007Addr"
  "ess\022\022\n\004host\030\001 \001(\tR\004host\022\022\n\004port\030\002 \001(\005R\004p"
  "ort\"\201\001\n\tEndpoints\0229\n\006scheme\030\001 \001(\0162!.apac"
  "he.rocketmq.v2.AddressSchemeR\006scheme\0229\n\t"
  "addresses\030\002 \003(\0132\033.apache.rocketmq.v2.Add"
  "ressR\taddresses\"i\n\006Broker\022\022\n\004name\030\001 \001(\tR"
  "\004name\022\016\n\002id\030\002 \001(\005R\002id\022;\n\tendpoints\030\003 \001(\013"
  "2\035.apache.rocketmq.v2.EndpointsR\tendpoin"
  "ts\"\231\002\n\014MessageQueue\0222\n\005topic\030\001 \001(\0132\034.apa"
  "che.rocketmq.v2.ResourceR\005topic\022\016\n\002id\030\002 "
  "\001(\005R\002id\022>\n\npermission\030\003 \001(\0162\036.apache.roc"
  "ketmq.v2.PermissionR\npermission\0222\n\006broke"
  "r\030\004 \001(\0132\032.apache.rocketmq.v2.BrokerR\006bro"
  "ker\022Q\n\024accept_message_types\030\005 \003(\0162\037.apac"
  "he.rocketmq.v2.MessageTypeR\022acceptMessag"
  "eTypes\"X\n\006Digest\0222\n\004type\030\001 \001(\0162\036.apache."
  "rocketmq.v2.DigestTypeR\004type\022\032\n\010checksum"
  "\030\002 \001(\tR\010checksum\"\302\t\n\020SystemProperties\022\025\n"
  "\003tag\030\001 \001(\tH\000R\003tag\210\001\001\022\022\n\004keys\030\002 \003(\tR\004keys"
  "\022\035\n\nmessage_id\030\003 \001(\tR\tmessageId\022;\n\013body_"
  "digest\030\004 \001(\0132\032.apache.rocketmq.v2.Digest"
  "R\nbodyDigest\022A\n\rbody_encoding\030\005 \001(\0162\034.ap"
  "ache.rocketmq.v2.EncodingR\014bodyEncoding\022"
  "B\n\014message_type\030\006 \001(\0162\037.apache.rocketmq."
  "v2.MessageTypeR\013messageType\022A\n\016born_time"
  "stamp\030\007 \001(\0132\032.google.protobuf.TimestampR"
  "\rbornTimestamp\022\033\n\tborn_host\030\010 \001(\tR\010bornH"
  "ost\022H\n\017store_timestamp\030\t \001(\0132\032.google.pr"
  "otobuf.TimestampH\001R\016storeTimestamp\210\001\001\022\035\n"
  "\nstore_host\030\n \001(\tR\tstoreHost\022N\n\022delivery"
  "_timestamp\030\013 \001(\0132\032.google.protobuf.Times"
  "tampH\002R\021deliveryTimestamp\210\001\001\022*\n\016receipt_"
  "handle\030\014 \001(\tH\003R\rreceiptHandle\210\001\001\022\031\n\010queu"
  "e_id\030\r \001(\005R\007queueId\022&\n\014queue_offset\030\016 \001("
  "\003H\004R\013queueOffset\210\001\001\022M\n\022invisible_duratio"
  "n\030\017 \001(\0132\031.google.protobuf.DurationH\005R\021in"
  "visibleDuration\210\001\001\022.\n\020delivery_attempt\030\020"
  " \001(\005H\006R\017deliveryAttempt\210\001\001\022(\n\rmessage_gr"
  "oup\030\021 \001(\tH\007R\014messageGroup\210\001\001\022(\n\rtrace_co"
  "ntext\030\022 \001(\tH\010R\014traceContext\210\001\001\022s\n&orphan"
  "ed_transaction_recovery_duration\030\023 \001(\0132\031"
  ".google.protobuf.DurationH\tR#orphanedTra"
  "nsactionRecoveryDuration\210\001\001B\006\n\004_tagB\022\n\020_"
  "store_timestampB\025\n\023_delivery_timestampB\021"
  "\n\017_receipt_handleB\017\n\r_queue_offsetB\025\n\023_i"
  "nvisible_durationB\023\n\021_delivery_attemptB\020"
  "\n\016_message_groupB\020\n\016_trace_contextB)\n\'_o"
  "rphaned_transaction_recovery_duration\"\301\002"
  "\n\007Message\0222\n\005topic\030\001 \001(\0132\034.apache.rocket"
  "mq.v2.ResourceR\005topic\022X\n\017user_properties"
  "\030\002 \003(\0132/.apache.rocketmq.v2.Message.User"
  "PropertiesEntryR\016userProperties\022Q\n\021syste"
  "m_properties\030\003 \001(\0132$.apache.rocketmq.v2."
  "SystemPropertiesR\020systemProperties\022\022\n\004bo"
  "dy\030\004 \001(\014R\004body\032A\n\023UserPropertiesEntry\022\020\n"
  "\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028"
  "\001\"S\n\nAssignment\022E\n\rmessage_queue\030\001 \001(\0132 "
  ".apache.rocketmq.v2.MessageQueueR\014messag"
  "eQueue\"P\n\006Status\022,\n\004code\030\001 \001(\0162\030.apache."
  "rocketmq.v2.CodeR\004code\022\030\n\007message\030\002 \001(\tR"
  "\007message\"\220\001\n\002UA\0228\n\010language\030\001 \001(\0162\034.apac"
  "he.rocketmq.v2.LanguageR\010language\022\030\n\007ver"
  "sion\030\002 \001(\tR\007version\022\032\n\010platform\030\003 \001(\tR\010p"
  "latform\022\032\n\010hostname\030\004 \001(\tR\010hostname*Y\n\025T"
  "ransactionResolution\022&\n\"TRANSACTION_RESO"
  "LUTION_UNSPECIFIED\020\000\022\n\n\006COMMIT\020\001\022\014\n\010ROLL"
  "BACK\020\002*W\n\021TransactionSource\022\026\n\022SOURCE_UN"
  "SPECIFIED\020\000\022\021\n\rSOURCE_CLIENT\020\001\022\027\n\023SOURCE"
  "_SERVER_CHECK\020\002*W\n\nPermission\022\032\n\026PERMISS"
  "ION_UNSPECIFIED\020\000\022\010\n\004NONE\020\001\022\010\n\004READ\020\002\022\t\n"
  "\005WRITE\020\003\022\016\n\nREAD_WRITE\020\004*;\n\nFilterType\022\033"
  "\n\027FILTER_TYPE_UNSPECIFIED\020\000\022\007\n\003TAG\020\001\022\007\n\003"
  "SQL\020\002*T\n\rAddressScheme\022\036\n\032ADDRESS_SCHEME"
  "_UNSPECIFIED\020\000\022\010\n\004IPv4\020\001\022\010\n\004IPv6\020\002\022\017\n\013DO"
  "MAIN_NAME\020\003*]\n\013MessageType\022\034\n\030MESSAGE_TY"
  "PE_UNSPECIFIED\020\000\022\n\n\006NORMAL\020\001\022\010\n\004FIFO\020\002\022\t"
  "\n\005DELAY\020\003\022\017\n\013TRANSACTION\020\004*G\n\nDigestType"
  "\022\033\n\027DIGEST_TYPE_UNSPECIFIED\020\000\022\t\n\005CRC32\020\001"
  "\022\007\n\003MD5\020\002\022\010\n\004SHA1\020\003*_\n\nClientType\022\033\n\027CLI"
  "ENT_TYPE_UNSPECIFIED\020\000\022\014\n\010PRODUCER\020\001\022\021\n\r"
  "PUSH_CONSUMER\020\002\022\023\n\017SIMPLE_CONSUMER\020\003*<\n\010"
  "Encoding\022\030\n\024ENCODING_UNSPECIFIED\020\000\022\014\n\010ID"
  "ENTITY\020\001\022\010\n\004GZIP\020\002*\342\t\n\004Code\022\024\n\020CODE_UNSP"
  "ECIFIED\020\000\022\010\n\002OK\020\240\234\001\022\026\n\020MULTIPLE_RESULTS\020"
  "\260\352\001\022\021\n\013BAD_REQUEST\020\300\270\002\022\032\n\024ILLEGAL_ACCESS"
  "_POINT\020\301\270\002\022\023\n\rILLEGAL_TOPIC\020\302\270\002\022\034\n\026ILLEG"
  "AL_CONSUMER_GROUP\020\303\270\002\022\031\n\023ILLEGAL_MESSAGE"
  "_TAG\020\304\270\002\022\031\n\023ILLEGAL_MESSAGE_KEY\020\305\270\002\022\033\n\025I"
  "LLEGAL_MESSAGE_GROUP\020\306\270\002\022\"\n\034ILLEGAL_MESS"
  "AGE_PROPERTY_KEY\020\307\270\002\022\034\n\026INVALID_TRANSACT"
  "ION_ID\020\310\270\002\022\030\n\022ILLEGAL_MESSAGE_ID\020\311\270\002\022\037\n\031"
  "ILLEGAL_FILTER_EXPRESSION\020\312\270\002\022\034\n\026ILLEGAL"
  "_INVISIBLE_TIME\020\313\270\002\022\033\n\025ILLEGAL_DELIVERY_"
  "TIME\020\314\270\002\022\034\n\026INVALID_RECEIPT_HANDLE\020\315\270\002\022)"
  "\n#MESSAGE_PROPERTY_CONFLICT_WITH_TYPE\020\316\270"
  "\002\022\036\n\030UNRECOGNIZED_CLIENT_TYPE\020\317\270\002\022\027\n\021MES"
  "SAGE_CORRUPTED\020\320\270\002\022\030\n\022CLIENT_ID_REQUIRED"
  "\020\321\270\002\022\022\n\014UNAUTHORIZED\020\244\271\002\022\026\n\020PAYMENT_REQU"
  "IRED\020\210\272\002\022\017\n\tFORBIDDEN\020\354\272\002\022\017\n\tNOT_FOUND\020\320"
  "\273\002\022\027\n\021MESSAGE_NOT_FOUND\020\321\273\002\022\025\n\017TOPIC_NOT"
  "_FOUND\020\322\273\002\022\036\n\030CONSUMER_GROUP_NOT_FOUND\020\323"
  "\273\002\022\025\n\017REQUEST_TIMEOUT\020\340\276\002\022\027\n\021PAYLOAD_TOO"
  "_LARGE\020\324\302\002\022\034\n\026MESSAGE_BODY_TOO_LARGE\020\325\302\002"
  "\022\031\n\023PRECONDITION_FAILED\020\260\316\002\022\027\n\021TOO_MANY_"
  "REQUESTS\020\224\317\002\022%\n\037REQUEST_HEADER_FIELDS_TO"
  "O_LARGE\020\334\320\002\022\"\n\034MESSAGE_PROPERTIES_TOO_LA"
  "RGE\020\335\320\002\022\024\n\016INTERNAL_ERROR\020\320\206\003\022\033\n\025INTERNA"
  "L_SERVER_ERROR\020\321\206\003\022\026\n\020HA_NOT_AVAILABLE\020\322"
  "\206\003\022\025\n\017NOT_IMPLEMENTED\020\264\207\003\022\023\n\rPROXY_TIMEO"
  "UT\020\340\211\003\022 \n\032MASTER_PERSISTENCE_TIMEOUT\020\341\211\003"
  "\022\037\n\031SLAVE_PERSISTENCE_TIMEOUT\020\342\211\003\022\021\n\013UNS"
  "UPPORTED\020\304\212\003\022\031\n\023VERSION_UNSUPPORTED\020\305\212\003\022"
  "%\n\037VERIFY_FIFO_MESSAGE_UNSUPPORTED\020\306\212\003\022\037"
  "\n\031FAILED_TO_CONSUME_MESSAGE\020\340\324\003*Z\n\010Langu"
  "age\022\030\n\024LANGUAGE_UNSPECIFIED\020\000\022\010\n\004JAVA\020\001\022"
  "\007\n\003CPP\020\002\022\013\n\007DOT_NET\020\003\022\n\n\006GOLANG\020\004\022\010\n\004RUS"
  "T\020\005B;\n\022apache.rocketmq.v2B\010MQDomainP\001\240\001\001"
  "\330\001\001\252\002\022Apache.Rocketmq.V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto = {
    false, false, 5592, descriptor_table_protodef_apache_2frocketmq_2fv2_2fdefinition_2eproto,
    "apache/rocketmq/v2/definition.proto",
    &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once, descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_deps, 2, 17,
    schemas, file_default_instances, TableStruct_apache_2frocketmq_2fv2_2fdefinition_2eproto::offsets,
    file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto, file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto,
    file_level_service_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter() {
  return &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_apache_2frocketmq_2fv2_2fdefinition_2eproto(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
namespace apache {
namespace rocketmq {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResolution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[0];
}
bool TransactionResolution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[1];
}
bool TransactionSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[2];
}
bool Permission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[3];
}
bool FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressScheme_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[4];
}
bool AddressScheme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[5];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DigestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[6];
}
bool DigestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[7];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[8];
}
bool Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[9];
}
bool Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 20000:
    case 30000:
    case 40000:
    case 40001:
    case 40002:
    case 40003:
    case 40004:
    case 40005:
    case 40006:
    case 40007:
    case 40008:
    case 40009:
    case 40010:
    case 40011:
    case 40012:
    case 40013:
    case 40014:
    case 40015:
    case 40016:
    case 40017:
    case 40100:
    case 40200:
    case 40300:
    case 40400:
    case 40401:
    case 40402:
    case 40403:
    case 40800:
    case 41300:
    case 41301:
    case 42800:
    case 42900:
    case 43100:
    case 43101:
    case 50000:
    case 50001:
    case 50002:
    case 50100:
    case 50400:
    case 50401:
    case 50402:
    case 50500:
    case 50501:
    case 50502:
    case 60000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fdefinition_2eproto[10];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FilterExpression::_Internal {
 public:
};

FilterExpression::FilterExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.FilterExpression)
}
FilterExpression::FilterExpression(const FilterExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  expression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    expression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expression().empty()) {
    expression_.Set(from._internal_expression(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.FilterExpression)
}

inline void FilterExpression::SharedCtor() {
expression_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  expression_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

FilterExpression::~FilterExpression() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.FilterExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  expression_.Destroy();
}

void FilterExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilterExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.FilterExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expression_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.FilterType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apache::rocketmq::v2::FilterType>(val));
        } else
          goto handle_unusual;
        continue;
      // string expression = 2 [json_name = "expression"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_expression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.FilterExpression.expression"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.FilterExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.FilterType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string expression = 2 [json_name = "expression"];
  if (!this->_internal_expression().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expression().data(), static_cast<int>(this->_internal_expression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.FilterExpression.expression");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.FilterExpression)
  return target;
}

size_t FilterExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.FilterExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string expression = 2 [json_name = "expression"];
  if (!this->_internal_expression().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expression());
  }

  // .apache.rocketmq.v2.FilterType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilterExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterExpression::GetClassData() const { return &_class_data_; }

void FilterExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilterExpression *>(to)->MergeFrom(
      static_cast<const FilterExpression &>(from));
}


void FilterExpression::MergeFrom(const FilterExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.FilterExpression)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_expression().empty()) {
    _internal_set_expression(from._internal_expression());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterExpression::CopyFrom(const FilterExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.FilterExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterExpression::IsInitialized() const {
  return true;
}

void FilterExpression::InternalSwap(FilterExpression* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &expression_, lhs_arena,
      &other->expression_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[0]);
}

// ===================================================================

class RetryPolicy::_Internal {
 public:
  static const ::apache::rocketmq::v2::ExponentialBackoff& exponential_backoff(const RetryPolicy* msg);
  static const ::apache::rocketmq::v2::CustomizedBackoff& customized_backoff(const RetryPolicy* msg);
};

const ::apache::rocketmq::v2::ExponentialBackoff&
RetryPolicy::_Internal::exponential_backoff(const RetryPolicy* msg) {
  return *msg->strategy_.exponential_backoff_;
}
const ::apache::rocketmq::v2::CustomizedBackoff&
RetryPolicy::_Internal::customized_backoff(const RetryPolicy* msg) {
  return *msg->strategy_.customized_backoff_;
}
void RetryPolicy::set_allocated_exponential_backoff(::apache::rocketmq::v2::ExponentialBackoff* exponential_backoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy();
  if (exponential_backoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(exponential_backoff);
    if (message_arena != submessage_arena) {
      exponential_backoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_backoff, submessage_arena);
    }
    set_has_exponential_backoff();
    strategy_.exponential_backoff_ = exponential_backoff;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.RetryPolicy.exponential_backoff)
}
void RetryPolicy::set_allocated_customized_backoff(::apache::rocketmq::v2::CustomizedBackoff* customized_backoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_strategy();
  if (customized_backoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(customized_backoff);
    if (message_arena != submessage_arena) {
      customized_backoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customized_backoff, submessage_arena);
    }
    set_has_customized_backoff();
    strategy_.customized_backoff_ = customized_backoff;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.RetryPolicy.customized_backoff)
}
RetryPolicy::RetryPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.RetryPolicy)
}
RetryPolicy::RetryPolicy(const RetryPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_attempts_ = from.max_attempts_;
  clear_has_strategy();
  switch (from.strategy_case()) {
    case kExponentialBackoff: {
      _internal_mutable_exponential_backoff()->::apache::rocketmq::v2::ExponentialBackoff::MergeFrom(from._internal_exponential_backoff());
      break;
    }
    case kCustomizedBackoff: {
      _internal_mutable_customized_backoff()->::apache::rocketmq::v2::CustomizedBackoff::MergeFrom(from._internal_customized_backoff());
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.RetryPolicy)
}

inline void RetryPolicy::SharedCtor() {
max_attempts_ = 0;
clear_has_strategy();
}

RetryPolicy::~RetryPolicy() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.RetryPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetryPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_strategy()) {
    clear_strategy();
  }
}

void RetryPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RetryPolicy::clear_strategy() {
// @@protoc_insertion_point(one_of_clear_start:apache.rocketmq.v2.RetryPolicy)
  switch (strategy_case()) {
    case kExponentialBackoff: {
      if (GetArenaForAllocation() == nullptr) {
        delete strategy_.exponential_backoff_;
      }
      break;
    }
    case kCustomizedBackoff: {
      if (GetArenaForAllocation() == nullptr) {
        delete strategy_.customized_backoff_;
      }
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STRATEGY_NOT_SET;
}


void RetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.RetryPolicy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_attempts_ = 0;
  clear_strategy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetryPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_attempts = 1 [json_name = "maxAttempts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.ExponentialBackoff exponential_backoff = 2 [json_name = "exponentialBackoff"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exponential_backoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.CustomizedBackoff customized_backoff = 3 [json_name = "customizedBackoff"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customized_backoff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetryPolicy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.RetryPolicy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_attempts = 1 [json_name = "maxAttempts"];
  if (this->_internal_max_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_attempts(), target);
  }

  // .apache.rocketmq.v2.ExponentialBackoff exponential_backoff = 2 [json_name = "exponentialBackoff"];
  if (_internal_has_exponential_backoff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::exponential_backoff(this),
        _Internal::exponential_backoff(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.CustomizedBackoff customized_backoff = 3 [json_name = "customizedBackoff"];
  if (_internal_has_customized_backoff()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::customized_backoff(this),
        _Internal::customized_backoff(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.RetryPolicy)
  return target;
}

size_t RetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.RetryPolicy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_attempts = 1 [json_name = "maxAttempts"];
  if (this->_internal_max_attempts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_attempts());
  }

  switch (strategy_case()) {
    // .apache.rocketmq.v2.ExponentialBackoff exponential_backoff = 2 [json_name = "exponentialBackoff"];
    case kExponentialBackoff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_.exponential_backoff_);
      break;
    }
    // .apache.rocketmq.v2.CustomizedBackoff customized_backoff = 3 [json_name = "customizedBackoff"];
    case kCustomizedBackoff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strategy_.customized_backoff_);
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetryPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RetryPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetryPolicy::GetClassData() const { return &_class_data_; }

void RetryPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RetryPolicy *>(to)->MergeFrom(
      static_cast<const RetryPolicy &>(from));
}


void RetryPolicy::MergeFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_attempts() != 0) {
    _internal_set_max_attempts(from._internal_max_attempts());
  }
  switch (from.strategy_case()) {
    case kExponentialBackoff: {
      _internal_mutable_exponential_backoff()->::apache::rocketmq::v2::ExponentialBackoff::MergeFrom(from._internal_exponential_backoff());
      break;
    }
    case kCustomizedBackoff: {
      _internal_mutable_customized_backoff()->::apache::rocketmq::v2::CustomizedBackoff::MergeFrom(from._internal_customized_backoff());
      break;
    }
    case STRATEGY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetryPolicy::CopyFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetryPolicy::IsInitialized() const {
  return true;
}

void RetryPolicy::InternalSwap(RetryPolicy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(max_attempts_, other->max_attempts_);
  swap(strategy_, other->strategy_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetryPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[1]);
}

// ===================================================================

class ExponentialBackoff::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& initial(const ExponentialBackoff* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max(const ExponentialBackoff* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
ExponentialBackoff::_Internal::initial(const ExponentialBackoff* msg) {
  return *msg->initial_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ExponentialBackoff::_Internal::max(const ExponentialBackoff* msg) {
  return *msg->max_;
}
void ExponentialBackoff::clear_initial() {
  if (GetArenaForAllocation() == nullptr && initial_ != nullptr) {
    delete initial_;
  }
  initial_ = nullptr;
}
void ExponentialBackoff::clear_max() {
  if (GetArenaForAllocation() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
ExponentialBackoff::ExponentialBackoff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ExponentialBackoff)
}
ExponentialBackoff::ExponentialBackoff(const ExponentialBackoff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial()) {
    initial_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.initial_);
  } else {
    initial_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.max_);
  } else {
    max_ = nullptr;
  }
  multiplier_ = from.multiplier_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ExponentialBackoff)
}

inline void ExponentialBackoff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initial_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multiplier_) -
    reinterpret_cast<char*>(&initial_)) + sizeof(multiplier_));
}

ExponentialBackoff::~ExponentialBackoff() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ExponentialBackoff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExponentialBackoff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete initial_;
  if (this != internal_default_instance()) delete max_;
}

void ExponentialBackoff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExponentialBackoff::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ExponentialBackoff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && initial_ != nullptr) {
    delete initial_;
  }
  initial_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  multiplier_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExponentialBackoff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration initial = 1 [json_name = "initial"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration max = 2 [json_name = "max"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float multiplier = 3 [json_name = "multiplier"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExponentialBackoff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ExponentialBackoff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration initial = 1 [json_name = "initial"];
  if (this->_internal_has_initial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::initial(this),
        _Internal::initial(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration max = 2 [json_name = "max"];
  if (this->_internal_has_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max(this),
        _Internal::max(this).GetCachedSize(), target, stream);
  }

  // float multiplier = 3 [json_name = "multiplier"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_multiplier = this->_internal_multiplier();
  uint32_t raw_multiplier;
  memcpy(&raw_multiplier, &tmp_multiplier, sizeof(tmp_multiplier));
  if (raw_multiplier != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ExponentialBackoff)
  return target;
}

size_t ExponentialBackoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ExponentialBackoff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration initial = 1 [json_name = "initial"];
  if (this->_internal_has_initial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_);
  }

  // .google.protobuf.Duration max = 2 [json_name = "max"];
  if (this->_internal_has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  // float multiplier = 3 [json_name = "multiplier"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_multiplier = this->_internal_multiplier();
  uint32_t raw_multiplier;
  memcpy(&raw_multiplier, &tmp_multiplier, sizeof(tmp_multiplier));
  if (raw_multiplier != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExponentialBackoff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExponentialBackoff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExponentialBackoff::GetClassData() const { return &_class_data_; }

void ExponentialBackoff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExponentialBackoff *>(to)->MergeFrom(
      static_cast<const ExponentialBackoff &>(from));
}


void ExponentialBackoff::MergeFrom(const ExponentialBackoff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ExponentialBackoff)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initial()) {
    _internal_mutable_initial()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_initial());
  }
  if (from._internal_has_max()) {
    _internal_mutable_max()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_multiplier = from._internal_multiplier();
  uint32_t raw_multiplier;
  memcpy(&raw_multiplier, &tmp_multiplier, sizeof(tmp_multiplier));
  if (raw_multiplier != 0) {
    _internal_set_multiplier(from._internal_multiplier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExponentialBackoff::CopyFrom(const ExponentialBackoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ExponentialBackoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialBackoff::IsInitialized() const {
  return true;
}

void ExponentialBackoff::InternalSwap(ExponentialBackoff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExponentialBackoff, multiplier_)
      + sizeof(ExponentialBackoff::multiplier_)
      - PROTOBUF_FIELD_OFFSET(ExponentialBackoff, initial_)>(
          reinterpret_cast<char*>(&initial_),
          reinterpret_cast<char*>(&other->initial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExponentialBackoff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[2]);
}

// ===================================================================

class CustomizedBackoff::_Internal {
 public:
};

void CustomizedBackoff::clear_next() {
  next_.Clear();
}
CustomizedBackoff::CustomizedBackoff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  next_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.CustomizedBackoff)
}
CustomizedBackoff::CustomizedBackoff(const CustomizedBackoff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      next_(from.next_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.CustomizedBackoff)
}

inline void CustomizedBackoff::SharedCtor() {
}

CustomizedBackoff::~CustomizedBackoff() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.CustomizedBackoff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CustomizedBackoff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CustomizedBackoff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CustomizedBackoff::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.CustomizedBackoff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomizedBackoff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Duration next = 1 [json_name = "next"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CustomizedBackoff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.CustomizedBackoff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Duration next = 1 [json_name = "next"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_next_size()); i < n; i++) {
    const auto& repfield = this->_internal_next(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.CustomizedBackoff)
  return target;
}

size_t CustomizedBackoff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.CustomizedBackoff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Duration next = 1 [json_name = "next"];
  total_size += 1UL * this->_internal_next_size();
  for (const auto& msg : this->next_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CustomizedBackoff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CustomizedBackoff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CustomizedBackoff::GetClassData() const { return &_class_data_; }

void CustomizedBackoff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CustomizedBackoff *>(to)->MergeFrom(
      static_cast<const CustomizedBackoff &>(from));
}


void CustomizedBackoff::MergeFrom(const CustomizedBackoff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.CustomizedBackoff)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  next_.MergeFrom(from.next_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CustomizedBackoff::CopyFrom(const CustomizedBackoff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.CustomizedBackoff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomizedBackoff::IsInitialized() const {
  return true;
}

void CustomizedBackoff::InternalSwap(CustomizedBackoff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  next_.InternalSwap(&other->next_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomizedBackoff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[3]);
}

// ===================================================================

class Resource::_Internal {
 public:
};

Resource::Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Resource)
}
Resource::Resource(const Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_namespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    resource_namespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resource_namespace().empty()) {
    resource_namespace_.Set(from._internal_resource_namespace(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Resource)
}

inline void Resource::SharedCtor() {
resource_namespace_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  resource_namespace_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  resource_namespace_.Destroy();
  name_.Destroy();
}

void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_namespace_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_namespace = 1 [json_name = "resourceNamespace"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resource_namespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.Resource.resource_namespace"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.Resource.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_namespace = 1 [json_name = "resourceNamespace"];
  if (!this->_internal_resource_namespace().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_namespace().data(), static_cast<int>(this->_internal_resource_namespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.Resource.resource_namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_namespace(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.Resource.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_namespace = 1 [json_name = "resourceNamespace"];
  if (!this->_internal_resource_namespace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_namespace());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resource::GetClassData() const { return &_class_data_; }

void Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Resource *>(to)->MergeFrom(
      static_cast<const Resource &>(from));
}


void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_namespace().empty()) {
    _internal_set_resource_namespace(from._internal_resource_namespace());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::InternalSwap(Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &resource_namespace_, lhs_arena,
      &other->resource_namespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[4]);
}

// ===================================================================

class SubscriptionEntry::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& topic(const SubscriptionEntry* msg);
  static const ::apache::rocketmq::v2::FilterExpression& expression(const SubscriptionEntry* msg);
};

const ::apache::rocketmq::v2::Resource&
SubscriptionEntry::_Internal::topic(const SubscriptionEntry* msg) {
  return *msg->topic_;
}
const ::apache::rocketmq::v2::FilterExpression&
SubscriptionEntry::_Internal::expression(const SubscriptionEntry* msg) {
  return *msg->expression_;
}
SubscriptionEntry::SubscriptionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.SubscriptionEntry)
}
SubscriptionEntry::SubscriptionEntry(const SubscriptionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::apache::rocketmq::v2::FilterExpression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.SubscriptionEntry)
}

inline void SubscriptionEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expression_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(expression_));
}

SubscriptionEntry::~SubscriptionEntry() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.SubscriptionEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete expression_;
}

void SubscriptionEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.SubscriptionEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.FilterExpression expression = 2 [json_name = "expression"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.SubscriptionEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.FilterExpression expression = 2 [json_name = "expression"];
  if (this->_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.SubscriptionEntry)
  return target;
}

size_t SubscriptionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.SubscriptionEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .apache.rocketmq.v2.FilterExpression expression = 2 [json_name = "expression"];
  if (this->_internal_has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionEntry::GetClassData() const { return &_class_data_; }

void SubscriptionEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionEntry *>(to)->MergeFrom(
      static_cast<const SubscriptionEntry &>(from));
}


void SubscriptionEntry::MergeFrom(const SubscriptionEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.SubscriptionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_has_expression()) {
    _internal_mutable_expression()->::apache::rocketmq::v2::FilterExpression::MergeFrom(from._internal_expression());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionEntry::CopyFrom(const SubscriptionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.SubscriptionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionEntry::IsInitialized() const {
  return true;
}

void SubscriptionEntry::InternalSwap(SubscriptionEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionEntry, expression_)
      + sizeof(SubscriptionEntry::expression_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionEntry, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[5]);
}

// ===================================================================

class Address::_Internal {
 public:
};

Address::Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Address)
}
Address::Address(const Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    host_.Set(from._internal_host(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Address)
}

inline void Address::SharedCtor() {
host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = 0;
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Address)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Address::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.Destroy();
}

void Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Address)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Address::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1 [json_name = "host"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.Address.host"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2 [json_name = "port"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Address::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Address)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.Address.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // int32 port = 2 [json_name = "port"];
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Address)
  return target;
}

size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Address)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 port = 2 [json_name = "port"];
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Address::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Address::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Address::GetClassData() const { return &_class_data_; }

void Address::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Address *>(to)->MergeFrom(
      static_cast<const Address &>(from));
}


void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Address)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  return true;
}

void Address::InternalSwap(Address* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Address::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[6]);
}

// ===================================================================

class Endpoints::_Internal {
 public:
};

Endpoints::Endpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addresses_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Endpoints)
}
Endpoints::Endpoints(const Endpoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scheme_ = from.scheme_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Endpoints)
}

inline void Endpoints::SharedCtor() {
scheme_ = 0;
}

Endpoints::~Endpoints() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Endpoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Endpoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Endpoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Endpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Endpoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  scheme_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Endpoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.AddressScheme scheme = 1 [json_name = "scheme"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheme(static_cast<::apache::rocketmq::v2::AddressScheme>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.Address addresses = 2 [json_name = "addresses"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Endpoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Endpoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.AddressScheme scheme = 1 [json_name = "scheme"];
  if (this->_internal_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scheme(), target);
  }

  // repeated .apache.rocketmq.v2.Address addresses = 2 [json_name = "addresses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_addresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Endpoints)
  return target;
}

size_t Endpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Endpoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.Address addresses = 2 [json_name = "addresses"];
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apache.rocketmq.v2.AddressScheme scheme = 1 [json_name = "scheme"];
  if (this->_internal_scheme() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scheme());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Endpoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Endpoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Endpoints::GetClassData() const { return &_class_data_; }

void Endpoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Endpoints *>(to)->MergeFrom(
      static_cast<const Endpoints &>(from));
}


void Endpoints::MergeFrom(const Endpoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Endpoints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from._internal_scheme() != 0) {
    _internal_set_scheme(from._internal_scheme());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Endpoints::CopyFrom(const Endpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Endpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoints::IsInitialized() const {
  return true;
}

void Endpoints::InternalSwap(Endpoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  swap(scheme_, other->scheme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Endpoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[7]);
}

// ===================================================================

class Broker::_Internal {
 public:
  static const ::apache::rocketmq::v2::Endpoints& endpoints(const Broker* msg);
};

const ::apache::rocketmq::v2::Endpoints&
Broker::_Internal::endpoints(const Broker* msg) {
  return *msg->endpoints_;
}
Broker::Broker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Broker)
}
Broker::Broker(const Broker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_endpoints()) {
    endpoints_ = new ::apache::rocketmq::v2::Endpoints(*from.endpoints_);
  } else {
    endpoints_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Broker)
}

inline void Broker::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endpoints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&endpoints_)) + sizeof(id_));
}

Broker::~Broker() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Broker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Broker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete endpoints_;
}

void Broker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Broker::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Broker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && endpoints_ != nullptr) {
    delete endpoints_;
  }
  endpoints_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Broker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.Broker.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Endpoints endpoints = 3 [json_name = "endpoints"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Broker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Broker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.Broker.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .apache.rocketmq.v2.Endpoints endpoints = 3 [json_name = "endpoints"];
  if (this->_internal_has_endpoints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::endpoints(this),
        _Internal::endpoints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Broker)
  return target;
}

size_t Broker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Broker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .apache.rocketmq.v2.Endpoints endpoints = 3 [json_name = "endpoints"];
  if (this->_internal_has_endpoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoints_);
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Broker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Broker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Broker::GetClassData() const { return &_class_data_; }

void Broker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Broker *>(to)->MergeFrom(
      static_cast<const Broker &>(from));
}


void Broker::MergeFrom(const Broker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Broker)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_endpoints()) {
    _internal_mutable_endpoints()->::apache::rocketmq::v2::Endpoints::MergeFrom(from._internal_endpoints());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Broker::CopyFrom(const Broker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Broker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broker::IsInitialized() const {
  return true;
}

void Broker::InternalSwap(Broker* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Broker, id_)
      + sizeof(Broker::id_)
      - PROTOBUF_FIELD_OFFSET(Broker, endpoints_)>(
          reinterpret_cast<char*>(&endpoints_),
          reinterpret_cast<char*>(&other->endpoints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Broker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[8]);
}

// ===================================================================

class MessageQueue::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& topic(const MessageQueue* msg);
  static const ::apache::rocketmq::v2::Broker& broker(const MessageQueue* msg);
};

const ::apache::rocketmq::v2::Resource&
MessageQueue::_Internal::topic(const MessageQueue* msg) {
  return *msg->topic_;
}
const ::apache::rocketmq::v2::Broker&
MessageQueue::_Internal::broker(const MessageQueue* msg) {
  return *msg->broker_;
}
MessageQueue::MessageQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  accept_message_types_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.MessageQueue)
}
MessageQueue::MessageQueue(const MessageQueue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accept_message_types_(from.accept_message_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_broker()) {
    broker_ = new ::apache::rocketmq::v2::Broker(*from.broker_);
  } else {
    broker_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&id_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.MessageQueue)
}

inline void MessageQueue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(permission_));
}

MessageQueue::~MessageQueue() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.MessageQueue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageQueue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete broker_;
}

void MessageQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.MessageQueue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_message_types_.Clear();
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && broker_ != nullptr) {
    delete broker_;
  }
  broker_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&id_)) + sizeof(permission_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageQueue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Permission permission = 3 [json_name = "permission"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_permission(static_cast<::apache::rocketmq::v2::Permission>(val));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Broker broker = 4 [json_name = "broker"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_broker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.MessageType accept_message_types = 5 [json_name = "acceptMessageTypes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_accept_message_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_accept_message_types(static_cast<::apache::rocketmq::v2::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageQueue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.MessageQueue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .apache.rocketmq.v2.Permission permission = 3 [json_name = "permission"];
  if (this->_internal_permission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_permission(), target);
  }

  // .apache.rocketmq.v2.Broker broker = 4 [json_name = "broker"];
  if (this->_internal_has_broker()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::broker(this),
        _Internal::broker(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.MessageType accept_message_types = 5 [json_name = "acceptMessageTypes"];
  {
    int byte_size = _accept_message_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, accept_message_types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.MessageQueue)
  return target;
}

size_t MessageQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.MessageQueue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.MessageType accept_message_types = 5 [json_name = "acceptMessageTypes"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_accept_message_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_accept_message_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _accept_message_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .apache.rocketmq.v2.Broker broker = 4 [json_name = "broker"];
  if (this->_internal_has_broker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *broker_);
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .apache.rocketmq.v2.Permission permission = 3 [json_name = "permission"];
  if (this->_internal_permission() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_permission());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageQueue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageQueue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageQueue::GetClassData() const { return &_class_data_; }

void MessageQueue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageQueue *>(to)->MergeFrom(
      static_cast<const MessageQueue &>(from));
}


void MessageQueue::MergeFrom(const MessageQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.MessageQueue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  accept_message_types_.MergeFrom(from.accept_message_types_);
  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_has_broker()) {
    _internal_mutable_broker()->::apache::rocketmq::v2::Broker::MergeFrom(from._internal_broker());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_permission() != 0) {
    _internal_set_permission(from._internal_permission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageQueue::CopyFrom(const MessageQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.MessageQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageQueue::IsInitialized() const {
  return true;
}

void MessageQueue::InternalSwap(MessageQueue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  accept_message_types_.InternalSwap(&other->accept_message_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageQueue, permission_)
      + sizeof(MessageQueue::permission_)
      - PROTOBUF_FIELD_OFFSET(MessageQueue, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageQueue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[9]);
}

// ===================================================================

class Digest::_Internal {
 public:
};

Digest::Digest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Digest)
}
Digest::Digest(const Digest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  checksum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    checksum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checksum().empty()) {
    checksum_.Set(from._internal_checksum(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Digest)
}

inline void Digest::SharedCtor() {
checksum_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  checksum_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

Digest::~Digest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Digest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Digest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  checksum_.Destroy();
}

void Digest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Digest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checksum_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Digest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.DigestType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::apache::rocketmq::v2::DigestType>(val));
        } else
          goto handle_unusual;
        continue;
      // string checksum = 2 [json_name = "checksum"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_checksum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.Digest.checksum"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Digest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Digest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.DigestType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string checksum = 2 [json_name = "checksum"];
  if (!this->_internal_checksum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checksum().data(), static_cast<int>(this->_internal_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.Digest.checksum");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checksum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Digest)
  return target;
}

size_t Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Digest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string checksum = 2 [json_name = "checksum"];
  if (!this->_internal_checksum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checksum());
  }

  // .apache.rocketmq.v2.DigestType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Digest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Digest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Digest::GetClassData() const { return &_class_data_; }

void Digest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Digest *>(to)->MergeFrom(
      static_cast<const Digest &>(from));
}


void Digest::MergeFrom(const Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Digest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_checksum().empty()) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Digest::CopyFrom(const Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digest::IsInitialized() const {
  return true;
}

void Digest::InternalSwap(Digest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &checksum_, lhs_arena,
      &other->checksum_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Digest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[10]);
}

// ===================================================================

class SystemProperties::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProperties>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apache::rocketmq::v2::Digest& body_digest(const SystemProperties* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& born_timestamp(const SystemProperties* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& store_timestamp(const SystemProperties* msg);
  static void set_has_store_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& delivery_timestamp(const SystemProperties* msg);
  static void set_has_delivery_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receipt_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_queue_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& invisible_duration(const SystemProperties* msg);
  static void set_has_invisible_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_delivery_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_message_group(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trace_context(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& orphaned_transaction_recovery_duration(const SystemProperties* msg);
  static void set_has_orphaned_transaction_recovery_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apache::rocketmq::v2::Digest&
SystemProperties::_Internal::body_digest(const SystemProperties* msg) {
  return *msg->body_digest_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemProperties::_Internal::born_timestamp(const SystemProperties* msg) {
  return *msg->born_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemProperties::_Internal::store_timestamp(const SystemProperties* msg) {
  return *msg->store_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SystemProperties::_Internal::delivery_timestamp(const SystemProperties* msg) {
  return *msg->delivery_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SystemProperties::_Internal::invisible_duration(const SystemProperties* msg) {
  return *msg->invisible_duration_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SystemProperties::_Internal::orphaned_transaction_recovery_duration(const SystemProperties* msg) {
  return *msg->orphaned_transaction_recovery_duration_;
}
void SystemProperties::clear_born_timestamp() {
  if (GetArenaForAllocation() == nullptr && born_timestamp_ != nullptr) {
    delete born_timestamp_;
  }
  born_timestamp_ = nullptr;
}
void SystemProperties::clear_store_timestamp() {
  if (store_timestamp_ != nullptr) store_timestamp_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SystemProperties::clear_delivery_timestamp() {
  if (delivery_timestamp_ != nullptr) delivery_timestamp_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SystemProperties::clear_invisible_duration() {
  if (invisible_duration_ != nullptr) invisible_duration_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SystemProperties::clear_orphaned_transaction_recovery_duration() {
  if (orphaned_transaction_recovery_duration_ != nullptr) orphaned_transaction_recovery_duration_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
SystemProperties::SystemProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.SystemProperties)
}
SystemProperties::SystemProperties(const SystemProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(from._internal_tag(), 
      GetArenaForAllocation());
  }
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  born_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    born_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_born_host().empty()) {
    born_host_.Set(from._internal_born_host(), 
      GetArenaForAllocation());
  }
  store_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    store_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_store_host().empty()) {
    store_host_.Set(from._internal_store_host(), 
      GetArenaForAllocation());
  }
  receipt_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receipt_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_receipt_handle()) {
    receipt_handle_.Set(from._internal_receipt_handle(), 
      GetArenaForAllocation());
  }
  message_group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_group()) {
    message_group_.Set(from._internal_message_group(), 
      GetArenaForAllocation());
  }
  trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trace_context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trace_context()) {
    trace_context_.Set(from._internal_trace_context(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_body_digest()) {
    body_digest_ = new ::apache::rocketmq::v2::Digest(*from.body_digest_);
  } else {
    body_digest_ = nullptr;
  }
  if (from._internal_has_born_timestamp()) {
    born_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.born_timestamp_);
  } else {
    born_timestamp_ = nullptr;
  }
  if (from._internal_has_store_timestamp()) {
    store_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.store_timestamp_);
  } else {
    store_timestamp_ = nullptr;
  }
  if (from._internal_has_delivery_timestamp()) {
    delivery_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.delivery_timestamp_);
  } else {
    delivery_timestamp_ = nullptr;
  }
  if (from._internal_has_invisible_duration()) {
    invisible_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.invisible_duration_);
  } else {
    invisible_duration_ = nullptr;
  }
  if (from._internal_has_orphaned_transaction_recovery_duration()) {
    orphaned_transaction_recovery_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.orphaned_transaction_recovery_duration_);
  } else {
    orphaned_transaction_recovery_duration_ = nullptr;
  }
  ::memcpy(&body_encoding_, &from.body_encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&delivery_attempt_) -
    reinterpret_cast<char*>(&body_encoding_)) + sizeof(delivery_attempt_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.SystemProperties)
}

inline void SystemProperties::SharedCtor() {
tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
born_host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  born_host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
store_host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  store_host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receipt_handle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receipt_handle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_group_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_group_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trace_context_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trace_context_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&body_digest_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delivery_attempt_) -
    reinterpret_cast<char*>(&body_digest_)) + sizeof(delivery_attempt_));
}

SystemProperties::~SystemProperties() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.SystemProperties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.Destroy();
  message_id_.Destroy();
  born_host_.Destroy();
  store_host_.Destroy();
  receipt_handle_.Destroy();
  message_group_.Destroy();
  trace_context_.Destroy();
  if (this != internal_default_instance()) delete body_digest_;
  if (this != internal_default_instance()) delete born_timestamp_;
  if (this != internal_default_instance()) delete store_timestamp_;
  if (this != internal_default_instance()) delete delivery_timestamp_;
  if (this != internal_default_instance()) delete invisible_duration_;
  if (this != internal_default_instance()) delete orphaned_transaction_recovery_duration_;
}

void SystemProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.SystemProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  message_id_.ClearToEmpty();
  born_host_.ClearToEmpty();
  store_host_.ClearToEmpty();
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      receipt_handle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      message_group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      trace_context_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && body_digest_ != nullptr) {
    delete body_digest_;
  }
  body_digest_ = nullptr;
  if (GetArenaForAllocation() == nullptr && born_timestamp_ != nullptr) {
    delete born_timestamp_;
  }
  born_timestamp_ = nullptr;
  if (cached_has_bits & 0x000000f0u) {
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(store_timestamp_ != nullptr);
      store_timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(delivery_timestamp_ != nullptr);
      delivery_timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(invisible_duration_ != nullptr);
      invisible_duration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(orphaned_transaction_recovery_duration_ != nullptr);
      orphaned_transaction_recovery_duration_->Clear();
    }
  }
  ::memset(&body_encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&body_encoding_)) + sizeof(message_type_));
  queue_offset_ = int64_t{0};
  queue_id_ = 0;
  delivery_attempt_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemProperties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string tag = 1 [json_name = "tag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.tag"));
        } else
          goto handle_unusual;
        continue;
      // repeated string keys = 2 [json_name = "keys"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string message_id = 3 [json_name = "messageId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.message_id"));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Digest body_digest = 4 [json_name = "bodyDigest"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_digest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Encoding body_encoding = 5 [json_name = "bodyEncoding"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_body_encoding(static_cast<::apache::rocketmq::v2::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.MessageType message_type = 6 [json_name = "messageType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::apache::rocketmq::v2::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp born_timestamp = 7 [json_name = "bornTimestamp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_born_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string born_host = 8 [json_name = "bornHost"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_born_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.born_host"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp store_timestamp = 9 [json_name = "storeTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_store_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string store_host = 10 [json_name = "storeHost"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_store_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.store_host"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp delivery_timestamp = 11 [json_name = "deliveryTimestamp"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_delivery_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string receipt_handle = 12 [json_name = "receiptHandle"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_receipt_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.receipt_handle"));
        } else
          goto handle_unusual;
        continue;
      // int32 queue_id = 13 [json_name = "queueId"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          queue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 queue_offset = 14 [json_name = "queueOffset"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_queue_offset(&has_bits);
          queue_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration invisible_duration = 15 [json_name = "invisibleDuration"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_invisible_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delivery_attempt = 16 [json_name = "deliveryAttempt"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_delivery_attempt(&has_bits);
          delivery_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message_group = 17 [json_name = "messageGroup"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_message_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.message_group"));
        } else
          goto handle_unusual;
        continue;
      // optional string trace_context = 18 [json_name = "traceContext"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_trace_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SystemProperties.trace_context"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration orphaned_transaction_recovery_duration = 19 [json_name = "orphanedTransactionRecoveryDuration"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_orphaned_transaction_recovery_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.SystemProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string tag = 1 [json_name = "tag"];
  if (_internal_has_tag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // repeated string keys = 2 [json_name = "keys"];
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.keys");
    target = stream->WriteString(2, s, target);
  }

  // string message_id = 3 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.message_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_id(), target);
  }

  // .apache.rocketmq.v2.Digest body_digest = 4 [json_name = "bodyDigest"];
  if (this->_internal_has_body_digest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::body_digest(this),
        _Internal::body_digest(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Encoding body_encoding = 5 [json_name = "bodyEncoding"];
  if (this->_internal_body_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_body_encoding(), target);
  }

  // .apache.rocketmq.v2.MessageType message_type = 6 [json_name = "messageType"];
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_message_type(), target);
  }

  // .google.protobuf.Timestamp born_timestamp = 7 [json_name = "bornTimestamp"];
  if (this->_internal_has_born_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::born_timestamp(this),
        _Internal::born_timestamp(this).GetCachedSize(), target, stream);
  }

  // string born_host = 8 [json_name = "bornHost"];
  if (!this->_internal_born_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_born_host().data(), static_cast<int>(this->_internal_born_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.born_host");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_born_host(), target);
  }

  // optional .google.protobuf.Timestamp store_timestamp = 9 [json_name = "storeTimestamp"];
  if (_internal_has_store_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::store_timestamp(this),
        _Internal::store_timestamp(this).GetCachedSize(), target, stream);
  }

  // string store_host = 10 [json_name = "storeHost"];
  if (!this->_internal_store_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_store_host().data(), static_cast<int>(this->_internal_store_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.store_host");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_store_host(), target);
  }

  // optional .google.protobuf.Timestamp delivery_timestamp = 11 [json_name = "deliveryTimestamp"];
  if (_internal_has_delivery_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::delivery_timestamp(this),
        _Internal::delivery_timestamp(this).GetCachedSize(), target, stream);
  }

  // optional string receipt_handle = 12 [json_name = "receiptHandle"];
  if (_internal_has_receipt_handle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_handle().data(), static_cast<int>(this->_internal_receipt_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.receipt_handle");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_receipt_handle(), target);
  }

  // int32 queue_id = 13 [json_name = "queueId"];
  if (this->_internal_queue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_queue_id(), target);
  }

  // optional int64 queue_offset = 14 [json_name = "queueOffset"];
  if (_internal_has_queue_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_queue_offset(), target);
  }

  // optional .google.protobuf.Duration invisible_duration = 15 [json_name = "invisibleDuration"];
  if (_internal_has_invisible_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::invisible_duration(this),
        _Internal::invisible_duration(this).GetCachedSize(), target, stream);
  }

  // optional int32 delivery_attempt = 16 [json_name = "deliveryAttempt"];
  if (_internal_has_delivery_attempt()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_delivery_attempt(), target);
  }

  // optional string message_group = 17 [json_name = "messageGroup"];
  if (_internal_has_message_group()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_group().data(), static_cast<int>(this->_internal_message_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.message_group");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_message_group(), target);
  }

  // optional string trace_context = 18 [json_name = "traceContext"];
  if (_internal_has_trace_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_context().data(), static_cast<int>(this->_internal_trace_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SystemProperties.trace_context");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_trace_context(), target);
  }

  // optional .google.protobuf.Duration orphaned_transaction_recovery_duration = 19 [json_name = "orphanedTransactionRecoveryDuration"];
  if (_internal_has_orphaned_transaction_recovery_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::orphaned_transaction_recovery_duration(this),
        _Internal::orphaned_transaction_recovery_duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.SystemProperties)
  return target;
}

size_t SystemProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.SystemProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2 [json_name = "keys"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  // optional string tag = 1 [json_name = "tag"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string message_id = 3 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string born_host = 8 [json_name = "bornHost"];
  if (!this->_internal_born_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_born_host());
  }

  // string store_host = 10 [json_name = "storeHost"];
  if (!this->_internal_store_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_store_host());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional string receipt_handle = 12 [json_name = "receiptHandle"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_receipt_handle());
    }

    // optional string message_group = 17 [json_name = "messageGroup"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_group());
    }

    // optional string trace_context = 18 [json_name = "traceContext"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trace_context());
    }

  }
  // .apache.rocketmq.v2.Digest body_digest = 4 [json_name = "bodyDigest"];
  if (this->_internal_has_body_digest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_digest_);
  }

  // .google.protobuf.Timestamp born_timestamp = 7 [json_name = "bornTimestamp"];
  if (this->_internal_has_born_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *born_timestamp_);
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional .google.protobuf.Timestamp store_timestamp = 9 [json_name = "storeTimestamp"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *store_timestamp_);
    }

    // optional .google.protobuf.Timestamp delivery_timestamp = 11 [json_name = "deliveryTimestamp"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delivery_timestamp_);
    }

    // optional .google.protobuf.Duration invisible_duration = 15 [json_name = "invisibleDuration"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *invisible_duration_);
    }

    // optional .google.protobuf.Duration orphaned_transaction_recovery_duration = 19 [json_name = "orphanedTransactionRecoveryDuration"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orphaned_transaction_recovery_duration_);
    }

  }
  // .apache.rocketmq.v2.Encoding body_encoding = 5 [json_name = "bodyEncoding"];
  if (this->_internal_body_encoding() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_body_encoding());
  }

  // .apache.rocketmq.v2.MessageType message_type = 6 [json_name = "messageType"];
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // optional int64 queue_offset = 14 [json_name = "queueOffset"];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_queue_offset());
  }

  // int32 queue_id = 13 [json_name = "queueId"];
  if (this->_internal_queue_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_queue_id());
  }

  // optional int32 delivery_attempt = 16 [json_name = "deliveryAttempt"];
  if (cached_has_bits & 0x00000200u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_delivery_attempt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemProperties::GetClassData() const { return &_class_data_; }

void SystemProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SystemProperties *>(to)->MergeFrom(
      static_cast<const SystemProperties &>(from));
}


void SystemProperties::MergeFrom(const SystemProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.SystemProperties)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from._internal_has_tag()) {
    _internal_set_tag(from._internal_tag());
  }
  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_born_host().empty()) {
    _internal_set_born_host(from._internal_born_host());
  }
  if (!from._internal_store_host().empty()) {
    _internal_set_store_host(from._internal_store_host());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_receipt_handle(from._internal_receipt_handle());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_message_group(from._internal_message_group());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_trace_context(from._internal_trace_context());
    }
  }
  if (from._internal_has_body_digest()) {
    _internal_mutable_body_digest()->::apache::rocketmq::v2::Digest::MergeFrom(from._internal_body_digest());
  }
  if (from._internal_has_born_timestamp()) {
    _internal_mutable_born_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_born_timestamp());
  }
  if (cached_has_bits & 0x000000f0u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_store_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_store_timestamp());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_delivery_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_delivery_timestamp());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_invisible_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_invisible_duration());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_orphaned_transaction_recovery_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_orphaned_transaction_recovery_duration());
    }
  }
  if (from._internal_body_encoding() != 0) {
    _internal_set_body_encoding(from._internal_body_encoding());
  }
  if (from._internal_message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_queue_offset(from._internal_queue_offset());
  }
  if (from._internal_queue_id() != 0) {
    _internal_set_queue_id(from._internal_queue_id());
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_delivery_attempt(from._internal_delivery_attempt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemProperties::CopyFrom(const SystemProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.SystemProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProperties::IsInitialized() const {
  return true;
}

void SystemProperties::InternalSwap(SystemProperties* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &born_host_, lhs_arena,
      &other->born_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &store_host_, lhs_arena,
      &other->store_host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receipt_handle_, lhs_arena,
      &other->receipt_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_group_, lhs_arena,
      &other->message_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trace_context_, lhs_arena,
      &other->trace_context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemProperties, delivery_attempt_)
      + sizeof(SystemProperties::delivery_attempt_)
      - PROTOBUF_FIELD_OFFSET(SystemProperties, body_digest_)>(
          reinterpret_cast<char*>(&body_digest_),
          reinterpret_cast<char*>(&other->body_digest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemProperties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[11]);
}

// ===================================================================

Message_UserPropertiesEntry_DoNotUse::Message_UserPropertiesEntry_DoNotUse() {}
Message_UserPropertiesEntry_DoNotUse::Message_UserPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Message_UserPropertiesEntry_DoNotUse::MergeFrom(const Message_UserPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Message_UserPropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[12]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& topic(const Message* msg);
  static const ::apache::rocketmq::v2::SystemProperties& system_properties(const Message* msg);
};

const ::apache::rocketmq::v2::Resource&
Message::_Internal::topic(const Message* msg) {
  return *msg->topic_;
}
const ::apache::rocketmq::v2::SystemProperties&
Message::_Internal::system_properties(const Message* msg) {
  return *msg->system_properties_;
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_properties_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Message::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_properties_.MergeFrom(from.user_properties_);
  body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    body_.Set(from._internal_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_system_properties()) {
    system_properties_ = new ::apache::rocketmq::v2::SystemProperties(*from.system_properties_);
  } else {
    system_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Message)
}

inline void Message::SharedCtor() {
body_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&system_properties_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(system_properties_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_properties_.Destruct();
  body_.Destroy();
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete system_properties_;
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  _this->user_properties_.Destruct();
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_properties_.Clear();
  body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && system_properties_ != nullptr) {
    delete system_properties_;
  }
  system_properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> user_properties = 2 [json_name = "userProperties"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&user_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.SystemProperties system_properties = 3 [json_name = "systemProperties"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body = 4 [json_name = "body"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // map<string, string> user_properties = 2 [json_name = "userProperties"];
  if (!this->_internal_user_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Message_UserPropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_user_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "apache.rocketmq.v2.Message.UserPropertiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "apache.rocketmq.v2.Message.UserPropertiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .apache.rocketmq.v2.SystemProperties system_properties = 3 [json_name = "systemProperties"];
  if (this->_internal_has_system_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::system_properties(this),
        _Internal::system_properties(this).GetCachedSize(), target, stream);
  }

  // bytes body = 4 [json_name = "body"];
  if (!this->_internal_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> user_properties = 2 [json_name = "userProperties"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_user_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_user_properties().begin();
      it != this->_internal_user_properties().end(); ++it) {
    total_size += Message_UserPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes body = 4 [json_name = "body"];
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .apache.rocketmq.v2.SystemProperties system_properties = 3 [json_name = "systemProperties"];
  if (this->_internal_has_system_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_properties_.MergeFrom(from.user_properties_);
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_has_system_properties()) {
    _internal_mutable_system_properties()->::apache::rocketmq::v2::SystemProperties::MergeFrom(from._internal_system_properties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_properties_.InternalSwap(&other->user_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, system_properties_)
      + sizeof(Message::system_properties_)
      - PROTOBUF_FIELD_OFFSET(Message, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[13]);
}

// ===================================================================

class Assignment::_Internal {
 public:
  static const ::apache::rocketmq::v2::MessageQueue& message_queue(const Assignment* msg);
};

const ::apache::rocketmq::v2::MessageQueue&
Assignment::_Internal::message_queue(const Assignment* msg) {
  return *msg->message_queue_;
}
Assignment::Assignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Assignment)
}
Assignment::Assignment(const Assignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_queue()) {
    message_queue_ = new ::apache::rocketmq::v2::MessageQueue(*from.message_queue_);
  } else {
    message_queue_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Assignment)
}

inline void Assignment::SharedCtor() {
message_queue_ = nullptr;
}

Assignment::~Assignment() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Assignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Assignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete message_queue_;
}

void Assignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Assignment::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Assignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && message_queue_ != nullptr) {
    delete message_queue_;
  }
  message_queue_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Assignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.MessageQueue message_queue = 1 [json_name = "messageQueue"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_queue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Assignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Assignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.MessageQueue message_queue = 1 [json_name = "messageQueue"];
  if (this->_internal_has_message_queue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message_queue(this),
        _Internal::message_queue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Assignment)
  return target;
}

size_t Assignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Assignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.MessageQueue message_queue = 1 [json_name = "messageQueue"];
  if (this->_internal_has_message_queue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_queue_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Assignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Assignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Assignment::GetClassData() const { return &_class_data_; }

void Assignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Assignment *>(to)->MergeFrom(
      static_cast<const Assignment &>(from));
}


void Assignment::MergeFrom(const Assignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Assignment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_queue()) {
    _internal_mutable_message_queue()->::apache::rocketmq::v2::MessageQueue::MergeFrom(from._internal_message_queue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Assignment::CopyFrom(const Assignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Assignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Assignment::IsInitialized() const {
  return true;
}

void Assignment::InternalSwap(Assignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_queue_, other->message_queue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Assignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[14]);
}

// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Status)
}

inline void Status::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Code code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::apache::rocketmq::v2::Code>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.Status.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Code code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.Status.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .apache.rocketmq.v2.Code code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }

void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Status *>(to)->MergeFrom(
      static_cast<const Status &>(from));
}


void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Status)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[15]);
}

// ===================================================================

class UA::_Internal {
 public:
};

UA::UA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.UA)
}
UA::UA(const UA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platform().empty()) {
    platform_.Set(from._internal_platform(), 
      GetArenaForAllocation());
  }
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.UA)
}

inline void UA::SharedCtor() {
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
language_ = 0;
}

UA::~UA() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.UA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.Destroy();
  platform_.Destroy();
  hostname_.Destroy();
}

void UA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UA::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.UA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  platform_.ClearToEmpty();
  hostname_.ClearToEmpty();
  language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Language language = 1 [json_name = "language"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::apache::rocketmq::v2::Language>(val));
        } else
          goto handle_unusual;
        continue;
      // string version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.UA.version"));
        } else
          goto handle_unusual;
        continue;
      // string platform = 3 [json_name = "platform"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.UA.platform"));
        } else
          goto handle_unusual;
        continue;
      // string hostname = 4 [json_name = "hostname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.UA.hostname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.UA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Language language = 1 [json_name = "language"];
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_language(), target);
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.UA.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // string platform = 3 [json_name = "platform"];
  if (!this->_internal_platform().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.UA.platform");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_platform(), target);
  }

  // string hostname = 4 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.UA.hostname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.UA)
  return target;
}

size_t UA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.UA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string platform = 3 [json_name = "platform"];
  if (!this->_internal_platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // string hostname = 4 [json_name = "hostname"];
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .apache.rocketmq.v2.Language language = 1 [json_name = "language"];
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UA::GetClassData() const { return &_class_data_; }

void UA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UA *>(to)->MergeFrom(
      static_cast<const UA &>(from));
}


void UA::MergeFrom(const UA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.UA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_platform().empty()) {
    _internal_set_platform(from._internal_platform());
  }
  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UA::CopyFrom(const UA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.UA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UA::IsInitialized() const {
  return true;
}

void UA::InternalSwap(UA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &platform_, lhs_arena,
      &other->platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fdefinition_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::FilterExpression*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::FilterExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::FilterExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::RetryPolicy*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::RetryPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::RetryPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ExponentialBackoff*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ExponentialBackoff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ExponentialBackoff >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::CustomizedBackoff*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::CustomizedBackoff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::CustomizedBackoff >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Resource*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::SubscriptionEntry*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::SubscriptionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::SubscriptionEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Address*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Address >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Endpoints*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Endpoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Endpoints >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Broker*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Broker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Broker >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::MessageQueue*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::MessageQueue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::MessageQueue >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Digest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Digest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Digest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::SystemProperties*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::SystemProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::SystemProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Message_UserPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Message*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Assignment*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Assignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Assignment >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Status*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::UA*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::UA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::UA >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

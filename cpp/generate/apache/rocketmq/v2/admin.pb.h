// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apache_2frocketmq_2fv2_2fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apache_2frocketmq_2fv2_2fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apache_2frocketmq_2fv2_2fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apache_2frocketmq_2fv2_2fadmin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto;
namespace apache {
namespace rocketmq {
namespace v2 {
class ChangeLogLevelRequest;
struct ChangeLogLevelRequestDefaultTypeInternal;
extern ChangeLogLevelRequestDefaultTypeInternal _ChangeLogLevelRequest_default_instance_;
class ChangeLogLevelResponse;
struct ChangeLogLevelResponseDefaultTypeInternal;
extern ChangeLogLevelResponseDefaultTypeInternal _ChangeLogLevelResponse_default_instance_;
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
PROTOBUF_NAMESPACE_OPEN
template<> ::apache::rocketmq::v2::ChangeLogLevelRequest* Arena::CreateMaybeMessage<::apache::rocketmq::v2::ChangeLogLevelRequest>(Arena*);
template<> ::apache::rocketmq::v2::ChangeLogLevelResponse* Arena::CreateMaybeMessage<::apache::rocketmq::v2::ChangeLogLevelResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apache {
namespace rocketmq {
namespace v2 {

enum ChangeLogLevelRequest_Level : int {
  ChangeLogLevelRequest_Level_TRACE = 0,
  ChangeLogLevelRequest_Level_DEBUG = 1,
  ChangeLogLevelRequest_Level_INFO = 2,
  ChangeLogLevelRequest_Level_WARN = 3,
  ChangeLogLevelRequest_Level_ERROR = 4,
  ChangeLogLevelRequest_Level_ChangeLogLevelRequest_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChangeLogLevelRequest_Level_ChangeLogLevelRequest_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChangeLogLevelRequest_Level_IsValid(int value);
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest_Level_Level_MIN = ChangeLogLevelRequest_Level_TRACE;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest_Level_Level_MAX = ChangeLogLevelRequest_Level_ERROR;
constexpr int ChangeLogLevelRequest_Level_Level_ARRAYSIZE = ChangeLogLevelRequest_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLogLevelRequest_Level_descriptor();
template<typename T>
inline const std::string& ChangeLogLevelRequest_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeLogLevelRequest_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeLogLevelRequest_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeLogLevelRequest_Level_descriptor(), enum_t_value);
}
inline bool ChangeLogLevelRequest_Level_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChangeLogLevelRequest_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeLogLevelRequest_Level>(
    ChangeLogLevelRequest_Level_descriptor(), name, value);
}
// ===================================================================

class ChangeLogLevelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apache.rocketmq.v2.ChangeLogLevelRequest) */ {
 public:
  inline ChangeLogLevelRequest() : ChangeLogLevelRequest(nullptr) {}
  ~ChangeLogLevelRequest() override;
  explicit PROTOBUF_CONSTEXPR ChangeLogLevelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeLogLevelRequest(const ChangeLogLevelRequest& from);
  ChangeLogLevelRequest(ChangeLogLevelRequest&& from) noexcept
    : ChangeLogLevelRequest() {
    *this = ::std::move(from);
  }

  inline ChangeLogLevelRequest& operator=(const ChangeLogLevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeLogLevelRequest& operator=(ChangeLogLevelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeLogLevelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeLogLevelRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeLogLevelRequest*>(
               &_ChangeLogLevelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChangeLogLevelRequest& a, ChangeLogLevelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeLogLevelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeLogLevelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeLogLevelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeLogLevelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeLogLevelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangeLogLevelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLogLevelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apache.rocketmq.v2.ChangeLogLevelRequest";
  }
  protected:
  explicit ChangeLogLevelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeLogLevelRequest_Level Level;
  static constexpr Level TRACE =
    ChangeLogLevelRequest_Level_TRACE;
  static constexpr Level DEBUG =
    ChangeLogLevelRequest_Level_DEBUG;
  static constexpr Level INFO =
    ChangeLogLevelRequest_Level_INFO;
  static constexpr Level WARN =
    ChangeLogLevelRequest_Level_WARN;
  static constexpr Level ERROR =
    ChangeLogLevelRequest_Level_ERROR;
  static inline bool Level_IsValid(int value) {
    return ChangeLogLevelRequest_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    ChangeLogLevelRequest_Level_Level_MIN;
  static constexpr Level Level_MAX =
    ChangeLogLevelRequest_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    ChangeLogLevelRequest_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return ChangeLogLevelRequest_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return ChangeLogLevelRequest_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Level* value) {
    return ChangeLogLevelRequest_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // .apache.rocketmq.v2.ChangeLogLevelRequest.Level level = 1 [json_name = "level"];
  void clear_level();
  ::apache::rocketmq::v2::ChangeLogLevelRequest_Level level() const;
  void set_level(::apache::rocketmq::v2::ChangeLogLevelRequest_Level value);
  private:
  ::apache::rocketmq::v2::ChangeLogLevelRequest_Level _internal_level() const;
  void _internal_set_level(::apache::rocketmq::v2::ChangeLogLevelRequest_Level value);
  public:

  // @@protoc_insertion_point(class_scope:apache.rocketmq.v2.ChangeLogLevelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apache_2frocketmq_2fv2_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ChangeLogLevelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apache.rocketmq.v2.ChangeLogLevelResponse) */ {
 public:
  inline ChangeLogLevelResponse() : ChangeLogLevelResponse(nullptr) {}
  ~ChangeLogLevelResponse() override;
  explicit PROTOBUF_CONSTEXPR ChangeLogLevelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeLogLevelResponse(const ChangeLogLevelResponse& from);
  ChangeLogLevelResponse(ChangeLogLevelResponse&& from) noexcept
    : ChangeLogLevelResponse() {
    *this = ::std::move(from);
  }

  inline ChangeLogLevelResponse& operator=(const ChangeLogLevelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeLogLevelResponse& operator=(ChangeLogLevelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeLogLevelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeLogLevelResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeLogLevelResponse*>(
               &_ChangeLogLevelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChangeLogLevelResponse& a, ChangeLogLevelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeLogLevelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeLogLevelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeLogLevelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeLogLevelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeLogLevelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangeLogLevelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLogLevelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apache.rocketmq.v2.ChangeLogLevelResponse";
  }
  protected:
  explicit ChangeLogLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemarkFieldNumber = 1,
  };
  // string remark = 1 [json_name = "remark"];
  void clear_remark();
  const std::string& remark() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remark(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remark();
  PROTOBUF_NODISCARD std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // @@protoc_insertion_point(class_scope:apache.rocketmq.v2.ChangeLogLevelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apache_2frocketmq_2fv2_2fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChangeLogLevelRequest

// .apache.rocketmq.v2.ChangeLogLevelRequest.Level level = 1 [json_name = "level"];
inline void ChangeLogLevelRequest::clear_level() {
  level_ = 0;
}
inline ::apache::rocketmq::v2::ChangeLogLevelRequest_Level ChangeLogLevelRequest::_internal_level() const {
  return static_cast< ::apache::rocketmq::v2::ChangeLogLevelRequest_Level >(level_);
}
inline ::apache::rocketmq::v2::ChangeLogLevelRequest_Level ChangeLogLevelRequest::level() const {
  // @@protoc_insertion_point(field_get:apache.rocketmq.v2.ChangeLogLevelRequest.level)
  return _internal_level();
}
inline void ChangeLogLevelRequest::_internal_set_level(::apache::rocketmq::v2::ChangeLogLevelRequest_Level value) {
  
  level_ = value;
}
inline void ChangeLogLevelRequest::set_level(::apache::rocketmq::v2::ChangeLogLevelRequest_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:apache.rocketmq.v2.ChangeLogLevelRequest.level)
}

// -------------------------------------------------------------------

// ChangeLogLevelResponse

// string remark = 1 [json_name = "remark"];
inline void ChangeLogLevelResponse::clear_remark() {
  remark_.ClearToEmpty();
}
inline const std::string& ChangeLogLevelResponse::remark() const {
  // @@protoc_insertion_point(field_get:apache.rocketmq.v2.ChangeLogLevelResponse.remark)
  return _internal_remark();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeLogLevelResponse::set_remark(ArgT0&& arg0, ArgT... args) {
 
 remark_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apache.rocketmq.v2.ChangeLogLevelResponse.remark)
}
inline std::string* ChangeLogLevelResponse::mutable_remark() {
  std::string* _s = _internal_mutable_remark();
  // @@protoc_insertion_point(field_mutable:apache.rocketmq.v2.ChangeLogLevelResponse.remark)
  return _s;
}
inline const std::string& ChangeLogLevelResponse::_internal_remark() const {
  return remark_.Get();
}
inline void ChangeLogLevelResponse::_internal_set_remark(const std::string& value) {
  
  remark_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeLogLevelResponse::_internal_mutable_remark() {
  
  return remark_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeLogLevelResponse::release_remark() {
  // @@protoc_insertion_point(field_release:apache.rocketmq.v2.ChangeLogLevelResponse.remark)
  return remark_.Release();
}
inline void ChangeLogLevelResponse::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(remark, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remark_.IsDefault()) {
    remark_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.ChangeLogLevelResponse.remark)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace rocketmq
}  // namespace apache

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apache::rocketmq::v2::ChangeLogLevelRequest_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apache::rocketmq::v2::ChangeLogLevelRequest_Level>() {
  return ::apache::rocketmq::v2::ChangeLogLevelRequest_Level_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apache_2frocketmq_2fv2_2fadmin_2eproto

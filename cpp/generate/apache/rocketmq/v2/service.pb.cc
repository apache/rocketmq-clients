// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/service.proto

#include "apache/rocketmq/v2/service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apache {
namespace rocketmq {
namespace v2 {
PROTOBUF_CONSTEXPR QueryRouteRequest::QueryRouteRequest(
    ::_pbi::ConstantInitialized)
  : topic_(nullptr)
  , endpoints_(nullptr){}
struct QueryRouteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRouteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRouteRequestDefaultTypeInternal() {}
  union {
    QueryRouteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRouteRequestDefaultTypeInternal _QueryRouteRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryRouteResponse::QueryRouteResponse(
    ::_pbi::ConstantInitialized)
  : message_queues_()
  , status_(nullptr){}
struct QueryRouteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRouteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRouteResponseDefaultTypeInternal() {}
  union {
    QueryRouteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRouteResponseDefaultTypeInternal _QueryRouteResponse_default_instance_;
PROTOBUF_CONSTEXPR SendMessageRequest::SendMessageRequest(
    ::_pbi::ConstantInitialized)
  : messages_(){}
struct SendMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageRequestDefaultTypeInternal() {}
  union {
    SendMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR SendResultEntry::SendResultEntry(
    ::_pbi::ConstantInitialized)
  : message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(nullptr)
  , offset_(int64_t{0}){}
struct SendResultEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendResultEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendResultEntryDefaultTypeInternal() {}
  union {
    SendResultEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendResultEntryDefaultTypeInternal _SendResultEntry_default_instance_;
PROTOBUF_CONSTEXPR SendMessageResponse::SendMessageResponse(
    ::_pbi::ConstantInitialized)
  : entries_()
  , status_(nullptr){}
struct SendMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendMessageResponseDefaultTypeInternal() {}
  union {
    SendMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR QueryAssignmentRequest::QueryAssignmentRequest(
    ::_pbi::ConstantInitialized)
  : topic_(nullptr)
  , group_(nullptr)
  , endpoints_(nullptr){}
struct QueryAssignmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAssignmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAssignmentRequestDefaultTypeInternal() {}
  union {
    QueryAssignmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAssignmentRequestDefaultTypeInternal _QueryAssignmentRequest_default_instance_;
PROTOBUF_CONSTEXPR QueryAssignmentResponse::QueryAssignmentResponse(
    ::_pbi::ConstantInitialized)
  : assignments_()
  , status_(nullptr){}
struct QueryAssignmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAssignmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAssignmentResponseDefaultTypeInternal() {}
  union {
    QueryAssignmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAssignmentResponseDefaultTypeInternal _QueryAssignmentResponse_default_instance_;
PROTOBUF_CONSTEXPR ReceiveMessageRequest::ReceiveMessageRequest(
    ::_pbi::ConstantInitialized)
  : group_(nullptr)
  , message_queue_(nullptr)
  , filter_expression_(nullptr)
  , invisible_duration_(nullptr)
  , batch_size_(0)
  , auto_renew_(false){}
struct ReceiveMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceiveMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceiveMessageRequestDefaultTypeInternal() {}
  union {
    ReceiveMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceiveMessageRequestDefaultTypeInternal _ReceiveMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR ReceiveMessageResponse::ReceiveMessageResponse(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ReceiveMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReceiveMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReceiveMessageResponseDefaultTypeInternal() {}
  union {
    ReceiveMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReceiveMessageResponseDefaultTypeInternal _ReceiveMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR AckMessageEntry::AckMessageEntry(
    ::_pbi::ConstantInitialized)
  : message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , receipt_handle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AckMessageEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckMessageEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckMessageEntryDefaultTypeInternal() {}
  union {
    AckMessageEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckMessageEntryDefaultTypeInternal _AckMessageEntry_default_instance_;
PROTOBUF_CONSTEXPR AckMessageRequest::AckMessageRequest(
    ::_pbi::ConstantInitialized)
  : entries_()
  , group_(nullptr)
  , topic_(nullptr){}
struct AckMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckMessageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckMessageRequestDefaultTypeInternal() {}
  union {
    AckMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckMessageRequestDefaultTypeInternal _AckMessageRequest_default_instance_;
PROTOBUF_CONSTEXPR AckMessageResultEntry::AckMessageResultEntry(
    ::_pbi::ConstantInitialized)
  : message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , receipt_handle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(nullptr){}
struct AckMessageResultEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckMessageResultEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckMessageResultEntryDefaultTypeInternal() {}
  union {
    AckMessageResultEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckMessageResultEntryDefaultTypeInternal _AckMessageResultEntry_default_instance_;
PROTOBUF_CONSTEXPR AckMessageResponse::AckMessageResponse(
    ::_pbi::ConstantInitialized)
  : entries_()
  , status_(nullptr){}
struct AckMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckMessageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckMessageResponseDefaultTypeInternal() {}
  union {
    AckMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckMessageResponseDefaultTypeInternal _AckMessageResponse_default_instance_;
PROTOBUF_CONSTEXPR ForwardMessageToDeadLetterQueueRequest::ForwardMessageToDeadLetterQueueRequest(
    ::_pbi::ConstantInitialized)
  : receipt_handle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , group_(nullptr)
  , topic_(nullptr)
  , delivery_attempt_(0)
  , max_delivery_attempts_(0){}
struct ForwardMessageToDeadLetterQueueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardMessageToDeadLetterQueueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardMessageToDeadLetterQueueRequestDefaultTypeInternal() {}
  union {
    ForwardMessageToDeadLetterQueueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardMessageToDeadLetterQueueRequestDefaultTypeInternal _ForwardMessageToDeadLetterQueueRequest_default_instance_;
PROTOBUF_CONSTEXPR ForwardMessageToDeadLetterQueueResponse::ForwardMessageToDeadLetterQueueResponse(
    ::_pbi::ConstantInitialized)
  : status_(nullptr){}
struct ForwardMessageToDeadLetterQueueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardMessageToDeadLetterQueueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardMessageToDeadLetterQueueResponseDefaultTypeInternal() {}
  union {
    ForwardMessageToDeadLetterQueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardMessageToDeadLetterQueueResponseDefaultTypeInternal _ForwardMessageToDeadLetterQueueResponse_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatRequest::HeartbeatRequest(
    ::_pbi::ConstantInitialized)
  : group_(nullptr)
  , client_type_(0)
{}
struct HeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized)
  : status_(nullptr){}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR EndTransactionRequest::EndTransactionRequest(
    ::_pbi::ConstantInitialized)
  : message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transaction_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , trace_context_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , topic_(nullptr)
  , resolution_(0)

  , source_(0)
{}
struct EndTransactionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndTransactionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndTransactionRequestDefaultTypeInternal() {}
  union {
    EndTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndTransactionRequestDefaultTypeInternal _EndTransactionRequest_default_instance_;
PROTOBUF_CONSTEXPR EndTransactionResponse::EndTransactionResponse(
    ::_pbi::ConstantInitialized)
  : status_(nullptr){}
struct EndTransactionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndTransactionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndTransactionResponseDefaultTypeInternal() {}
  union {
    EndTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndTransactionResponseDefaultTypeInternal _EndTransactionResponse_default_instance_;
PROTOBUF_CONSTEXPR PrintThreadStackTraceCommand::PrintThreadStackTraceCommand(
    ::_pbi::ConstantInitialized)
  : nonce_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PrintThreadStackTraceCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrintThreadStackTraceCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrintThreadStackTraceCommandDefaultTypeInternal() {}
  union {
    PrintThreadStackTraceCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrintThreadStackTraceCommandDefaultTypeInternal _PrintThreadStackTraceCommand_default_instance_;
PROTOBUF_CONSTEXPR ThreadStackTrace::ThreadStackTrace(
    ::_pbi::ConstantInitialized)
  : nonce_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , thread_stack_trace_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ThreadStackTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThreadStackTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThreadStackTraceDefaultTypeInternal() {}
  union {
    ThreadStackTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThreadStackTraceDefaultTypeInternal _ThreadStackTrace_default_instance_;
PROTOBUF_CONSTEXPR VerifyMessageCommand::VerifyMessageCommand(
    ::_pbi::ConstantInitialized)
  : nonce_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_(nullptr){}
struct VerifyMessageCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyMessageCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyMessageCommandDefaultTypeInternal() {}
  union {
    VerifyMessageCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyMessageCommandDefaultTypeInternal _VerifyMessageCommand_default_instance_;
PROTOBUF_CONSTEXPR VerifyMessageResult::VerifyMessageResult(
    ::_pbi::ConstantInitialized)
  : nonce_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct VerifyMessageResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyMessageResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyMessageResultDefaultTypeInternal() {}
  union {
    VerifyMessageResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyMessageResultDefaultTypeInternal _VerifyMessageResult_default_instance_;
PROTOBUF_CONSTEXPR RecoverOrphanedTransactionCommand::RecoverOrphanedTransactionCommand(
    ::_pbi::ConstantInitialized)
  : transaction_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_(nullptr){}
struct RecoverOrphanedTransactionCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoverOrphanedTransactionCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoverOrphanedTransactionCommandDefaultTypeInternal() {}
  union {
    RecoverOrphanedTransactionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoverOrphanedTransactionCommandDefaultTypeInternal _RecoverOrphanedTransactionCommand_default_instance_;
PROTOBUF_CONSTEXPR Publishing::Publishing(
    ::_pbi::ConstantInitialized)
  : topics_()
  , max_body_size_(0)
  , validate_message_type_(false){}
struct PublishingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishingDefaultTypeInternal() {}
  union {
    Publishing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishingDefaultTypeInternal _Publishing_default_instance_;
PROTOBUF_CONSTEXPR Subscription::Subscription(
    ::_pbi::ConstantInitialized)
  : subscriptions_()
  , group_(nullptr)
  , long_polling_timeout_(nullptr)
  , fifo_(false)
  , receive_batch_size_(0){}
struct SubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionDefaultTypeInternal() {}
  union {
    Subscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionDefaultTypeInternal _Subscription_default_instance_;
PROTOBUF_CONSTEXPR Metric::Metric(
    ::_pbi::ConstantInitialized)
  : endpoints_(nullptr)
  , on_(false){}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;
PROTOBUF_CONSTEXPR Settings::Settings(
    ::_pbi::ConstantInitialized)
  : access_point_(nullptr)
  , backoff_policy_(nullptr)
  , request_timeout_(nullptr)
  , user_agent_(nullptr)
  , metric_(nullptr)
  , client_type_(0)

  , _oneof_case_{}{}
struct SettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SettingsDefaultTypeInternal() {}
  union {
    Settings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SettingsDefaultTypeInternal _Settings_default_instance_;
PROTOBUF_CONSTEXPR TelemetryCommand::TelemetryCommand(
    ::_pbi::ConstantInitialized)
  : status_(nullptr)
  , _oneof_case_{}{}
struct TelemetryCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryCommandDefaultTypeInternal() {}
  union {
    TelemetryCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryCommandDefaultTypeInternal _TelemetryCommand_default_instance_;
PROTOBUF_CONSTEXPR NotifyClientTerminationRequest::NotifyClientTerminationRequest(
    ::_pbi::ConstantInitialized)
  : group_(nullptr){}
struct NotifyClientTerminationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyClientTerminationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyClientTerminationRequestDefaultTypeInternal() {}
  union {
    NotifyClientTerminationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyClientTerminationRequestDefaultTypeInternal _NotifyClientTerminationRequest_default_instance_;
PROTOBUF_CONSTEXPR NotifyClientTerminationResponse::NotifyClientTerminationResponse(
    ::_pbi::ConstantInitialized)
  : status_(nullptr){}
struct NotifyClientTerminationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyClientTerminationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyClientTerminationResponseDefaultTypeInternal() {}
  union {
    NotifyClientTerminationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyClientTerminationResponseDefaultTypeInternal _NotifyClientTerminationResponse_default_instance_;
PROTOBUF_CONSTEXPR ChangeInvisibleDurationRequest::ChangeInvisibleDurationRequest(
    ::_pbi::ConstantInitialized)
  : receipt_handle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , group_(nullptr)
  , topic_(nullptr)
  , invisible_duration_(nullptr){}
struct ChangeInvisibleDurationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeInvisibleDurationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeInvisibleDurationRequestDefaultTypeInternal() {}
  union {
    ChangeInvisibleDurationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeInvisibleDurationRequestDefaultTypeInternal _ChangeInvisibleDurationRequest_default_instance_;
PROTOBUF_CONSTEXPR ChangeInvisibleDurationResponse::ChangeInvisibleDurationResponse(
    ::_pbi::ConstantInitialized)
  : receipt_handle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(nullptr){}
struct ChangeInvisibleDurationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeInvisibleDurationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeInvisibleDurationResponseDefaultTypeInternal() {}
  union {
    ChangeInvisibleDurationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeInvisibleDurationResponseDefaultTypeInternal _ChangeInvisibleDurationResponse_default_instance_;
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
static ::_pb::Metadata file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[33];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_apache_2frocketmq_2fv2_2fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_apache_2frocketmq_2fv2_2fservice_2eproto = nullptr;

const uint32_t TableStruct_apache_2frocketmq_2fv2_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryRouteRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryRouteRequest, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryRouteResponse, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryRouteResponse, message_queues_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendMessageRequest, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendResultEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendResultEntry, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendResultEntry, message_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendResultEntry, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendResultEntry, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendMessageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::SendMessageResponse, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentRequest, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentRequest, endpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentResponse, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::QueryAssignmentResponse, assignments_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, message_queue_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, filter_expression_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, batch_size_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, invisible_duration_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageRequest, auto_renew_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ReceiveMessageResponse, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageEntry, message_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageEntry, receipt_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageRequest, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageRequest, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResultEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResultEntry, message_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResultEntry, receipt_handle_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResultEntry, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::AckMessageResponse, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, receipt_handle_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, delivery_attempt_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, max_delivery_attempts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::HeartbeatRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::HeartbeatRequest, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::HeartbeatRequest, client_type_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::HeartbeatResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, resolution_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, source_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionRequest, trace_context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::EndTransactionResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::PrintThreadStackTraceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::PrintThreadStackTraceCommand, nonce_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ThreadStackTrace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ThreadStackTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ThreadStackTrace, nonce_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ThreadStackTrace, thread_stack_trace_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::VerifyMessageCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::VerifyMessageCommand, nonce_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::VerifyMessageCommand, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::VerifyMessageResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::VerifyMessageResult, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RecoverOrphanedTransactionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RecoverOrphanedTransactionCommand, message_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::RecoverOrphanedTransactionCommand, transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Publishing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Publishing, topics_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Publishing, max_body_size_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Publishing, validate_message_type_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, fifo_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, receive_batch_size_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Subscription, long_polling_timeout_),
  0,
  ~0u,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Metric, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Metric, on_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Metric, endpoints_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, client_type_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, access_point_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, backoff_policy_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, request_timeout_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, user_agent_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, metric_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::Settings, pub_sub_),
  3,
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::TelemetryCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::TelemetryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::TelemetryCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::TelemetryCommand, status_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::TelemetryCommand, command_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::NotifyClientTerminationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::NotifyClientTerminationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::NotifyClientTerminationRequest, group_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::NotifyClientTerminationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::NotifyClientTerminationResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationRequest, group_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationRequest, receipt_handle_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationRequest, invisible_duration_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationRequest, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeInvisibleDurationResponse, receipt_handle_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apache::rocketmq::v2::QueryRouteRequest)},
  { 8, -1, -1, sizeof(::apache::rocketmq::v2::QueryRouteResponse)},
  { 16, -1, -1, sizeof(::apache::rocketmq::v2::SendMessageRequest)},
  { 23, -1, -1, sizeof(::apache::rocketmq::v2::SendResultEntry)},
  { 33, -1, -1, sizeof(::apache::rocketmq::v2::SendMessageResponse)},
  { 41, -1, -1, sizeof(::apache::rocketmq::v2::QueryAssignmentRequest)},
  { 50, -1, -1, sizeof(::apache::rocketmq::v2::QueryAssignmentResponse)},
  { 58, 70, -1, sizeof(::apache::rocketmq::v2::ReceiveMessageRequest)},
  { 76, -1, -1, sizeof(::apache::rocketmq::v2::ReceiveMessageResponse)},
  { 86, -1, -1, sizeof(::apache::rocketmq::v2::AckMessageEntry)},
  { 94, -1, -1, sizeof(::apache::rocketmq::v2::AckMessageRequest)},
  { 103, -1, -1, sizeof(::apache::rocketmq::v2::AckMessageResultEntry)},
  { 112, -1, -1, sizeof(::apache::rocketmq::v2::AckMessageResponse)},
  { 120, -1, -1, sizeof(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest)},
  { 132, -1, -1, sizeof(::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse)},
  { 139, 147, -1, sizeof(::apache::rocketmq::v2::HeartbeatRequest)},
  { 149, -1, -1, sizeof(::apache::rocketmq::v2::HeartbeatResponse)},
  { 156, -1, -1, sizeof(::apache::rocketmq::v2::EndTransactionRequest)},
  { 168, -1, -1, sizeof(::apache::rocketmq::v2::EndTransactionResponse)},
  { 175, -1, -1, sizeof(::apache::rocketmq::v2::PrintThreadStackTraceCommand)},
  { 182, 190, -1, sizeof(::apache::rocketmq::v2::ThreadStackTrace)},
  { 192, -1, -1, sizeof(::apache::rocketmq::v2::VerifyMessageCommand)},
  { 200, -1, -1, sizeof(::apache::rocketmq::v2::VerifyMessageResult)},
  { 207, -1, -1, sizeof(::apache::rocketmq::v2::RecoverOrphanedTransactionCommand)},
  { 215, -1, -1, sizeof(::apache::rocketmq::v2::Publishing)},
  { 224, 235, -1, sizeof(::apache::rocketmq::v2::Subscription)},
  { 240, 248, -1, sizeof(::apache::rocketmq::v2::Metric)},
  { 250, 265, -1, sizeof(::apache::rocketmq::v2::Settings)},
  { 273, 287, -1, sizeof(::apache::rocketmq::v2::TelemetryCommand)},
  { 294, 301, -1, sizeof(::apache::rocketmq::v2::NotifyClientTerminationRequest)},
  { 302, -1, -1, sizeof(::apache::rocketmq::v2::NotifyClientTerminationResponse)},
  { 309, -1, -1, sizeof(::apache::rocketmq::v2::ChangeInvisibleDurationRequest)},
  { 320, -1, -1, sizeof(::apache::rocketmq::v2::ChangeInvisibleDurationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apache::rocketmq::v2::_QueryRouteRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_QueryRouteResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_SendMessageRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_SendResultEntry_default_instance_._instance,
  &::apache::rocketmq::v2::_SendMessageResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_QueryAssignmentRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_QueryAssignmentResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_ReceiveMessageRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_ReceiveMessageResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_AckMessageEntry_default_instance_._instance,
  &::apache::rocketmq::v2::_AckMessageRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_AckMessageResultEntry_default_instance_._instance,
  &::apache::rocketmq::v2::_AckMessageResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_ForwardMessageToDeadLetterQueueRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_ForwardMessageToDeadLetterQueueResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_HeartbeatRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_HeartbeatResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_EndTransactionRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_EndTransactionResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_PrintThreadStackTraceCommand_default_instance_._instance,
  &::apache::rocketmq::v2::_ThreadStackTrace_default_instance_._instance,
  &::apache::rocketmq::v2::_VerifyMessageCommand_default_instance_._instance,
  &::apache::rocketmq::v2::_VerifyMessageResult_default_instance_._instance,
  &::apache::rocketmq::v2::_RecoverOrphanedTransactionCommand_default_instance_._instance,
  &::apache::rocketmq::v2::_Publishing_default_instance_._instance,
  &::apache::rocketmq::v2::_Subscription_default_instance_._instance,
  &::apache::rocketmq::v2::_Metric_default_instance_._instance,
  &::apache::rocketmq::v2::_Settings_default_instance_._instance,
  &::apache::rocketmq::v2::_TelemetryCommand_default_instance_._instance,
  &::apache::rocketmq::v2::_NotifyClientTerminationRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_NotifyClientTerminationResponse_default_instance_._instance,
  &::apache::rocketmq::v2::_ChangeInvisibleDurationRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_ChangeInvisibleDurationResponse_default_instance_._instance,
};

const char descriptor_table_protodef_apache_2frocketmq_2fv2_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n apache/rocketmq/v2/service.proto\022\022apac"
  "he.rocketmq.v2\032\036google/protobuf/duration"
  ".proto\032\037google/protobuf/timestamp.proto\032"
  "#apache/rocketmq/v2/definition.proto\"\204\001\n"
  "\021QueryRouteRequest\0222\n\005topic\030\001 \001(\0132\034.apac"
  "he.rocketmq.v2.ResourceR\005topic\022;\n\tendpoi"
  "nts\030\002 \001(\0132\035.apache.rocketmq.v2.Endpoints"
  "R\tendpoints\"\221\001\n\022QueryRouteResponse\0222\n\006st"
  "atus\030\001 \001(\0132\032.apache.rocketmq.v2.StatusR\006"
  "status\022G\n\016message_queues\030\002 \003(\0132 .apache."
  "rocketmq.v2.MessageQueueR\rmessageQueues\""
  "M\n\022SendMessageRequest\0227\n\010messages\030\001 \003(\0132"
  "\033.apache.rocketmq.v2.MessageR\010messages\"\243"
  "\001\n\017SendResultEntry\0222\n\006status\030\001 \001(\0132\032.apa"
  "che.rocketmq.v2.StatusR\006status\022\035\n\nmessag"
  "e_id\030\002 \001(\tR\tmessageId\022%\n\016transaction_id\030"
  "\003 \001(\tR\rtransactionId\022\026\n\006offset\030\004 \001(\003R\006of"
  "fset\"\210\001\n\023SendMessageResponse\0222\n\006status\030\001"
  " \001(\0132\032.apache.rocketmq.v2.StatusR\006status"
  "\022=\n\007entries\030\002 \003(\0132#.apache.rocketmq.v2.S"
  "endResultEntryR\007entries\"\275\001\n\026QueryAssignm"
  "entRequest\0222\n\005topic\030\001 \001(\0132\034.apache.rocke"
  "tmq.v2.ResourceR\005topic\0222\n\005group\030\002 \001(\0132\034."
  "apache.rocketmq.v2.ResourceR\005group\022;\n\ten"
  "dpoints\030\003 \001(\0132\035.apache.rocketmq.v2.Endpo"
  "intsR\tendpoints\"\217\001\n\027QueryAssignmentRespo"
  "nse\0222\n\006status\030\001 \001(\0132\032.apache.rocketmq.v2"
  ".StatusR\006status\022@\n\013assignments\030\002 \003(\0132\036.a"
  "pache.rocketmq.v2.AssignmentR\013assignment"
  "s\"\211\003\n\025ReceiveMessageRequest\0222\n\005group\030\001 \001"
  "(\0132\034.apache.rocketmq.v2.ResourceR\005group\022"
  "E\n\rmessage_queue\030\002 \001(\0132 .apache.rocketmq"
  ".v2.MessageQueueR\014messageQueue\022Q\n\021filter"
  "_expression\030\003 \001(\0132$.apache.rocketmq.v2.F"
  "ilterExpressionR\020filterExpression\022\035\n\nbat"
  "ch_size\030\004 \001(\005R\tbatchSize\022M\n\022invisible_du"
  "ration\030\005 \001(\0132\031.google.protobuf.DurationH"
  "\000R\021invisibleDuration\210\001\001\022\035\n\nauto_renew\030\006 "
  "\001(\010R\tautoRenewB\025\n\023_invisible_duration\"\337\001"
  "\n\026ReceiveMessageResponse\0224\n\006status\030\001 \001(\013"
  "2\032.apache.rocketmq.v2.StatusH\000R\006status\0227"
  "\n\007message\030\002 \001(\0132\033.apache.rocketmq.v2.Mes"
  "sageH\000R\007message\022K\n\022delivery_timestamp\030\003 "
  "\001(\0132\032.google.protobuf.TimestampH\000R\021deliv"
  "eryTimestampB\t\n\007content\"W\n\017AckMessageEnt"
  "ry\022\035\n\nmessage_id\030\001 \001(\tR\tmessageId\022%\n\016rec"
  "eipt_handle\030\002 \001(\tR\rreceiptHandle\"\272\001\n\021Ack"
  "MessageRequest\0222\n\005group\030\001 \001(\0132\034.apache.r"
  "ocketmq.v2.ResourceR\005group\0222\n\005topic\030\002 \001("
  "\0132\034.apache.rocketmq.v2.ResourceR\005topic\022="
  "\n\007entries\030\003 \003(\0132#.apache.rocketmq.v2.Ack"
  "MessageEntryR\007entries\"\221\001\n\025AckMessageResu"
  "ltEntry\022\035\n\nmessage_id\030\001 \001(\tR\tmessageId\022%"
  "\n\016receipt_handle\030\002 \001(\tR\rreceiptHandle\0222\n"
  "\006status\030\003 \001(\0132\032.apache.rocketmq.v2.Statu"
  "sR\006status\"\215\001\n\022AckMessageResponse\0222\n\006stat"
  "us\030\001 \001(\0132\032.apache.rocketmq.v2.StatusR\006st"
  "atus\022C\n\007entries\030\002 \003(\0132).apache.rocketmq."
  "v2.AckMessageResultEntryR\007entries\"\265\002\n&Fo"
  "rwardMessageToDeadLetterQueueRequest\0222\n\005"
  "group\030\001 \001(\0132\034.apache.rocketmq.v2.Resourc"
  "eR\005group\0222\n\005topic\030\002 \001(\0132\034.apache.rocketm"
  "q.v2.ResourceR\005topic\022%\n\016receipt_handle\030\003"
  " \001(\tR\rreceiptHandle\022\035\n\nmessage_id\030\004 \001(\tR"
  "\tmessageId\022)\n\020delivery_attempt\030\005 \001(\005R\017de"
  "liveryAttempt\0222\n\025max_delivery_attempts\030\006"
  " \001(\005R\023maxDeliveryAttempts\"]\n\'ForwardMess"
  "ageToDeadLetterQueueResponse\0222\n\006status\030\001"
  " \001(\0132\032.apache.rocketmq.v2.StatusR\006status"
  "\"\226\001\n\020HeartbeatRequest\0227\n\005group\030\001 \001(\0132\034.a"
  "pache.rocketmq.v2.ResourceH\000R\005group\210\001\001\022\?"
  "\n\013client_type\030\002 \001(\0162\036.apache.rocketmq.v2"
  ".ClientTypeR\nclientTypeB\010\n\006_group\"G\n\021Hea"
  "rtbeatResponse\0222\n\006status\030\001 \001(\0132\032.apache."
  "rocketmq.v2.StatusR\006status\"\300\002\n\025EndTransa"
  "ctionRequest\0222\n\005topic\030\001 \001(\0132\034.apache.roc"
  "ketmq.v2.ResourceR\005topic\022\035\n\nmessage_id\030\002"
  " \001(\tR\tmessageId\022%\n\016transaction_id\030\003 \001(\tR"
  "\rtransactionId\022I\n\nresolution\030\004 \001(\0162).apa"
  "che.rocketmq.v2.TransactionResolutionR\nr"
  "esolution\022=\n\006source\030\005 \001(\0162%.apache.rocke"
  "tmq.v2.TransactionSourceR\006source\022#\n\rtrac"
  "e_context\030\006 \001(\tR\014traceContext\"L\n\026EndTran"
  "sactionResponse\0222\n\006status\030\001 \001(\0132\032.apache"
  ".rocketmq.v2.StatusR\006status\"4\n\034PrintThre"
  "adStackTraceCommand\022\024\n\005nonce\030\001 \001(\tR\005nonc"
  "e\"r\n\020ThreadStackTrace\022\024\n\005nonce\030\001 \001(\tR\005no"
  "nce\0221\n\022thread_stack_trace\030\002 \001(\tH\000R\020threa"
  "dStackTrace\210\001\001B\025\n\023_thread_stack_trace\"c\n"
  "\024VerifyMessageCommand\022\024\n\005nonce\030\001 \001(\tR\005no"
  "nce\0225\n\007message\030\002 \001(\0132\033.apache.rocketmq.v"
  "2.MessageR\007message\"+\n\023VerifyMessageResul"
  "t\022\024\n\005nonce\030\001 \001(\tR\005nonce\"\201\001\n!RecoverOrpha"
  "nedTransactionCommand\0225\n\007message\030\001 \001(\0132\033"
  ".apache.rocketmq.v2.MessageR\007message\022%\n\016"
  "transaction_id\030\002 \001(\tR\rtransactionId\"\232\001\n\n"
  "Publishing\0224\n\006topics\030\001 \003(\0132\034.apache.rock"
  "etmq.v2.ResourceR\006topics\022\"\n\rmax_body_siz"
  "e\030\002 \001(\005R\013maxBodySize\0222\n\025validate_message"
  "_type\030\003 \001(\010R\023validateMessageType\"\365\002\n\014Sub"
  "scription\0227\n\005group\030\001 \001(\0132\034.apache.rocket"
  "mq.v2.ResourceH\000R\005group\210\001\001\022K\n\rsubscripti"
  "ons\030\002 \003(\0132%.apache.rocketmq.v2.Subscript"
  "ionEntryR\rsubscriptions\022\027\n\004fifo\030\003 \001(\010H\001R"
  "\004fifo\210\001\001\0221\n\022receive_batch_size\030\004 \001(\005H\002R\020"
  "receiveBatchSize\210\001\001\022P\n\024long_polling_time"
  "out\030\005 \001(\0132\031.google.protobuf.DurationH\003R\022"
  "longPollingTimeout\210\001\001B\010\n\006_groupB\007\n\005_fifo"
  "B\025\n\023_receive_batch_sizeB\027\n\025_long_polling"
  "_timeout\"h\n\006Metric\022\016\n\002on\030\001 \001(\010R\002on\022@\n\ten"
  "dpoints\030\002 \001(\0132\035.apache.rocketmq.v2.Endpo"
  "intsH\000R\tendpoints\210\001\001B\014\n\n_endpoints\"\365\004\n\010S"
  "ettings\022D\n\013client_type\030\001 \001(\0162\036.apache.ro"
  "cketmq.v2.ClientTypeH\001R\nclientType\210\001\001\022E\n"
  "\014access_point\030\002 \001(\0132\035.apache.rocketmq.v2"
  ".EndpointsH\002R\013accessPoint\210\001\001\022K\n\016backoff_"
  "policy\030\003 \001(\0132\037.apache.rocketmq.v2.RetryP"
  "olicyH\003R\rbackoffPolicy\210\001\001\022G\n\017request_tim"
  "eout\030\004 \001(\0132\031.google.protobuf.DurationH\004R"
  "\016requestTimeout\210\001\001\022@\n\npublishing\030\005 \001(\0132\036"
  ".apache.rocketmq.v2.PublishingH\000R\npublis"
  "hing\022F\n\014subscription\030\006 \001(\0132 .apache.rock"
  "etmq.v2.SubscriptionH\000R\014subscription\0225\n\n"
  "user_agent\030\007 \001(\0132\026.apache.rocketmq.v2.UA"
  "R\tuserAgent\0222\n\006metric\030\010 \001(\0132\032.apache.roc"
  "ketmq.v2.MetricR\006metricB\t\n\007pub_subB\016\n\014_c"
  "lient_typeB\017\n\r_access_pointB\021\n\017_backoff_"
  "policyB\022\n\020_request_timeout\"\273\005\n\020Telemetry"
  "Command\0227\n\006status\030\001 \001(\0132\032.apache.rocketm"
  "q.v2.StatusH\001R\006status\210\001\001\022:\n\010settings\030\002 \001"
  "(\0132\034.apache.rocketmq.v2.SettingsH\000R\010sett"
  "ings\022T\n\022thread_stack_trace\030\003 \001(\0132$.apach"
  "e.rocketmq.v2.ThreadStackTraceH\000R\020thread"
  "StackTrace\022]\n\025verify_message_result\030\004 \001("
  "\0132\'.apache.rocketmq.v2.VerifyMessageResu"
  "ltH\000R\023verifyMessageResult\022\210\001\n$recover_or"
  "phaned_transaction_command\030\005 \001(\01325.apach"
  "e.rocketmq.v2.RecoverOrphanedTransaction"
  "CommandH\000R!recoverOrphanedTransactionCom"
  "mand\022z\n print_thread_stack_trace_command"
  "\030\006 \001(\01320.apache.rocketmq.v2.PrintThreadS"
  "tackTraceCommandH\000R\034printThreadStackTrac"
  "eCommand\022`\n\026verify_message_command\030\007 \001(\013"
  "2(.apache.rocketmq.v2.VerifyMessageComma"
  "ndH\000R\024verifyMessageCommandB\t\n\007commandB\t\n"
  "\007_status\"c\n\036NotifyClientTerminationReque"
  "st\0227\n\005group\030\001 \001(\0132\034.apache.rocketmq.v2.R"
  "esourceH\000R\005group\210\001\001B\010\n\006_group\"U\n\037NotifyC"
  "lientTerminationResponse\0222\n\006status\030\001 \001(\013"
  "2\032.apache.rocketmq.v2.StatusR\006status\"\230\002\n"
  "\036ChangeInvisibleDurationRequest\0222\n\005group"
  "\030\001 \001(\0132\034.apache.rocketmq.v2.ResourceR\005gr"
  "oup\0222\n\005topic\030\002 \001(\0132\034.apache.rocketmq.v2."
  "ResourceR\005topic\022%\n\016receipt_handle\030\003 \001(\tR"
  "\rreceiptHandle\022H\n\022invisible_duration\030\004 \001"
  "(\0132\031.google.protobuf.DurationR\021invisible"
  "Duration\022\035\n\nmessage_id\030\005 \001(\tR\tmessageId\""
  "|\n\037ChangeInvisibleDurationResponse\0222\n\006st"
  "atus\030\001 \001(\0132\032.apache.rocketmq.v2.StatusR\006"
  "status\022%\n\016receipt_handle\030\002 \001(\tR\rreceiptH"
  "andle2\340\t\n\020MessagingService\022]\n\nQueryRoute"
  "\022%.apache.rocketmq.v2.QueryRouteRequest\032"
  "&.apache.rocketmq.v2.QueryRouteResponse\""
  "\000\022Z\n\tHeartbeat\022$.apache.rocketmq.v2.Hear"
  "tbeatRequest\032%.apache.rocketmq.v2.Heartb"
  "eatResponse\"\000\022`\n\013SendMessage\022&.apache.ro"
  "cketmq.v2.SendMessageRequest\032\'.apache.ro"
  "cketmq.v2.SendMessageResponse\"\000\022l\n\017Query"
  "Assignment\022*.apache.rocketmq.v2.QueryAss"
  "ignmentRequest\032+.apache.rocketmq.v2.Quer"
  "yAssignmentResponse\"\000\022k\n\016ReceiveMessage\022"
  ").apache.rocketmq.v2.ReceiveMessageReque"
  "st\032*.apache.rocketmq.v2.ReceiveMessageRe"
  "sponse\"\0000\001\022]\n\nAckMessage\022%.apache.rocket"
  "mq.v2.AckMessageRequest\032&.apache.rocketm"
  "q.v2.AckMessageResponse\"\000\022\234\001\n\037ForwardMes"
  "sageToDeadLetterQueue\022:.apache.rocketmq."
  "v2.ForwardMessageToDeadLetterQueueReques"
  "t\032;.apache.rocketmq.v2.ForwardMessageToD"
  "eadLetterQueueResponse\"\000\022i\n\016EndTransacti"
  "on\022).apache.rocketmq.v2.EndTransactionRe"
  "quest\032*.apache.rocketmq.v2.EndTransactio"
  "nResponse\"\000\022]\n\tTelemetry\022$.apache.rocket"
  "mq.v2.TelemetryCommand\032$.apache.rocketmq"
  ".v2.TelemetryCommand\"\000(\0010\001\022\204\001\n\027NotifyCli"
  "entTermination\0222.apache.rocketmq.v2.Noti"
  "fyClientTerminationRequest\0323.apache.rock"
  "etmq.v2.NotifyClientTerminationResponse\""
  "\000\022\204\001\n\027ChangeInvisibleDuration\0222.apache.r"
  "ocketmq.v2.ChangeInvisibleDurationReques"
  "t\0323.apache.rocketmq.v2.ChangeInvisibleDu"
  "rationResponse\"\000B<\n\022apache.rocketmq.v2B\t"
  "MQServiceP\001\240\001\001\330\001\001\252\002\022Apache.Rocketmq.V2b\006"
  "proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_deps[3] = {
  &::descriptor_table_apache_2frocketmq_2fv2_2fdefinition_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto = {
    false, false, 7726, descriptor_table_protodef_apache_2frocketmq_2fv2_2fservice_2eproto,
    "apache/rocketmq/v2/service.proto",
    &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once, descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_deps, 3, 33,
    schemas, file_default_instances, TableStruct_apache_2frocketmq_2fv2_2fservice_2eproto::offsets,
    file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto, file_level_enum_descriptors_apache_2frocketmq_2fv2_2fservice_2eproto,
    file_level_service_descriptors_apache_2frocketmq_2fv2_2fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter() {
  return &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_apache_2frocketmq_2fv2_2fservice_2eproto(&descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto);
namespace apache {
namespace rocketmq {
namespace v2 {

// ===================================================================

class QueryRouteRequest::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& topic(const QueryRouteRequest* msg);
  static const ::apache::rocketmq::v2::Endpoints& endpoints(const QueryRouteRequest* msg);
};

const ::apache::rocketmq::v2::Resource&
QueryRouteRequest::_Internal::topic(const QueryRouteRequest* msg) {
  return *msg->topic_;
}
const ::apache::rocketmq::v2::Endpoints&
QueryRouteRequest::_Internal::endpoints(const QueryRouteRequest* msg) {
  return *msg->endpoints_;
}
void QueryRouteRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
void QueryRouteRequest::clear_endpoints() {
  if (GetArenaForAllocation() == nullptr && endpoints_ != nullptr) {
    delete endpoints_;
  }
  endpoints_ = nullptr;
}
QueryRouteRequest::QueryRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.QueryRouteRequest)
}
QueryRouteRequest::QueryRouteRequest(const QueryRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_endpoints()) {
    endpoints_ = new ::apache::rocketmq::v2::Endpoints(*from.endpoints_);
  } else {
    endpoints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.QueryRouteRequest)
}

inline void QueryRouteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endpoints_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(endpoints_));
}

QueryRouteRequest::~QueryRouteRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.QueryRouteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryRouteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete endpoints_;
}

void QueryRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.QueryRouteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && endpoints_ != nullptr) {
    delete endpoints_;
  }
  endpoints_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRouteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Endpoints endpoints = 2 [json_name = "endpoints"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRouteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.QueryRouteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Endpoints endpoints = 2 [json_name = "endpoints"];
  if (this->_internal_has_endpoints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endpoints(this),
        _Internal::endpoints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.QueryRouteRequest)
  return target;
}

size_t QueryRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.QueryRouteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .apache.rocketmq.v2.Endpoints endpoints = 2 [json_name = "endpoints"];
  if (this->_internal_has_endpoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRouteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryRouteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRouteRequest::GetClassData() const { return &_class_data_; }

void QueryRouteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryRouteRequest *>(to)->MergeFrom(
      static_cast<const QueryRouteRequest &>(from));
}


void QueryRouteRequest::MergeFrom(const QueryRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.QueryRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_has_endpoints()) {
    _internal_mutable_endpoints()->::apache::rocketmq::v2::Endpoints::MergeFrom(from._internal_endpoints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRouteRequest::CopyFrom(const QueryRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.QueryRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRouteRequest::IsInitialized() const {
  return true;
}

void QueryRouteRequest::InternalSwap(QueryRouteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRouteRequest, endpoints_)
      + sizeof(QueryRouteRequest::endpoints_)
      - PROTOBUF_FIELD_OFFSET(QueryRouteRequest, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRouteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[0]);
}

// ===================================================================

class QueryRouteResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const QueryRouteResponse* msg);
};

const ::apache::rocketmq::v2::Status&
QueryRouteResponse::_Internal::status(const QueryRouteResponse* msg) {
  return *msg->status_;
}
void QueryRouteResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void QueryRouteResponse::clear_message_queues() {
  message_queues_.Clear();
}
QueryRouteResponse::QueryRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  message_queues_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.QueryRouteResponse)
}
QueryRouteResponse::QueryRouteResponse(const QueryRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_queues_(from.message_queues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.QueryRouteResponse)
}

inline void QueryRouteResponse::SharedCtor() {
status_ = nullptr;
}

QueryRouteResponse::~QueryRouteResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.QueryRouteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryRouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void QueryRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.QueryRouteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_queues_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRouteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.MessageQueue message_queues = 2 [json_name = "messageQueues"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_queues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryRouteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.QueryRouteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.MessageQueue message_queues = 2 [json_name = "messageQueues"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_message_queues_size()); i < n; i++) {
    const auto& repfield = this->_internal_message_queues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.QueryRouteResponse)
  return target;
}

size_t QueryRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.QueryRouteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.MessageQueue message_queues = 2 [json_name = "messageQueues"];
  total_size += 1UL * this->_internal_message_queues_size();
  for (const auto& msg : this->message_queues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRouteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryRouteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRouteResponse::GetClassData() const { return &_class_data_; }

void QueryRouteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryRouteResponse *>(to)->MergeFrom(
      static_cast<const QueryRouteResponse &>(from));
}


void QueryRouteResponse::MergeFrom(const QueryRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.QueryRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  message_queues_.MergeFrom(from.message_queues_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRouteResponse::CopyFrom(const QueryRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.QueryRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRouteResponse::IsInitialized() const {
  return true;
}

void QueryRouteResponse::InternalSwap(QueryRouteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  message_queues_.InternalSwap(&other->message_queues_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRouteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[1]);
}

// ===================================================================

class SendMessageRequest::_Internal {
 public:
};

void SendMessageRequest::clear_messages() {
  messages_.Clear();
}
SendMessageRequest::SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.SendMessageRequest)
}
SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.SendMessageRequest)
}

inline void SendMessageRequest::SharedCtor() {
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.SendMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.SendMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apache.rocketmq.v2.Message messages = 1 [json_name = "messages"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.SendMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.Message messages = 1 [json_name = "messages"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.SendMessageRequest)
  return target;
}

size_t SendMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.SendMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.Message messages = 1 [json_name = "messages"];
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageRequest::GetClassData() const { return &_class_data_; }

void SendMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendMessageRequest *>(to)->MergeFrom(
      static_cast<const SendMessageRequest &>(from));
}


void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  return true;
}

void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[2]);
}

// ===================================================================

class SendResultEntry::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const SendResultEntry* msg);
};

const ::apache::rocketmq::v2::Status&
SendResultEntry::_Internal::status(const SendResultEntry* msg) {
  return *msg->status_;
}
void SendResultEntry::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SendResultEntry::SendResultEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.SendResultEntry)
}
SendResultEntry::SendResultEntry(const SendResultEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  transaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.SendResultEntry)
}

inline void SendResultEntry::SharedCtor() {
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transaction_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&status_)) + sizeof(offset_));
}

SendResultEntry::~SendResultEntry() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.SendResultEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendResultEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.Destroy();
  transaction_id_.Destroy();
  if (this != internal_default_instance()) delete status_;
}

void SendResultEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendResultEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.SendResultEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  offset_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendResultEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_id = 2 [json_name = "messageId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SendResultEntry.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 3 [json_name = "transactionId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.SendResultEntry.transaction_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 4 [json_name = "offset"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendResultEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.SendResultEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string message_id = 2 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SendResultEntry.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // string transaction_id = 3 [json_name = "transactionId"];
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.SendResultEntry.transaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transaction_id(), target);
  }

  // int64 offset = 4 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.SendResultEntry)
  return target;
}

size_t SendResultEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.SendResultEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 2 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string transaction_id = 3 [json_name = "transactionId"];
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 offset = 4 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendResultEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendResultEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendResultEntry::GetClassData() const { return &_class_data_; }

void SendResultEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendResultEntry *>(to)->MergeFrom(
      static_cast<const SendResultEntry &>(from));
}


void SendResultEntry::MergeFrom(const SendResultEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.SendResultEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendResultEntry::CopyFrom(const SendResultEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.SendResultEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendResultEntry::IsInitialized() const {
  return true;
}

void SendResultEntry::InternalSwap(SendResultEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendResultEntry, offset_)
      + sizeof(SendResultEntry::offset_)
      - PROTOBUF_FIELD_OFFSET(SendResultEntry, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendResultEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[3]);
}

// ===================================================================

class SendMessageResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const SendMessageResponse* msg);
};

const ::apache::rocketmq::v2::Status&
SendMessageResponse::_Internal::status(const SendMessageResponse* msg) {
  return *msg->status_;
}
void SendMessageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
SendMessageResponse::SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.SendMessageResponse)
}
SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.SendMessageResponse)
}

inline void SendMessageResponse::SharedCtor() {
status_ = nullptr;
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.SendMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void SendMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.SendMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.SendResultEntry entries = 2 [json_name = "entries"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.SendMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.SendResultEntry entries = 2 [json_name = "entries"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.SendMessageResponse)
  return target;
}

size_t SendMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.SendMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.SendResultEntry entries = 2 [json_name = "entries"];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendMessageResponse::GetClassData() const { return &_class_data_; }

void SendMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendMessageResponse *>(to)->MergeFrom(
      static_cast<const SendMessageResponse &>(from));
}


void SendMessageResponse::MergeFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  return true;
}

void SendMessageResponse::InternalSwap(SendMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[4]);
}

// ===================================================================

class QueryAssignmentRequest::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& topic(const QueryAssignmentRequest* msg);
  static const ::apache::rocketmq::v2::Resource& group(const QueryAssignmentRequest* msg);
  static const ::apache::rocketmq::v2::Endpoints& endpoints(const QueryAssignmentRequest* msg);
};

const ::apache::rocketmq::v2::Resource&
QueryAssignmentRequest::_Internal::topic(const QueryAssignmentRequest* msg) {
  return *msg->topic_;
}
const ::apache::rocketmq::v2::Resource&
QueryAssignmentRequest::_Internal::group(const QueryAssignmentRequest* msg) {
  return *msg->group_;
}
const ::apache::rocketmq::v2::Endpoints&
QueryAssignmentRequest::_Internal::endpoints(const QueryAssignmentRequest* msg) {
  return *msg->endpoints_;
}
void QueryAssignmentRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
void QueryAssignmentRequest::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
void QueryAssignmentRequest::clear_endpoints() {
  if (GetArenaForAllocation() == nullptr && endpoints_ != nullptr) {
    delete endpoints_;
  }
  endpoints_ = nullptr;
}
QueryAssignmentRequest::QueryAssignmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.QueryAssignmentRequest)
}
QueryAssignmentRequest::QueryAssignmentRequest(const QueryAssignmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_endpoints()) {
    endpoints_ = new ::apache::rocketmq::v2::Endpoints(*from.endpoints_);
  } else {
    endpoints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.QueryAssignmentRequest)
}

inline void QueryAssignmentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endpoints_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(endpoints_));
}

QueryAssignmentRequest::~QueryAssignmentRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.QueryAssignmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAssignmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete endpoints_;
}

void QueryAssignmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.QueryAssignmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && endpoints_ != nullptr) {
    delete endpoints_;
  }
  endpoints_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAssignmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Resource group = 2 [json_name = "group"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Endpoints endpoints = 3 [json_name = "endpoints"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryAssignmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.QueryAssignmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Resource group = 2 [json_name = "group"];
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Endpoints endpoints = 3 [json_name = "endpoints"];
  if (this->_internal_has_endpoints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::endpoints(this),
        _Internal::endpoints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.QueryAssignmentRequest)
  return target;
}

size_t QueryAssignmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.QueryAssignmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .apache.rocketmq.v2.Resource group = 2 [json_name = "group"];
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .apache.rocketmq.v2.Endpoints endpoints = 3 [json_name = "endpoints"];
  if (this->_internal_has_endpoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoints_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAssignmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryAssignmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAssignmentRequest::GetClassData() const { return &_class_data_; }

void QueryAssignmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryAssignmentRequest *>(to)->MergeFrom(
      static_cast<const QueryAssignmentRequest &>(from));
}


void QueryAssignmentRequest::MergeFrom(const QueryAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.QueryAssignmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  if (from._internal_has_endpoints()) {
    _internal_mutable_endpoints()->::apache::rocketmq::v2::Endpoints::MergeFrom(from._internal_endpoints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAssignmentRequest::CopyFrom(const QueryAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.QueryAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAssignmentRequest::IsInitialized() const {
  return true;
}

void QueryAssignmentRequest::InternalSwap(QueryAssignmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryAssignmentRequest, endpoints_)
      + sizeof(QueryAssignmentRequest::endpoints_)
      - PROTOBUF_FIELD_OFFSET(QueryAssignmentRequest, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAssignmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[5]);
}

// ===================================================================

class QueryAssignmentResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const QueryAssignmentResponse* msg);
};

const ::apache::rocketmq::v2::Status&
QueryAssignmentResponse::_Internal::status(const QueryAssignmentResponse* msg) {
  return *msg->status_;
}
void QueryAssignmentResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void QueryAssignmentResponse::clear_assignments() {
  assignments_.Clear();
}
QueryAssignmentResponse::QueryAssignmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  assignments_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.QueryAssignmentResponse)
}
QueryAssignmentResponse::QueryAssignmentResponse(const QueryAssignmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assignments_(from.assignments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.QueryAssignmentResponse)
}

inline void QueryAssignmentResponse::SharedCtor() {
status_ = nullptr;
}

QueryAssignmentResponse::~QueryAssignmentResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.QueryAssignmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAssignmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void QueryAssignmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryAssignmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.QueryAssignmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignments_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAssignmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.Assignment assignments = 2 [json_name = "assignments"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryAssignmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.QueryAssignmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.Assignment assignments = 2 [json_name = "assignments"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_assignments_size()); i < n; i++) {
    const auto& repfield = this->_internal_assignments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.QueryAssignmentResponse)
  return target;
}

size_t QueryAssignmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.QueryAssignmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.Assignment assignments = 2 [json_name = "assignments"];
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto& msg : this->assignments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAssignmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryAssignmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAssignmentResponse::GetClassData() const { return &_class_data_; }

void QueryAssignmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryAssignmentResponse *>(to)->MergeFrom(
      static_cast<const QueryAssignmentResponse &>(from));
}


void QueryAssignmentResponse::MergeFrom(const QueryAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.QueryAssignmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  assignments_.MergeFrom(from.assignments_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAssignmentResponse::CopyFrom(const QueryAssignmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.QueryAssignmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAssignmentResponse::IsInitialized() const {
  return true;
}

void QueryAssignmentResponse::InternalSwap(QueryAssignmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  assignments_.InternalSwap(&other->assignments_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAssignmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[6]);
}

// ===================================================================

class ReceiveMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ReceiveMessageRequest>()._has_bits_);
  static const ::apache::rocketmq::v2::Resource& group(const ReceiveMessageRequest* msg);
  static const ::apache::rocketmq::v2::MessageQueue& message_queue(const ReceiveMessageRequest* msg);
  static const ::apache::rocketmq::v2::FilterExpression& filter_expression(const ReceiveMessageRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& invisible_duration(const ReceiveMessageRequest* msg);
  static void set_has_invisible_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apache::rocketmq::v2::Resource&
ReceiveMessageRequest::_Internal::group(const ReceiveMessageRequest* msg) {
  return *msg->group_;
}
const ::apache::rocketmq::v2::MessageQueue&
ReceiveMessageRequest::_Internal::message_queue(const ReceiveMessageRequest* msg) {
  return *msg->message_queue_;
}
const ::apache::rocketmq::v2::FilterExpression&
ReceiveMessageRequest::_Internal::filter_expression(const ReceiveMessageRequest* msg) {
  return *msg->filter_expression_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ReceiveMessageRequest::_Internal::invisible_duration(const ReceiveMessageRequest* msg) {
  return *msg->invisible_duration_;
}
void ReceiveMessageRequest::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
void ReceiveMessageRequest::clear_message_queue() {
  if (GetArenaForAllocation() == nullptr && message_queue_ != nullptr) {
    delete message_queue_;
  }
  message_queue_ = nullptr;
}
void ReceiveMessageRequest::clear_filter_expression() {
  if (GetArenaForAllocation() == nullptr && filter_expression_ != nullptr) {
    delete filter_expression_;
  }
  filter_expression_ = nullptr;
}
void ReceiveMessageRequest::clear_invisible_duration() {
  if (invisible_duration_ != nullptr) invisible_duration_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReceiveMessageRequest::ReceiveMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ReceiveMessageRequest)
}
ReceiveMessageRequest::ReceiveMessageRequest(const ReceiveMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_message_queue()) {
    message_queue_ = new ::apache::rocketmq::v2::MessageQueue(*from.message_queue_);
  } else {
    message_queue_ = nullptr;
  }
  if (from._internal_has_filter_expression()) {
    filter_expression_ = new ::apache::rocketmq::v2::FilterExpression(*from.filter_expression_);
  } else {
    filter_expression_ = nullptr;
  }
  if (from._internal_has_invisible_duration()) {
    invisible_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.invisible_duration_);
  } else {
    invisible_duration_ = nullptr;
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_renew_) -
    reinterpret_cast<char*>(&batch_size_)) + sizeof(auto_renew_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ReceiveMessageRequest)
}

inline void ReceiveMessageRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_renew_) -
    reinterpret_cast<char*>(&group_)) + sizeof(auto_renew_));
}

ReceiveMessageRequest::~ReceiveMessageRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ReceiveMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceiveMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete message_queue_;
  if (this != internal_default_instance()) delete filter_expression_;
  if (this != internal_default_instance()) delete invisible_duration_;
}

void ReceiveMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReceiveMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ReceiveMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_queue_ != nullptr) {
    delete message_queue_;
  }
  message_queue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && filter_expression_ != nullptr) {
    delete filter_expression_;
  }
  filter_expression_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(invisible_duration_ != nullptr);
    invisible_duration_->Clear();
  }
  ::memset(&batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_renew_) -
      reinterpret_cast<char*>(&batch_size_)) + sizeof(auto_renew_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.MessageQueue message_queue = 2 [json_name = "messageQueue"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_queue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.FilterExpression filter_expression = 3 [json_name = "filterExpression"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size = 4 [json_name = "batchSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration invisible_duration = 5 [json_name = "invisibleDuration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_invisible_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_renew = 6 [json_name = "autoRenew"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          auto_renew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceiveMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ReceiveMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.MessageQueue message_queue = 2 [json_name = "messageQueue"];
  if (this->_internal_has_message_queue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message_queue(this),
        _Internal::message_queue(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.FilterExpression filter_expression = 3 [json_name = "filterExpression"];
  if (this->_internal_has_filter_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filter_expression(this),
        _Internal::filter_expression(this).GetCachedSize(), target, stream);
  }

  // int32 batch_size = 4 [json_name = "batchSize"];
  if (this->_internal_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_batch_size(), target);
  }

  // optional .google.protobuf.Duration invisible_duration = 5 [json_name = "invisibleDuration"];
  if (_internal_has_invisible_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::invisible_duration(this),
        _Internal::invisible_duration(this).GetCachedSize(), target, stream);
  }

  // bool auto_renew = 6 [json_name = "autoRenew"];
  if (this->_internal_auto_renew() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_auto_renew(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ReceiveMessageRequest)
  return target;
}

size_t ReceiveMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ReceiveMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .apache.rocketmq.v2.MessageQueue message_queue = 2 [json_name = "messageQueue"];
  if (this->_internal_has_message_queue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_queue_);
  }

  // .apache.rocketmq.v2.FilterExpression filter_expression = 3 [json_name = "filterExpression"];
  if (this->_internal_has_filter_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_expression_);
  }

  // optional .google.protobuf.Duration invisible_duration = 5 [json_name = "invisibleDuration"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invisible_duration_);
  }

  // int32 batch_size = 4 [json_name = "batchSize"];
  if (this->_internal_batch_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size());
  }

  // bool auto_renew = 6 [json_name = "autoRenew"];
  if (this->_internal_auto_renew() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiveMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReceiveMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiveMessageRequest::GetClassData() const { return &_class_data_; }

void ReceiveMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReceiveMessageRequest *>(to)->MergeFrom(
      static_cast<const ReceiveMessageRequest &>(from));
}


void ReceiveMessageRequest::MergeFrom(const ReceiveMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ReceiveMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  if (from._internal_has_message_queue()) {
    _internal_mutable_message_queue()->::apache::rocketmq::v2::MessageQueue::MergeFrom(from._internal_message_queue());
  }
  if (from._internal_has_filter_expression()) {
    _internal_mutable_filter_expression()->::apache::rocketmq::v2::FilterExpression::MergeFrom(from._internal_filter_expression());
  }
  if (from._internal_has_invisible_duration()) {
    _internal_mutable_invisible_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_invisible_duration());
  }
  if (from._internal_batch_size() != 0) {
    _internal_set_batch_size(from._internal_batch_size());
  }
  if (from._internal_auto_renew() != 0) {
    _internal_set_auto_renew(from._internal_auto_renew());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiveMessageRequest::CopyFrom(const ReceiveMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ReceiveMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveMessageRequest::IsInitialized() const {
  return true;
}

void ReceiveMessageRequest::InternalSwap(ReceiveMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceiveMessageRequest, auto_renew_)
      + sizeof(ReceiveMessageRequest::auto_renew_)
      - PROTOBUF_FIELD_OFFSET(ReceiveMessageRequest, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[7]);
}

// ===================================================================

class ReceiveMessageResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const ReceiveMessageResponse* msg);
  static const ::apache::rocketmq::v2::Message& message(const ReceiveMessageResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& delivery_timestamp(const ReceiveMessageResponse* msg);
};

const ::apache::rocketmq::v2::Status&
ReceiveMessageResponse::_Internal::status(const ReceiveMessageResponse* msg) {
  return *msg->content_.status_;
}
const ::apache::rocketmq::v2::Message&
ReceiveMessageResponse::_Internal::message(const ReceiveMessageResponse* msg) {
  return *msg->content_.message_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ReceiveMessageResponse::_Internal::delivery_timestamp(const ReceiveMessageResponse* msg) {
  return *msg->content_.delivery_timestamp_;
}
void ReceiveMessageResponse::set_allocated_status(::apache::rocketmq::v2::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    content_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.ReceiveMessageResponse.status)
}
void ReceiveMessageResponse::clear_status() {
  if (_internal_has_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete content_.status_;
    }
    clear_has_content();
  }
}
void ReceiveMessageResponse::set_allocated_message(::apache::rocketmq::v2::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    content_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.ReceiveMessageResponse.message)
}
void ReceiveMessageResponse::clear_message() {
  if (_internal_has_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete content_.message_;
    }
    clear_has_content();
  }
}
void ReceiveMessageResponse::set_allocated_delivery_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* delivery_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (delivery_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delivery_timestamp));
    if (message_arena != submessage_arena) {
      delivery_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delivery_timestamp, submessage_arena);
    }
    set_has_delivery_timestamp();
    content_.delivery_timestamp_ = delivery_timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.ReceiveMessageResponse.delivery_timestamp)
}
void ReceiveMessageResponse::clear_delivery_timestamp() {
  if (_internal_has_delivery_timestamp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete content_.delivery_timestamp_;
    }
    clear_has_content();
  }
}
ReceiveMessageResponse::ReceiveMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ReceiveMessageResponse)
}
ReceiveMessageResponse::ReceiveMessageResponse(const ReceiveMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kStatus: {
      _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::apache::rocketmq::v2::Message::MergeFrom(from._internal_message());
      break;
    }
    case kDeliveryTimestamp: {
      _internal_mutable_delivery_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_delivery_timestamp());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ReceiveMessageResponse)
}

inline void ReceiveMessageResponse::SharedCtor() {
clear_has_content();
}

ReceiveMessageResponse::~ReceiveMessageResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ReceiveMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReceiveMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void ReceiveMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReceiveMessageResponse::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:apache.rocketmq.v2.ReceiveMessageResponse)
  switch (content_case()) {
    case kStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.status_;
      }
      break;
    }
    case kMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.message_;
      }
      break;
    }
    case kDeliveryTimestamp: {
      if (GetArenaForAllocation() == nullptr) {
        delete content_.delivery_timestamp_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void ReceiveMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ReceiveMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceiveMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Message message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp delivery_timestamp = 3 [json_name = "deliveryTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delivery_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReceiveMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ReceiveMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Message message = 2 [json_name = "message"];
  if (_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp delivery_timestamp = 3 [json_name = "deliveryTimestamp"];
  if (_internal_has_delivery_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::delivery_timestamp(this),
        _Internal::delivery_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ReceiveMessageResponse)
  return target;
}

size_t ReceiveMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ReceiveMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.status_);
      break;
    }
    // .apache.rocketmq.v2.Message message = 2 [json_name = "message"];
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.message_);
      break;
    }
    // .google.protobuf.Timestamp delivery_timestamp = 3 [json_name = "deliveryTimestamp"];
    case kDeliveryTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_.delivery_timestamp_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReceiveMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReceiveMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReceiveMessageResponse::GetClassData() const { return &_class_data_; }

void ReceiveMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReceiveMessageResponse *>(to)->MergeFrom(
      static_cast<const ReceiveMessageResponse &>(from));
}


void ReceiveMessageResponse::MergeFrom(const ReceiveMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ReceiveMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kStatus: {
      _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::apache::rocketmq::v2::Message::MergeFrom(from._internal_message());
      break;
    }
    case kDeliveryTimestamp: {
      _internal_mutable_delivery_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_delivery_timestamp());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReceiveMessageResponse::CopyFrom(const ReceiveMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ReceiveMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveMessageResponse::IsInitialized() const {
  return true;
}

void ReceiveMessageResponse::InternalSwap(ReceiveMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[8]);
}

// ===================================================================

class AckMessageEntry::_Internal {
 public:
};

AckMessageEntry::AckMessageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.AckMessageEntry)
}
AckMessageEntry::AckMessageEntry(const AckMessageEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  receipt_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receipt_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receipt_handle().empty()) {
    receipt_handle_.Set(from._internal_receipt_handle(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.AckMessageEntry)
}

inline void AckMessageEntry::SharedCtor() {
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receipt_handle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receipt_handle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AckMessageEntry::~AckMessageEntry() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.AckMessageEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AckMessageEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.Destroy();
  receipt_handle_.Destroy();
}

void AckMessageEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckMessageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.AckMessageEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  receipt_handle_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckMessageEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1 [json_name = "messageId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.AckMessageEntry.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string receipt_handle = 2 [json_name = "receiptHandle"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receipt_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.AckMessageEntry.receipt_handle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AckMessageEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.AckMessageEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.AckMessageEntry.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string receipt_handle = 2 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_handle().data(), static_cast<int>(this->_internal_receipt_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.AckMessageEntry.receipt_handle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receipt_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.AckMessageEntry)
  return target;
}

size_t AckMessageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.AckMessageEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string receipt_handle = 2 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AckMessageEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AckMessageEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AckMessageEntry::GetClassData() const { return &_class_data_; }

void AckMessageEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AckMessageEntry *>(to)->MergeFrom(
      static_cast<const AckMessageEntry &>(from));
}


void AckMessageEntry::MergeFrom(const AckMessageEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.AckMessageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_receipt_handle().empty()) {
    _internal_set_receipt_handle(from._internal_receipt_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AckMessageEntry::CopyFrom(const AckMessageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.AckMessageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessageEntry::IsInitialized() const {
  return true;
}

void AckMessageEntry::InternalSwap(AckMessageEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receipt_handle_, lhs_arena,
      &other->receipt_handle_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMessageEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[9]);
}

// ===================================================================

class AckMessageRequest::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& group(const AckMessageRequest* msg);
  static const ::apache::rocketmq::v2::Resource& topic(const AckMessageRequest* msg);
};

const ::apache::rocketmq::v2::Resource&
AckMessageRequest::_Internal::group(const AckMessageRequest* msg) {
  return *msg->group_;
}
const ::apache::rocketmq::v2::Resource&
AckMessageRequest::_Internal::topic(const AckMessageRequest* msg) {
  return *msg->topic_;
}
void AckMessageRequest::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
void AckMessageRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
AckMessageRequest::AckMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.AckMessageRequest)
}
AckMessageRequest::AckMessageRequest(const AckMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.AckMessageRequest)
}

inline void AckMessageRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&topic_) -
    reinterpret_cast<char*>(&group_)) + sizeof(topic_));
}

AckMessageRequest::~AckMessageRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.AckMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AckMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete topic_;
}

void AckMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.AckMessageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.AckMessageEntry entries = 3 [json_name = "entries"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AckMessageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.AckMessageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.AckMessageEntry entries = 3 [json_name = "entries"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.AckMessageRequest)
  return target;
}

size_t AckMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.AckMessageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.AckMessageEntry entries = 3 [json_name = "entries"];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AckMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AckMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AckMessageRequest::GetClassData() const { return &_class_data_; }

void AckMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AckMessageRequest *>(to)->MergeFrom(
      static_cast<const AckMessageRequest &>(from));
}


void AckMessageRequest::MergeFrom(const AckMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.AckMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AckMessageRequest::CopyFrom(const AckMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.AckMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessageRequest::IsInitialized() const {
  return true;
}

void AckMessageRequest::InternalSwap(AckMessageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckMessageRequest, topic_)
      + sizeof(AckMessageRequest::topic_)
      - PROTOBUF_FIELD_OFFSET(AckMessageRequest, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[10]);
}

// ===================================================================

class AckMessageResultEntry::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const AckMessageResultEntry* msg);
};

const ::apache::rocketmq::v2::Status&
AckMessageResultEntry::_Internal::status(const AckMessageResultEntry* msg) {
  return *msg->status_;
}
void AckMessageResultEntry::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
AckMessageResultEntry::AckMessageResultEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.AckMessageResultEntry)
}
AckMessageResultEntry::AckMessageResultEntry(const AckMessageResultEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  receipt_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receipt_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receipt_handle().empty()) {
    receipt_handle_.Set(from._internal_receipt_handle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.AckMessageResultEntry)
}

inline void AckMessageResultEntry::SharedCtor() {
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receipt_handle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receipt_handle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

AckMessageResultEntry::~AckMessageResultEntry() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.AckMessageResultEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AckMessageResultEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.Destroy();
  receipt_handle_.Destroy();
  if (this != internal_default_instance()) delete status_;
}

void AckMessageResultEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckMessageResultEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.AckMessageResultEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  receipt_handle_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckMessageResultEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_id = 1 [json_name = "messageId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.AckMessageResultEntry.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string receipt_handle = 2 [json_name = "receiptHandle"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receipt_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.AckMessageResultEntry.receipt_handle"));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Status status = 3 [json_name = "status"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AckMessageResultEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.AckMessageResultEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.AckMessageResultEntry.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string receipt_handle = 2 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_handle().data(), static_cast<int>(this->_internal_receipt_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.AckMessageResultEntry.receipt_handle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receipt_handle(), target);
  }

  // .apache.rocketmq.v2.Status status = 3 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.AckMessageResultEntry)
  return target;
}

size_t AckMessageResultEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.AckMessageResultEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string receipt_handle = 2 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt_handle());
  }

  // .apache.rocketmq.v2.Status status = 3 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AckMessageResultEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AckMessageResultEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AckMessageResultEntry::GetClassData() const { return &_class_data_; }

void AckMessageResultEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AckMessageResultEntry *>(to)->MergeFrom(
      static_cast<const AckMessageResultEntry &>(from));
}


void AckMessageResultEntry::MergeFrom(const AckMessageResultEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.AckMessageResultEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_receipt_handle().empty()) {
    _internal_set_receipt_handle(from._internal_receipt_handle());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AckMessageResultEntry::CopyFrom(const AckMessageResultEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.AckMessageResultEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessageResultEntry::IsInitialized() const {
  return true;
}

void AckMessageResultEntry::InternalSwap(AckMessageResultEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receipt_handle_, lhs_arena,
      &other->receipt_handle_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMessageResultEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[11]);
}

// ===================================================================

class AckMessageResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const AckMessageResponse* msg);
};

const ::apache::rocketmq::v2::Status&
AckMessageResponse::_Internal::status(const AckMessageResponse* msg) {
  return *msg->status_;
}
void AckMessageResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
AckMessageResponse::AckMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.AckMessageResponse)
}
AckMessageResponse::AckMessageResponse(const AckMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.AckMessageResponse)
}

inline void AckMessageResponse::SharedCtor() {
status_ = nullptr;
}

AckMessageResponse::~AckMessageResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.AckMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AckMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void AckMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.AckMessageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.AckMessageResultEntry entries = 2 [json_name = "entries"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AckMessageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.AckMessageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.AckMessageResultEntry entries = 2 [json_name = "entries"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.AckMessageResponse)
  return target;
}

size_t AckMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.AckMessageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.AckMessageResultEntry entries = 2 [json_name = "entries"];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AckMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AckMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AckMessageResponse::GetClassData() const { return &_class_data_; }

void AckMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AckMessageResponse *>(to)->MergeFrom(
      static_cast<const AckMessageResponse &>(from));
}


void AckMessageResponse::MergeFrom(const AckMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.AckMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AckMessageResponse::CopyFrom(const AckMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.AckMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessageResponse::IsInitialized() const {
  return true;
}

void AckMessageResponse::InternalSwap(AckMessageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[12]);
}

// ===================================================================

class ForwardMessageToDeadLetterQueueRequest::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& group(const ForwardMessageToDeadLetterQueueRequest* msg);
  static const ::apache::rocketmq::v2::Resource& topic(const ForwardMessageToDeadLetterQueueRequest* msg);
};

const ::apache::rocketmq::v2::Resource&
ForwardMessageToDeadLetterQueueRequest::_Internal::group(const ForwardMessageToDeadLetterQueueRequest* msg) {
  return *msg->group_;
}
const ::apache::rocketmq::v2::Resource&
ForwardMessageToDeadLetterQueueRequest::_Internal::topic(const ForwardMessageToDeadLetterQueueRequest* msg) {
  return *msg->topic_;
}
void ForwardMessageToDeadLetterQueueRequest::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
void ForwardMessageToDeadLetterQueueRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
ForwardMessageToDeadLetterQueueRequest::ForwardMessageToDeadLetterQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
}
ForwardMessageToDeadLetterQueueRequest::ForwardMessageToDeadLetterQueueRequest(const ForwardMessageToDeadLetterQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receipt_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receipt_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receipt_handle().empty()) {
    receipt_handle_.Set(from._internal_receipt_handle(), 
      GetArenaForAllocation());
  }
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  ::memcpy(&delivery_attempt_, &from.delivery_attempt_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_delivery_attempts_) -
    reinterpret_cast<char*>(&delivery_attempt_)) + sizeof(max_delivery_attempts_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
}

inline void ForwardMessageToDeadLetterQueueRequest::SharedCtor() {
receipt_handle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receipt_handle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_delivery_attempts_) -
    reinterpret_cast<char*>(&group_)) + sizeof(max_delivery_attempts_));
}

ForwardMessageToDeadLetterQueueRequest::~ForwardMessageToDeadLetterQueueRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardMessageToDeadLetterQueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  receipt_handle_.Destroy();
  message_id_.Destroy();
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete topic_;
}

void ForwardMessageToDeadLetterQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardMessageToDeadLetterQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receipt_handle_.ClearToEmpty();
  message_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  ::memset(&delivery_attempt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_delivery_attempts_) -
      reinterpret_cast<char*>(&delivery_attempt_)) + sizeof(max_delivery_attempts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardMessageToDeadLetterQueueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receipt_handle = 3 [json_name = "receiptHandle"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receipt_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest.receipt_handle"));
        } else
          goto handle_unusual;
        continue;
      // string message_id = 4 [json_name = "messageId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 delivery_attempt = 5 [json_name = "deliveryAttempt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          delivery_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_delivery_attempts = 6 [json_name = "maxDeliveryAttempts"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          max_delivery_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardMessageToDeadLetterQueueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // string receipt_handle = 3 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_handle().data(), static_cast<int>(this->_internal_receipt_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest.receipt_handle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receipt_handle(), target);
  }

  // string message_id = 4 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_id(), target);
  }

  // int32 delivery_attempt = 5 [json_name = "deliveryAttempt"];
  if (this->_internal_delivery_attempt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_delivery_attempt(), target);
  }

  // int32 max_delivery_attempts = 6 [json_name = "maxDeliveryAttempts"];
  if (this->_internal_max_delivery_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_delivery_attempts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  return target;
}

size_t ForwardMessageToDeadLetterQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receipt_handle = 3 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt_handle());
  }

  // string message_id = 4 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // int32 delivery_attempt = 5 [json_name = "deliveryAttempt"];
  if (this->_internal_delivery_attempt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delivery_attempt());
  }

  // int32 max_delivery_attempts = 6 [json_name = "maxDeliveryAttempts"];
  if (this->_internal_max_delivery_attempts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_delivery_attempts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardMessageToDeadLetterQueueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardMessageToDeadLetterQueueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardMessageToDeadLetterQueueRequest::GetClassData() const { return &_class_data_; }

void ForwardMessageToDeadLetterQueueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForwardMessageToDeadLetterQueueRequest *>(to)->MergeFrom(
      static_cast<const ForwardMessageToDeadLetterQueueRequest &>(from));
}


void ForwardMessageToDeadLetterQueueRequest::MergeFrom(const ForwardMessageToDeadLetterQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_receipt_handle().empty()) {
    _internal_set_receipt_handle(from._internal_receipt_handle());
  }
  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_delivery_attempt() != 0) {
    _internal_set_delivery_attempt(from._internal_delivery_attempt());
  }
  if (from._internal_max_delivery_attempts() != 0) {
    _internal_set_max_delivery_attempts(from._internal_max_delivery_attempts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardMessageToDeadLetterQueueRequest::CopyFrom(const ForwardMessageToDeadLetterQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMessageToDeadLetterQueueRequest::IsInitialized() const {
  return true;
}

void ForwardMessageToDeadLetterQueueRequest::InternalSwap(ForwardMessageToDeadLetterQueueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receipt_handle_, lhs_arena,
      &other->receipt_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForwardMessageToDeadLetterQueueRequest, max_delivery_attempts_)
      + sizeof(ForwardMessageToDeadLetterQueueRequest::max_delivery_attempts_)
      - PROTOBUF_FIELD_OFFSET(ForwardMessageToDeadLetterQueueRequest, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardMessageToDeadLetterQueueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[13]);
}

// ===================================================================

class ForwardMessageToDeadLetterQueueResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const ForwardMessageToDeadLetterQueueResponse* msg);
};

const ::apache::rocketmq::v2::Status&
ForwardMessageToDeadLetterQueueResponse::_Internal::status(const ForwardMessageToDeadLetterQueueResponse* msg) {
  return *msg->status_;
}
void ForwardMessageToDeadLetterQueueResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ForwardMessageToDeadLetterQueueResponse::ForwardMessageToDeadLetterQueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
}
ForwardMessageToDeadLetterQueueResponse::ForwardMessageToDeadLetterQueueResponse(const ForwardMessageToDeadLetterQueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
}

inline void ForwardMessageToDeadLetterQueueResponse::SharedCtor() {
status_ = nullptr;
}

ForwardMessageToDeadLetterQueueResponse::~ForwardMessageToDeadLetterQueueResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardMessageToDeadLetterQueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ForwardMessageToDeadLetterQueueResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ForwardMessageToDeadLetterQueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardMessageToDeadLetterQueueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForwardMessageToDeadLetterQueueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  return target;
}

size_t ForwardMessageToDeadLetterQueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardMessageToDeadLetterQueueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ForwardMessageToDeadLetterQueueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardMessageToDeadLetterQueueResponse::GetClassData() const { return &_class_data_; }

void ForwardMessageToDeadLetterQueueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ForwardMessageToDeadLetterQueueResponse *>(to)->MergeFrom(
      static_cast<const ForwardMessageToDeadLetterQueueResponse &>(from));
}


void ForwardMessageToDeadLetterQueueResponse::MergeFrom(const ForwardMessageToDeadLetterQueueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardMessageToDeadLetterQueueResponse::CopyFrom(const ForwardMessageToDeadLetterQueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ForwardMessageToDeadLetterQueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMessageToDeadLetterQueueResponse::IsInitialized() const {
  return true;
}

void ForwardMessageToDeadLetterQueueResponse::InternalSwap(ForwardMessageToDeadLetterQueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardMessageToDeadLetterQueueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[14]);
}

// ===================================================================

class HeartbeatRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartbeatRequest>()._has_bits_);
  static const ::apache::rocketmq::v2::Resource& group(const HeartbeatRequest* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apache::rocketmq::v2::Resource&
HeartbeatRequest::_Internal::group(const HeartbeatRequest* msg) {
  return *msg->group_;
}
void HeartbeatRequest::clear_group() {
  if (group_ != nullptr) group_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  client_type_ = from.client_type_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.HeartbeatRequest)
}

inline void HeartbeatRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&group_)) + sizeof(client_type_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.HeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_;
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(group_ != nullptr);
    group_->Clear();
  }
  client_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.ClientType client_type = 2 [json_name = "clientType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::apache::rocketmq::v2::ClientType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.ClientType client_type = 2 [json_name = "clientType"];
  if (this->_internal_client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.HeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .apache.rocketmq.v2.ClientType client_type = 2 [json_name = "clientType"];
  if (this->_internal_client_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }

void HeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeartbeatRequest *>(to)->MergeFrom(
      static_cast<const HeartbeatRequest &>(from));
}


void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  if (from._internal_client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatRequest, client_type_)
      + sizeof(HeartbeatRequest::client_type_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatRequest, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[15]);
}

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const HeartbeatResponse* msg);
};

const ::apache::rocketmq::v2::Status&
HeartbeatResponse::_Internal::status(const HeartbeatResponse* msg) {
  return *msg->status_;
}
void HeartbeatResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor() {
status_ = nullptr;
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }

void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeartbeatResponse *>(to)->MergeFrom(
      static_cast<const HeartbeatResponse &>(from));
}


void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[16]);
}

// ===================================================================

class EndTransactionRequest::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& topic(const EndTransactionRequest* msg);
};

const ::apache::rocketmq::v2::Resource&
EndTransactionRequest::_Internal::topic(const EndTransactionRequest* msg) {
  return *msg->topic_;
}
void EndTransactionRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
EndTransactionRequest::EndTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.EndTransactionRequest)
}
EndTransactionRequest::EndTransactionRequest(const EndTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  transaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  trace_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trace_context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trace_context().empty()) {
    trace_context_.Set(from._internal_trace_context(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.EndTransactionRequest)
}

inline void EndTransactionRequest::SharedCtor() {
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transaction_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
trace_context_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trace_context_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&topic_)) + sizeof(source_));
}

EndTransactionRequest::~EndTransactionRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.EndTransactionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_id_.Destroy();
  transaction_id_.Destroy();
  trace_context_.Destroy();
  if (this != internal_default_instance()) delete topic_;
}

void EndTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.EndTransactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  trace_context_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndTransactionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_id = 2 [json_name = "messageId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.EndTransactionRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 3 [json_name = "transactionId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.EndTransactionRequest.transaction_id"));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.TransactionResolution resolution = 4 [json_name = "resolution"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resolution(static_cast<::apache::rocketmq::v2::TransactionResolution>(val));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.TransactionSource source = 5 [json_name = "source"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::apache::rocketmq::v2::TransactionSource>(val));
        } else
          goto handle_unusual;
        continue;
      // string trace_context = 6 [json_name = "traceContext"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_trace_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.EndTransactionRequest.trace_context"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndTransactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.EndTransactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // string message_id = 2 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.EndTransactionRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // string transaction_id = 3 [json_name = "transactionId"];
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.EndTransactionRequest.transaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transaction_id(), target);
  }

  // .apache.rocketmq.v2.TransactionResolution resolution = 4 [json_name = "resolution"];
  if (this->_internal_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_resolution(), target);
  }

  // .apache.rocketmq.v2.TransactionSource source = 5 [json_name = "source"];
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_source(), target);
  }

  // string trace_context = 6 [json_name = "traceContext"];
  if (!this->_internal_trace_context().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_context().data(), static_cast<int>(this->_internal_trace_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.EndTransactionRequest.trace_context");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_trace_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.EndTransactionRequest)
  return target;
}

size_t EndTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.EndTransactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 2 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string transaction_id = 3 [json_name = "transactionId"];
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // string trace_context = 6 [json_name = "traceContext"];
  if (!this->_internal_trace_context().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_context());
  }

  // .apache.rocketmq.v2.Resource topic = 1 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .apache.rocketmq.v2.TransactionResolution resolution = 4 [json_name = "resolution"];
  if (this->_internal_resolution() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resolution());
  }

  // .apache.rocketmq.v2.TransactionSource source = 5 [json_name = "source"];
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndTransactionRequest::GetClassData() const { return &_class_data_; }

void EndTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndTransactionRequest *>(to)->MergeFrom(
      static_cast<const EndTransactionRequest &>(from));
}


void EndTransactionRequest::MergeFrom(const EndTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.EndTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (!from._internal_trace_context().empty()) {
    _internal_set_trace_context(from._internal_trace_context());
  }
  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_resolution() != 0) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (from._internal_source() != 0) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndTransactionRequest::CopyFrom(const EndTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.EndTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTransactionRequest::IsInitialized() const {
  return true;
}

void EndTransactionRequest::InternalSwap(EndTransactionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trace_context_, lhs_arena,
      &other->trace_context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndTransactionRequest, source_)
      + sizeof(EndTransactionRequest::source_)
      - PROTOBUF_FIELD_OFFSET(EndTransactionRequest, topic_)>(
          reinterpret_cast<char*>(&topic_),
          reinterpret_cast<char*>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndTransactionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[17]);
}

// ===================================================================

class EndTransactionResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const EndTransactionResponse* msg);
};

const ::apache::rocketmq::v2::Status&
EndTransactionResponse::_Internal::status(const EndTransactionResponse* msg) {
  return *msg->status_;
}
void EndTransactionResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
EndTransactionResponse::EndTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.EndTransactionResponse)
}
EndTransactionResponse::EndTransactionResponse(const EndTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.EndTransactionResponse)
}

inline void EndTransactionResponse::SharedCtor() {
status_ = nullptr;
}

EndTransactionResponse::~EndTransactionResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.EndTransactionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void EndTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.EndTransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndTransactionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EndTransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.EndTransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.EndTransactionResponse)
  return target;
}

size_t EndTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.EndTransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EndTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndTransactionResponse::GetClassData() const { return &_class_data_; }

void EndTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EndTransactionResponse *>(to)->MergeFrom(
      static_cast<const EndTransactionResponse &>(from));
}


void EndTransactionResponse::MergeFrom(const EndTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.EndTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndTransactionResponse::CopyFrom(const EndTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.EndTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTransactionResponse::IsInitialized() const {
  return true;
}

void EndTransactionResponse::InternalSwap(EndTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndTransactionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[18]);
}

// ===================================================================

class PrintThreadStackTraceCommand::_Internal {
 public:
};

PrintThreadStackTraceCommand::PrintThreadStackTraceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.PrintThreadStackTraceCommand)
}
PrintThreadStackTraceCommand::PrintThreadStackTraceCommand(const PrintThreadStackTraceCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    nonce_.Set(from._internal_nonce(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.PrintThreadStackTraceCommand)
}

inline void PrintThreadStackTraceCommand::SharedCtor() {
nonce_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrintThreadStackTraceCommand::~PrintThreadStackTraceCommand() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrintThreadStackTraceCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_.Destroy();
}

void PrintThreadStackTraceCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrintThreadStackTraceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrintThreadStackTraceCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.PrintThreadStackTraceCommand.nonce"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrintThreadStackTraceCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.PrintThreadStackTraceCommand.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  return target;
}

size_t PrintThreadStackTraceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrintThreadStackTraceCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrintThreadStackTraceCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrintThreadStackTraceCommand::GetClassData() const { return &_class_data_; }

void PrintThreadStackTraceCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrintThreadStackTraceCommand *>(to)->MergeFrom(
      static_cast<const PrintThreadStackTraceCommand &>(from));
}


void PrintThreadStackTraceCommand::MergeFrom(const PrintThreadStackTraceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrintThreadStackTraceCommand::CopyFrom(const PrintThreadStackTraceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.PrintThreadStackTraceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintThreadStackTraceCommand::IsInitialized() const {
  return true;
}

void PrintThreadStackTraceCommand::InternalSwap(PrintThreadStackTraceCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nonce_, lhs_arena,
      &other->nonce_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PrintThreadStackTraceCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[19]);
}

// ===================================================================

class ThreadStackTrace::_Internal {
 public:
  using HasBits = decltype(std::declval<ThreadStackTrace>()._has_bits_);
  static void set_has_thread_stack_trace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThreadStackTrace::ThreadStackTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ThreadStackTrace)
}
ThreadStackTrace::ThreadStackTrace(const ThreadStackTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    nonce_.Set(from._internal_nonce(), 
      GetArenaForAllocation());
  }
  thread_stack_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thread_stack_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_thread_stack_trace()) {
    thread_stack_trace_.Set(from._internal_thread_stack_trace(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ThreadStackTrace)
}

inline void ThreadStackTrace::SharedCtor() {
nonce_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thread_stack_trace_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thread_stack_trace_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThreadStackTrace::~ThreadStackTrace() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ThreadStackTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThreadStackTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_.Destroy();
  thread_stack_trace_.Destroy();
}

void ThreadStackTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThreadStackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ThreadStackTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thread_stack_trace_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadStackTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ThreadStackTrace.nonce"));
        } else
          goto handle_unusual;
        continue;
      // optional string thread_stack_trace = 2 [json_name = "threadStackTrace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_thread_stack_trace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ThreadStackTrace.thread_stack_trace"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreadStackTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ThreadStackTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ThreadStackTrace.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // optional string thread_stack_trace = 2 [json_name = "threadStackTrace"];
  if (_internal_has_thread_stack_trace()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thread_stack_trace().data(), static_cast<int>(this->_internal_thread_stack_trace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ThreadStackTrace.thread_stack_trace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_thread_stack_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ThreadStackTrace)
  return target;
}

size_t ThreadStackTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ThreadStackTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // optional string thread_stack_trace = 2 [json_name = "threadStackTrace"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thread_stack_trace());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreadStackTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThreadStackTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreadStackTrace::GetClassData() const { return &_class_data_; }

void ThreadStackTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThreadStackTrace *>(to)->MergeFrom(
      static_cast<const ThreadStackTrace &>(from));
}


void ThreadStackTrace::MergeFrom(const ThreadStackTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ThreadStackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_has_thread_stack_trace()) {
    _internal_set_thread_stack_trace(from._internal_thread_stack_trace());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadStackTrace::CopyFrom(const ThreadStackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ThreadStackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadStackTrace::IsInitialized() const {
  return true;
}

void ThreadStackTrace::InternalSwap(ThreadStackTrace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nonce_, lhs_arena,
      &other->nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &thread_stack_trace_, lhs_arena,
      &other->thread_stack_trace_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadStackTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[20]);
}

// ===================================================================

class VerifyMessageCommand::_Internal {
 public:
  static const ::apache::rocketmq::v2::Message& message(const VerifyMessageCommand* msg);
};

const ::apache::rocketmq::v2::Message&
VerifyMessageCommand::_Internal::message(const VerifyMessageCommand* msg) {
  return *msg->message_;
}
void VerifyMessageCommand::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
VerifyMessageCommand::VerifyMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.VerifyMessageCommand)
}
VerifyMessageCommand::VerifyMessageCommand(const VerifyMessageCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    nonce_.Set(from._internal_nonce(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::apache::rocketmq::v2::Message(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.VerifyMessageCommand)
}

inline void VerifyMessageCommand::SharedCtor() {
nonce_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

VerifyMessageCommand::~VerifyMessageCommand() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.VerifyMessageCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyMessageCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_.Destroy();
  if (this != internal_default_instance()) delete message_;
}

void VerifyMessageCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyMessageCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.VerifyMessageCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyMessageCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.VerifyMessageCommand.nonce"));
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Message message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyMessageCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.VerifyMessageCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.VerifyMessageCommand.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // .apache.rocketmq.v2.Message message = 2 [json_name = "message"];
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.VerifyMessageCommand)
  return target;
}

size_t VerifyMessageCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.VerifyMessageCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // .apache.rocketmq.v2.Message message = 2 [json_name = "message"];
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyMessageCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyMessageCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyMessageCommand::GetClassData() const { return &_class_data_; }

void VerifyMessageCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyMessageCommand *>(to)->MergeFrom(
      static_cast<const VerifyMessageCommand &>(from));
}


void VerifyMessageCommand::MergeFrom(const VerifyMessageCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.VerifyMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::apache::rocketmq::v2::Message::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyMessageCommand::CopyFrom(const VerifyMessageCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.VerifyMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageCommand::IsInitialized() const {
  return true;
}

void VerifyMessageCommand::InternalSwap(VerifyMessageCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nonce_, lhs_arena,
      &other->nonce_, rhs_arena
  );
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyMessageCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[21]);
}

// ===================================================================

class VerifyMessageResult::_Internal {
 public:
};

VerifyMessageResult::VerifyMessageResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.VerifyMessageResult)
}
VerifyMessageResult::VerifyMessageResult(const VerifyMessageResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    nonce_.Set(from._internal_nonce(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.VerifyMessageResult)
}

inline void VerifyMessageResult::SharedCtor() {
nonce_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nonce_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyMessageResult::~VerifyMessageResult() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.VerifyMessageResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyMessageResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_.Destroy();
}

void VerifyMessageResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VerifyMessageResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.VerifyMessageResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyMessageResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce = 1 [json_name = "nonce"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.VerifyMessageResult.nonce"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyMessageResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.VerifyMessageResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.VerifyMessageResult.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.VerifyMessageResult)
  return target;
}

size_t VerifyMessageResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.VerifyMessageResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1 [json_name = "nonce"];
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyMessageResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyMessageResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyMessageResult::GetClassData() const { return &_class_data_; }

void VerifyMessageResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyMessageResult *>(to)->MergeFrom(
      static_cast<const VerifyMessageResult &>(from));
}


void VerifyMessageResult::MergeFrom(const VerifyMessageResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.VerifyMessageResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyMessageResult::CopyFrom(const VerifyMessageResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.VerifyMessageResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageResult::IsInitialized() const {
  return true;
}

void VerifyMessageResult::InternalSwap(VerifyMessageResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &nonce_, lhs_arena,
      &other->nonce_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyMessageResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[22]);
}

// ===================================================================

class RecoverOrphanedTransactionCommand::_Internal {
 public:
  static const ::apache::rocketmq::v2::Message& message(const RecoverOrphanedTransactionCommand* msg);
};

const ::apache::rocketmq::v2::Message&
RecoverOrphanedTransactionCommand::_Internal::message(const RecoverOrphanedTransactionCommand* msg) {
  return *msg->message_;
}
void RecoverOrphanedTransactionCommand::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
RecoverOrphanedTransactionCommand::RecoverOrphanedTransactionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
}
RecoverOrphanedTransactionCommand::RecoverOrphanedTransactionCommand(const RecoverOrphanedTransactionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::apache::rocketmq::v2::Message(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
}

inline void RecoverOrphanedTransactionCommand::SharedCtor() {
transaction_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

RecoverOrphanedTransactionCommand::~RecoverOrphanedTransactionCommand() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoverOrphanedTransactionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_id_.Destroy();
  if (this != internal_default_instance()) delete message_;
}

void RecoverOrphanedTransactionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecoverOrphanedTransactionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoverOrphanedTransactionCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Message message = 1 [json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 2 [json_name = "transactionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.RecoverOrphanedTransactionCommand.transaction_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoverOrphanedTransactionCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Message message = 1 [json_name = "message"];
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // string transaction_id = 2 [json_name = "transactionId"];
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.RecoverOrphanedTransactionCommand.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  return target;
}

size_t RecoverOrphanedTransactionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 2 [json_name = "transactionId"];
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .apache.rocketmq.v2.Message message = 1 [json_name = "message"];
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoverOrphanedTransactionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecoverOrphanedTransactionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoverOrphanedTransactionCommand::GetClassData() const { return &_class_data_; }

void RecoverOrphanedTransactionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecoverOrphanedTransactionCommand *>(to)->MergeFrom(
      static_cast<const RecoverOrphanedTransactionCommand &>(from));
}


void RecoverOrphanedTransactionCommand::MergeFrom(const RecoverOrphanedTransactionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::apache::rocketmq::v2::Message::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoverOrphanedTransactionCommand::CopyFrom(const RecoverOrphanedTransactionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.RecoverOrphanedTransactionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverOrphanedTransactionCommand::IsInitialized() const {
  return true;
}

void RecoverOrphanedTransactionCommand::InternalSwap(RecoverOrphanedTransactionCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverOrphanedTransactionCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[23]);
}

// ===================================================================

class Publishing::_Internal {
 public:
};

void Publishing::clear_topics() {
  topics_.Clear();
}
Publishing::Publishing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  topics_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Publishing)
}
Publishing::Publishing(const Publishing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_body_size_, &from.max_body_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&validate_message_type_) -
    reinterpret_cast<char*>(&max_body_size_)) + sizeof(validate_message_type_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Publishing)
}

inline void Publishing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_body_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validate_message_type_) -
    reinterpret_cast<char*>(&max_body_size_)) + sizeof(validate_message_type_));
}

Publishing::~Publishing() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Publishing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Publishing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Publishing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Publishing::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Publishing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  ::memset(&max_body_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validate_message_type_) -
      reinterpret_cast<char*>(&max_body_size_)) + sizeof(validate_message_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Publishing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apache.rocketmq.v2.Resource topics = 1 [json_name = "topics"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_body_size = 2 [json_name = "maxBodySize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_body_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool validate_message_type = 3 [json_name = "validateMessageType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          validate_message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Publishing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Publishing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.Resource topics = 1 [json_name = "topics"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topics_size()); i < n; i++) {
    const auto& repfield = this->_internal_topics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 max_body_size = 2 [json_name = "maxBodySize"];
  if (this->_internal_max_body_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_body_size(), target);
  }

  // bool validate_message_type = 3 [json_name = "validateMessageType"];
  if (this->_internal_validate_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_validate_message_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Publishing)
  return target;
}

size_t Publishing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Publishing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.Resource topics = 1 [json_name = "topics"];
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 max_body_size = 2 [json_name = "maxBodySize"];
  if (this->_internal_max_body_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_body_size());
  }

  // bool validate_message_type = 3 [json_name = "validateMessageType"];
  if (this->_internal_validate_message_type() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Publishing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Publishing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Publishing::GetClassData() const { return &_class_data_; }

void Publishing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Publishing *>(to)->MergeFrom(
      static_cast<const Publishing &>(from));
}


void Publishing::MergeFrom(const Publishing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Publishing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from._internal_max_body_size() != 0) {
    _internal_set_max_body_size(from._internal_max_body_size());
  }
  if (from._internal_validate_message_type() != 0) {
    _internal_set_validate_message_type(from._internal_validate_message_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Publishing::CopyFrom(const Publishing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Publishing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publishing::IsInitialized() const {
  return true;
}

void Publishing::InternalSwap(Publishing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Publishing, validate_message_type_)
      + sizeof(Publishing::validate_message_type_)
      - PROTOBUF_FIELD_OFFSET(Publishing, max_body_size_)>(
          reinterpret_cast<char*>(&max_body_size_),
          reinterpret_cast<char*>(&other->max_body_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Publishing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[24]);
}

// ===================================================================

class Subscription::_Internal {
 public:
  using HasBits = decltype(std::declval<Subscription>()._has_bits_);
  static const ::apache::rocketmq::v2::Resource& group(const Subscription* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fifo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_receive_batch_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& long_polling_timeout(const Subscription* msg);
  static void set_has_long_polling_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apache::rocketmq::v2::Resource&
Subscription::_Internal::group(const Subscription* msg) {
  return *msg->group_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Subscription::_Internal::long_polling_timeout(const Subscription* msg) {
  return *msg->long_polling_timeout_;
}
void Subscription::clear_group() {
  if (group_ != nullptr) group_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Subscription::clear_subscriptions() {
  subscriptions_.Clear();
}
void Subscription::clear_long_polling_timeout() {
  if (long_polling_timeout_ != nullptr) long_polling_timeout_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Subscription::Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subscriptions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_long_polling_timeout()) {
    long_polling_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.long_polling_timeout_);
  } else {
    long_polling_timeout_ = nullptr;
  }
  ::memcpy(&fifo_, &from.fifo_,
    static_cast<size_t>(reinterpret_cast<char*>(&receive_batch_size_) -
    reinterpret_cast<char*>(&fifo_)) + sizeof(receive_batch_size_));
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Subscription)
}

inline void Subscription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receive_batch_size_) -
    reinterpret_cast<char*>(&group_)) + sizeof(receive_batch_size_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Subscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete long_polling_timeout_;
}

void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Subscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_ != nullptr);
      group_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(long_polling_timeout_ != nullptr);
      long_polling_timeout_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&fifo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receive_batch_size_) -
        reinterpret_cast<char*>(&fifo_)) + sizeof(receive_batch_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2 [json_name = "subscriptions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool fifo = 3 [json_name = "fifo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_fifo(&has_bits);
          fifo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 receive_batch_size = 4 [json_name = "receiveBatchSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_receive_batch_size(&has_bits);
          receive_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration long_polling_timeout = 5 [json_name = "longPollingTimeout"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_polling_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Subscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2 [json_name = "subscriptions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool fifo = 3 [json_name = "fifo"];
  if (_internal_has_fifo()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_fifo(), target);
  }

  // optional int32 receive_batch_size = 4 [json_name = "receiveBatchSize"];
  if (_internal_has_receive_batch_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_receive_batch_size(), target);
  }

  // optional .google.protobuf.Duration long_polling_timeout = 5 [json_name = "longPollingTimeout"];
  if (_internal_has_long_polling_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::long_polling_timeout(this),
        _Internal::long_polling_timeout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Subscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2 [json_name = "subscriptions"];
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_);
    }

    // optional .google.protobuf.Duration long_polling_timeout = 5 [json_name = "longPollingTimeout"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *long_polling_timeout_);
    }

    // optional bool fifo = 3 [json_name = "fifo"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 receive_batch_size = 4 [json_name = "receiveBatchSize"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receive_batch_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subscription::GetClassData() const { return &_class_data_; }

void Subscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Subscription *>(to)->MergeFrom(
      static_cast<const Subscription &>(from));
}


void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_long_polling_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_long_polling_timeout());
    }
    if (cached_has_bits & 0x00000004u) {
      fifo_ = from.fifo_;
    }
    if (cached_has_bits & 0x00000008u) {
      receive_batch_size_ = from.receive_batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscriptions_.InternalSwap(&other->subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subscription, receive_batch_size_)
      + sizeof(Subscription::receive_batch_size_)
      - PROTOBUF_FIELD_OFFSET(Subscription, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[25]);
}

// ===================================================================

class Metric::_Internal {
 public:
  using HasBits = decltype(std::declval<Metric>()._has_bits_);
  static const ::apache::rocketmq::v2::Endpoints& endpoints(const Metric* msg);
  static void set_has_endpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apache::rocketmq::v2::Endpoints&
Metric::_Internal::endpoints(const Metric* msg) {
  return *msg->endpoints_;
}
void Metric::clear_endpoints() {
  if (endpoints_ != nullptr) endpoints_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_endpoints()) {
    endpoints_ = new ::apache::rocketmq::v2::Endpoints(*from.endpoints_);
  } else {
    endpoints_ = nullptr;
  }
  on_ = from.on_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Metric)
}

inline void Metric::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&endpoints_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_) -
    reinterpret_cast<char*>(&endpoints_)) + sizeof(on_));
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Metric)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete endpoints_;
}

void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Metric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(endpoints_ != nullptr);
    endpoints_->Clear();
  }
  on_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool on = 1 [json_name = "on"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apache.rocketmq.v2.Endpoints endpoints = 2 [json_name = "endpoints"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Metric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1 [json_name = "on"];
  if (this->_internal_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_on(), target);
  }

  // optional .apache.rocketmq.v2.Endpoints endpoints = 2 [json_name = "endpoints"];
  if (_internal_has_endpoints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::endpoints(this),
        _Internal::endpoints(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Metric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Endpoints endpoints = 2 [json_name = "endpoints"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoints_);
  }

  // bool on = 1 [json_name = "on"];
  if (this->_internal_on() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Metric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metric::GetClassData() const { return &_class_data_; }

void Metric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Metric *>(to)->MergeFrom(
      static_cast<const Metric &>(from));
}


void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_endpoints()) {
    _internal_mutable_endpoints()->::apache::rocketmq::v2::Endpoints::MergeFrom(from._internal_endpoints());
  }
  if (from._internal_on() != 0) {
    _internal_set_on(from._internal_on());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metric, on_)
      + sizeof(Metric::on_)
      - PROTOBUF_FIELD_OFFSET(Metric, endpoints_)>(
          reinterpret_cast<char*>(&endpoints_),
          reinterpret_cast<char*>(&other->endpoints_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[26]);
}

// ===================================================================

class Settings::_Internal {
 public:
  using HasBits = decltype(std::declval<Settings>()._has_bits_);
  static void set_has_client_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apache::rocketmq::v2::Endpoints& access_point(const Settings* msg);
  static void set_has_access_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apache::rocketmq::v2::RetryPolicy& backoff_policy(const Settings* msg);
  static void set_has_backoff_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& request_timeout(const Settings* msg);
  static void set_has_request_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apache::rocketmq::v2::Publishing& publishing(const Settings* msg);
  static const ::apache::rocketmq::v2::Subscription& subscription(const Settings* msg);
  static const ::apache::rocketmq::v2::UA& user_agent(const Settings* msg);
  static const ::apache::rocketmq::v2::Metric& metric(const Settings* msg);
};

const ::apache::rocketmq::v2::Endpoints&
Settings::_Internal::access_point(const Settings* msg) {
  return *msg->access_point_;
}
const ::apache::rocketmq::v2::RetryPolicy&
Settings::_Internal::backoff_policy(const Settings* msg) {
  return *msg->backoff_policy_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Settings::_Internal::request_timeout(const Settings* msg) {
  return *msg->request_timeout_;
}
const ::apache::rocketmq::v2::Publishing&
Settings::_Internal::publishing(const Settings* msg) {
  return *msg->pub_sub_.publishing_;
}
const ::apache::rocketmq::v2::Subscription&
Settings::_Internal::subscription(const Settings* msg) {
  return *msg->pub_sub_.subscription_;
}
const ::apache::rocketmq::v2::UA&
Settings::_Internal::user_agent(const Settings* msg) {
  return *msg->user_agent_;
}
const ::apache::rocketmq::v2::Metric&
Settings::_Internal::metric(const Settings* msg) {
  return *msg->metric_;
}
void Settings::clear_access_point() {
  if (access_point_ != nullptr) access_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Settings::clear_backoff_policy() {
  if (backoff_policy_ != nullptr) backoff_policy_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Settings::clear_request_timeout() {
  if (request_timeout_ != nullptr) request_timeout_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Settings::set_allocated_publishing(::apache::rocketmq::v2::Publishing* publishing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pub_sub();
  if (publishing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(publishing);
    if (message_arena != submessage_arena) {
      publishing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publishing, submessage_arena);
    }
    set_has_publishing();
    pub_sub_.publishing_ = publishing;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.Settings.publishing)
}
void Settings::set_allocated_subscription(::apache::rocketmq::v2::Subscription* subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_pub_sub();
  if (subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    set_has_subscription();
    pub_sub_.subscription_ = subscription;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.Settings.subscription)
}
void Settings::clear_user_agent() {
  if (GetArenaForAllocation() == nullptr && user_agent_ != nullptr) {
    delete user_agent_;
  }
  user_agent_ = nullptr;
}
Settings::Settings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.Settings)
}
Settings::Settings(const Settings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_access_point()) {
    access_point_ = new ::apache::rocketmq::v2::Endpoints(*from.access_point_);
  } else {
    access_point_ = nullptr;
  }
  if (from._internal_has_backoff_policy()) {
    backoff_policy_ = new ::apache::rocketmq::v2::RetryPolicy(*from.backoff_policy_);
  } else {
    backoff_policy_ = nullptr;
  }
  if (from._internal_has_request_timeout()) {
    request_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.request_timeout_);
  } else {
    request_timeout_ = nullptr;
  }
  if (from._internal_has_user_agent()) {
    user_agent_ = new ::apache::rocketmq::v2::UA(*from.user_agent_);
  } else {
    user_agent_ = nullptr;
  }
  if (from._internal_has_metric()) {
    metric_ = new ::apache::rocketmq::v2::Metric(*from.metric_);
  } else {
    metric_ = nullptr;
  }
  client_type_ = from.client_type_;
  clear_has_pub_sub();
  switch (from.pub_sub_case()) {
    case kPublishing: {
      _internal_mutable_publishing()->::apache::rocketmq::v2::Publishing::MergeFrom(from._internal_publishing());
      break;
    }
    case kSubscription: {
      _internal_mutable_subscription()->::apache::rocketmq::v2::Subscription::MergeFrom(from._internal_subscription());
      break;
    }
    case PUB_SUB_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.Settings)
}

inline void Settings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&access_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&access_point_)) + sizeof(client_type_));
clear_has_pub_sub();
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.Settings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Settings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete access_point_;
  if (this != internal_default_instance()) delete backoff_policy_;
  if (this != internal_default_instance()) delete request_timeout_;
  if (this != internal_default_instance()) delete user_agent_;
  if (this != internal_default_instance()) delete metric_;
  if (has_pub_sub()) {
    clear_pub_sub();
  }
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Settings::clear_pub_sub() {
// @@protoc_insertion_point(one_of_clear_start:apache.rocketmq.v2.Settings)
  switch (pub_sub_case()) {
    case kPublishing: {
      if (GetArenaForAllocation() == nullptr) {
        delete pub_sub_.publishing_;
      }
      break;
    }
    case kSubscription: {
      if (GetArenaForAllocation() == nullptr) {
        delete pub_sub_.subscription_;
      }
      break;
    }
    case PUB_SUB_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PUB_SUB_NOT_SET;
}


void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.Settings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(access_point_ != nullptr);
      access_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(backoff_policy_ != nullptr);
      backoff_policy_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(request_timeout_ != nullptr);
      request_timeout_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && user_agent_ != nullptr) {
    delete user_agent_;
  }
  user_agent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metric_ != nullptr) {
    delete metric_;
  }
  metric_ = nullptr;
  client_type_ = 0;
  clear_pub_sub();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Settings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apache.rocketmq.v2.ClientType client_type = 1 [json_name = "clientType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::apache::rocketmq::v2::ClientType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .apache.rocketmq.v2.Endpoints access_point = 2 [json_name = "accessPoint"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_access_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apache.rocketmq.v2.RetryPolicy backoff_policy = 3 [json_name = "backoffPolicy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_backoff_policy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Duration request_timeout = 4 [json_name = "requestTimeout"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Publishing publishing = 5 [json_name = "publishing"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_publishing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Subscription subscription = 6 [json_name = "subscription"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.UA user_agent = 7 [json_name = "userAgent"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_agent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Metric metric = 8 [json_name = "metric"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Settings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.Settings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.ClientType client_type = 1 [json_name = "clientType"];
  if (_internal_has_client_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_client_type(), target);
  }

  // optional .apache.rocketmq.v2.Endpoints access_point = 2 [json_name = "accessPoint"];
  if (_internal_has_access_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::access_point(this),
        _Internal::access_point(this).GetCachedSize(), target, stream);
  }

  // optional .apache.rocketmq.v2.RetryPolicy backoff_policy = 3 [json_name = "backoffPolicy"];
  if (_internal_has_backoff_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::backoff_policy(this),
        _Internal::backoff_policy(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Duration request_timeout = 4 [json_name = "requestTimeout"];
  if (_internal_has_request_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::request_timeout(this),
        _Internal::request_timeout(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Publishing publishing = 5 [json_name = "publishing"];
  if (_internal_has_publishing()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::publishing(this),
        _Internal::publishing(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Subscription subscription = 6 [json_name = "subscription"];
  if (_internal_has_subscription()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::subscription(this),
        _Internal::subscription(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.UA user_agent = 7 [json_name = "userAgent"];
  if (this->_internal_has_user_agent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::user_agent(this),
        _Internal::user_agent(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Metric metric = 8 [json_name = "metric"];
  if (this->_internal_has_metric()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::metric(this),
        _Internal::metric(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.Settings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apache.rocketmq.v2.Endpoints access_point = 2 [json_name = "accessPoint"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_point_);
    }

    // optional .apache.rocketmq.v2.RetryPolicy backoff_policy = 3 [json_name = "backoffPolicy"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backoff_policy_);
    }

    // optional .google.protobuf.Duration request_timeout = 4 [json_name = "requestTimeout"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_timeout_);
    }

  }
  // .apache.rocketmq.v2.UA user_agent = 7 [json_name = "userAgent"];
  if (this->_internal_has_user_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_agent_);
  }

  // .apache.rocketmq.v2.Metric metric = 8 [json_name = "metric"];
  if (this->_internal_has_metric()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metric_);
  }

  // optional .apache.rocketmq.v2.ClientType client_type = 1 [json_name = "clientType"];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  switch (pub_sub_case()) {
    // .apache.rocketmq.v2.Publishing publishing = 5 [json_name = "publishing"];
    case kPublishing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pub_sub_.publishing_);
      break;
    }
    // .apache.rocketmq.v2.Subscription subscription = 6 [json_name = "subscription"];
    case kSubscription: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pub_sub_.subscription_);
      break;
    }
    case PUB_SUB_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Settings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Settings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Settings::GetClassData() const { return &_class_data_; }

void Settings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Settings *>(to)->MergeFrom(
      static_cast<const Settings &>(from));
}


void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_access_point()->::apache::rocketmq::v2::Endpoints::MergeFrom(from._internal_access_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_backoff_policy()->::apache::rocketmq::v2::RetryPolicy::MergeFrom(from._internal_backoff_policy());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_request_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_request_timeout());
    }
  }
  if (from._internal_has_user_agent()) {
    _internal_mutable_user_agent()->::apache::rocketmq::v2::UA::MergeFrom(from._internal_user_agent());
  }
  if (from._internal_has_metric()) {
    _internal_mutable_metric()->::apache::rocketmq::v2::Metric::MergeFrom(from._internal_metric());
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_client_type(from._internal_client_type());
  }
  switch (from.pub_sub_case()) {
    case kPublishing: {
      _internal_mutable_publishing()->::apache::rocketmq::v2::Publishing::MergeFrom(from._internal_publishing());
      break;
    }
    case kSubscription: {
      _internal_mutable_subscription()->::apache::rocketmq::v2::Subscription::MergeFrom(from._internal_subscription());
      break;
    }
    case PUB_SUB_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::InternalSwap(Settings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Settings, client_type_)
      + sizeof(Settings::client_type_)
      - PROTOBUF_FIELD_OFFSET(Settings, access_point_)>(
          reinterpret_cast<char*>(&access_point_),
          reinterpret_cast<char*>(&other->access_point_));
  swap(pub_sub_, other->pub_sub_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Settings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[27]);
}

// ===================================================================

class TelemetryCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<TelemetryCommand>()._has_bits_);
  static const ::apache::rocketmq::v2::Status& status(const TelemetryCommand* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apache::rocketmq::v2::Settings& settings(const TelemetryCommand* msg);
  static const ::apache::rocketmq::v2::ThreadStackTrace& thread_stack_trace(const TelemetryCommand* msg);
  static const ::apache::rocketmq::v2::VerifyMessageResult& verify_message_result(const TelemetryCommand* msg);
  static const ::apache::rocketmq::v2::RecoverOrphanedTransactionCommand& recover_orphaned_transaction_command(const TelemetryCommand* msg);
  static const ::apache::rocketmq::v2::PrintThreadStackTraceCommand& print_thread_stack_trace_command(const TelemetryCommand* msg);
  static const ::apache::rocketmq::v2::VerifyMessageCommand& verify_message_command(const TelemetryCommand* msg);
};

const ::apache::rocketmq::v2::Status&
TelemetryCommand::_Internal::status(const TelemetryCommand* msg) {
  return *msg->status_;
}
const ::apache::rocketmq::v2::Settings&
TelemetryCommand::_Internal::settings(const TelemetryCommand* msg) {
  return *msg->command_.settings_;
}
const ::apache::rocketmq::v2::ThreadStackTrace&
TelemetryCommand::_Internal::thread_stack_trace(const TelemetryCommand* msg) {
  return *msg->command_.thread_stack_trace_;
}
const ::apache::rocketmq::v2::VerifyMessageResult&
TelemetryCommand::_Internal::verify_message_result(const TelemetryCommand* msg) {
  return *msg->command_.verify_message_result_;
}
const ::apache::rocketmq::v2::RecoverOrphanedTransactionCommand&
TelemetryCommand::_Internal::recover_orphaned_transaction_command(const TelemetryCommand* msg) {
  return *msg->command_.recover_orphaned_transaction_command_;
}
const ::apache::rocketmq::v2::PrintThreadStackTraceCommand&
TelemetryCommand::_Internal::print_thread_stack_trace_command(const TelemetryCommand* msg) {
  return *msg->command_.print_thread_stack_trace_command_;
}
const ::apache::rocketmq::v2::VerifyMessageCommand&
TelemetryCommand::_Internal::verify_message_command(const TelemetryCommand* msg) {
  return *msg->command_.verify_message_command_;
}
void TelemetryCommand::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TelemetryCommand::set_allocated_settings(::apache::rocketmq::v2::Settings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    set_has_settings();
    command_.settings_ = settings;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.TelemetryCommand.settings)
}
void TelemetryCommand::set_allocated_thread_stack_trace(::apache::rocketmq::v2::ThreadStackTrace* thread_stack_trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (thread_stack_trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(thread_stack_trace);
    if (message_arena != submessage_arena) {
      thread_stack_trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread_stack_trace, submessage_arena);
    }
    set_has_thread_stack_trace();
    command_.thread_stack_trace_ = thread_stack_trace;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.TelemetryCommand.thread_stack_trace)
}
void TelemetryCommand::set_allocated_verify_message_result(::apache::rocketmq::v2::VerifyMessageResult* verify_message_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (verify_message_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verify_message_result);
    if (message_arena != submessage_arena) {
      verify_message_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verify_message_result, submessage_arena);
    }
    set_has_verify_message_result();
    command_.verify_message_result_ = verify_message_result;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.TelemetryCommand.verify_message_result)
}
void TelemetryCommand::set_allocated_recover_orphaned_transaction_command(::apache::rocketmq::v2::RecoverOrphanedTransactionCommand* recover_orphaned_transaction_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (recover_orphaned_transaction_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recover_orphaned_transaction_command);
    if (message_arena != submessage_arena) {
      recover_orphaned_transaction_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recover_orphaned_transaction_command, submessage_arena);
    }
    set_has_recover_orphaned_transaction_command();
    command_.recover_orphaned_transaction_command_ = recover_orphaned_transaction_command;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.TelemetryCommand.recover_orphaned_transaction_command)
}
void TelemetryCommand::set_allocated_print_thread_stack_trace_command(::apache::rocketmq::v2::PrintThreadStackTraceCommand* print_thread_stack_trace_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (print_thread_stack_trace_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(print_thread_stack_trace_command);
    if (message_arena != submessage_arena) {
      print_thread_stack_trace_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_thread_stack_trace_command, submessage_arena);
    }
    set_has_print_thread_stack_trace_command();
    command_.print_thread_stack_trace_command_ = print_thread_stack_trace_command;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.TelemetryCommand.print_thread_stack_trace_command)
}
void TelemetryCommand::set_allocated_verify_message_command(::apache::rocketmq::v2::VerifyMessageCommand* verify_message_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command();
  if (verify_message_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verify_message_command);
    if (message_arena != submessage_arena) {
      verify_message_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verify_message_command, submessage_arena);
    }
    set_has_verify_message_command();
    command_.verify_message_command_ = verify_message_command;
  }
  // @@protoc_insertion_point(field_set_allocated:apache.rocketmq.v2.TelemetryCommand.verify_message_command)
}
TelemetryCommand::TelemetryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.TelemetryCommand)
}
TelemetryCommand::TelemetryCommand(const TelemetryCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  clear_has_command();
  switch (from.command_case()) {
    case kSettings: {
      _internal_mutable_settings()->::apache::rocketmq::v2::Settings::MergeFrom(from._internal_settings());
      break;
    }
    case kThreadStackTrace: {
      _internal_mutable_thread_stack_trace()->::apache::rocketmq::v2::ThreadStackTrace::MergeFrom(from._internal_thread_stack_trace());
      break;
    }
    case kVerifyMessageResult: {
      _internal_mutable_verify_message_result()->::apache::rocketmq::v2::VerifyMessageResult::MergeFrom(from._internal_verify_message_result());
      break;
    }
    case kRecoverOrphanedTransactionCommand: {
      _internal_mutable_recover_orphaned_transaction_command()->::apache::rocketmq::v2::RecoverOrphanedTransactionCommand::MergeFrom(from._internal_recover_orphaned_transaction_command());
      break;
    }
    case kPrintThreadStackTraceCommand: {
      _internal_mutable_print_thread_stack_trace_command()->::apache::rocketmq::v2::PrintThreadStackTraceCommand::MergeFrom(from._internal_print_thread_stack_trace_command());
      break;
    }
    case kVerifyMessageCommand: {
      _internal_mutable_verify_message_command()->::apache::rocketmq::v2::VerifyMessageCommand::MergeFrom(from._internal_verify_message_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.TelemetryCommand)
}

inline void TelemetryCommand::SharedCtor() {
status_ = nullptr;
clear_has_command();
}

TelemetryCommand::~TelemetryCommand() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.TelemetryCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TelemetryCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (has_command()) {
    clear_command();
  }
}

void TelemetryCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:apache.rocketmq.v2.TelemetryCommand)
  switch (command_case()) {
    case kSettings: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.settings_;
      }
      break;
    }
    case kThreadStackTrace: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.thread_stack_trace_;
      }
      break;
    }
    case kVerifyMessageResult: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.verify_message_result_;
      }
      break;
    }
    case kRecoverOrphanedTransactionCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.recover_orphaned_transaction_command_;
      }
      break;
    }
    case kPrintThreadStackTraceCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.print_thread_stack_trace_command_;
      }
      break;
    }
    case kVerifyMessageCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete command_.verify_message_command_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void TelemetryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.TelemetryCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Settings settings = 2 [json_name = "settings"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3 [json_name = "threadStackTrace"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_thread_stack_trace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4 [json_name = "verifyMessageResult"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_verify_message_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 5 [json_name = "recoverOrphanedTransactionCommand"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_recover_orphaned_transaction_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 6 [json_name = "printThreadStackTraceCommand"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_print_thread_stack_trace_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 7 [json_name = "verifyMessageCommand"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_verify_message_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.TelemetryCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Settings settings = 2 [json_name = "settings"];
  if (_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3 [json_name = "threadStackTrace"];
  if (_internal_has_thread_stack_trace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::thread_stack_trace(this),
        _Internal::thread_stack_trace(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4 [json_name = "verifyMessageResult"];
  if (_internal_has_verify_message_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::verify_message_result(this),
        _Internal::verify_message_result(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 5 [json_name = "recoverOrphanedTransactionCommand"];
  if (_internal_has_recover_orphaned_transaction_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::recover_orphaned_transaction_command(this),
        _Internal::recover_orphaned_transaction_command(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 6 [json_name = "printThreadStackTraceCommand"];
  if (_internal_has_print_thread_stack_trace_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::print_thread_stack_trace_command(this),
        _Internal::print_thread_stack_trace_command(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 7 [json_name = "verifyMessageCommand"];
  if (_internal_has_verify_message_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::verify_message_command(this),
        _Internal::verify_message_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.TelemetryCommand)
  return target;
}

size_t TelemetryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.TelemetryCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  switch (command_case()) {
    // .apache.rocketmq.v2.Settings settings = 2 [json_name = "settings"];
    case kSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.settings_);
      break;
    }
    // .apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3 [json_name = "threadStackTrace"];
    case kThreadStackTrace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.thread_stack_trace_);
      break;
    }
    // .apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4 [json_name = "verifyMessageResult"];
    case kVerifyMessageResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.verify_message_result_);
      break;
    }
    // .apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 5 [json_name = "recoverOrphanedTransactionCommand"];
    case kRecoverOrphanedTransactionCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.recover_orphaned_transaction_command_);
      break;
    }
    // .apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 6 [json_name = "printThreadStackTraceCommand"];
    case kPrintThreadStackTraceCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.print_thread_stack_trace_command_);
      break;
    }
    // .apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 7 [json_name = "verifyMessageCommand"];
    case kVerifyMessageCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.verify_message_command_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryCommand::GetClassData() const { return &_class_data_; }

void TelemetryCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryCommand *>(to)->MergeFrom(
      static_cast<const TelemetryCommand &>(from));
}


void TelemetryCommand::MergeFrom(const TelemetryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.TelemetryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  switch (from.command_case()) {
    case kSettings: {
      _internal_mutable_settings()->::apache::rocketmq::v2::Settings::MergeFrom(from._internal_settings());
      break;
    }
    case kThreadStackTrace: {
      _internal_mutable_thread_stack_trace()->::apache::rocketmq::v2::ThreadStackTrace::MergeFrom(from._internal_thread_stack_trace());
      break;
    }
    case kVerifyMessageResult: {
      _internal_mutable_verify_message_result()->::apache::rocketmq::v2::VerifyMessageResult::MergeFrom(from._internal_verify_message_result());
      break;
    }
    case kRecoverOrphanedTransactionCommand: {
      _internal_mutable_recover_orphaned_transaction_command()->::apache::rocketmq::v2::RecoverOrphanedTransactionCommand::MergeFrom(from._internal_recover_orphaned_transaction_command());
      break;
    }
    case kPrintThreadStackTraceCommand: {
      _internal_mutable_print_thread_stack_trace_command()->::apache::rocketmq::v2::PrintThreadStackTraceCommand::MergeFrom(from._internal_print_thread_stack_trace_command());
      break;
    }
    case kVerifyMessageCommand: {
      _internal_mutable_verify_message_command()->::apache::rocketmq::v2::VerifyMessageCommand::MergeFrom(from._internal_verify_message_command());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryCommand::CopyFrom(const TelemetryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.TelemetryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryCommand::IsInitialized() const {
  return true;
}

void TelemetryCommand::InternalSwap(TelemetryCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[28]);
}

// ===================================================================

class NotifyClientTerminationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NotifyClientTerminationRequest>()._has_bits_);
  static const ::apache::rocketmq::v2::Resource& group(const NotifyClientTerminationRequest* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apache::rocketmq::v2::Resource&
NotifyClientTerminationRequest::_Internal::group(const NotifyClientTerminationRequest* msg) {
  return *msg->group_;
}
void NotifyClientTerminationRequest::clear_group() {
  if (group_ != nullptr) group_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NotifyClientTerminationRequest::NotifyClientTerminationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.NotifyClientTerminationRequest)
}
NotifyClientTerminationRequest::NotifyClientTerminationRequest(const NotifyClientTerminationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.NotifyClientTerminationRequest)
}

inline void NotifyClientTerminationRequest::SharedCtor() {
group_ = nullptr;
}

NotifyClientTerminationRequest::~NotifyClientTerminationRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.NotifyClientTerminationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyClientTerminationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete group_;
}

void NotifyClientTerminationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyClientTerminationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.NotifyClientTerminationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(group_ != nullptr);
    group_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyClientTerminationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyClientTerminationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.NotifyClientTerminationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.NotifyClientTerminationRequest)
  return target;
}

size_t NotifyClientTerminationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.NotifyClientTerminationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyClientTerminationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyClientTerminationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyClientTerminationRequest::GetClassData() const { return &_class_data_; }

void NotifyClientTerminationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyClientTerminationRequest *>(to)->MergeFrom(
      static_cast<const NotifyClientTerminationRequest &>(from));
}


void NotifyClientTerminationRequest::MergeFrom(const NotifyClientTerminationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.NotifyClientTerminationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyClientTerminationRequest::CopyFrom(const NotifyClientTerminationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.NotifyClientTerminationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClientTerminationRequest::IsInitialized() const {
  return true;
}

void NotifyClientTerminationRequest::InternalSwap(NotifyClientTerminationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyClientTerminationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[29]);
}

// ===================================================================

class NotifyClientTerminationResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const NotifyClientTerminationResponse* msg);
};

const ::apache::rocketmq::v2::Status&
NotifyClientTerminationResponse::_Internal::status(const NotifyClientTerminationResponse* msg) {
  return *msg->status_;
}
void NotifyClientTerminationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
NotifyClientTerminationResponse::NotifyClientTerminationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.NotifyClientTerminationResponse)
}
NotifyClientTerminationResponse::NotifyClientTerminationResponse(const NotifyClientTerminationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.NotifyClientTerminationResponse)
}

inline void NotifyClientTerminationResponse::SharedCtor() {
status_ = nullptr;
}

NotifyClientTerminationResponse::~NotifyClientTerminationResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.NotifyClientTerminationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyClientTerminationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void NotifyClientTerminationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotifyClientTerminationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.NotifyClientTerminationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyClientTerminationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyClientTerminationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.NotifyClientTerminationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.NotifyClientTerminationResponse)
  return target;
}

size_t NotifyClientTerminationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.NotifyClientTerminationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyClientTerminationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NotifyClientTerminationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyClientTerminationResponse::GetClassData() const { return &_class_data_; }

void NotifyClientTerminationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NotifyClientTerminationResponse *>(to)->MergeFrom(
      static_cast<const NotifyClientTerminationResponse &>(from));
}


void NotifyClientTerminationResponse::MergeFrom(const NotifyClientTerminationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.NotifyClientTerminationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyClientTerminationResponse::CopyFrom(const NotifyClientTerminationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.NotifyClientTerminationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClientTerminationResponse::IsInitialized() const {
  return true;
}

void NotifyClientTerminationResponse::InternalSwap(NotifyClientTerminationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyClientTerminationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[30]);
}

// ===================================================================

class ChangeInvisibleDurationRequest::_Internal {
 public:
  static const ::apache::rocketmq::v2::Resource& group(const ChangeInvisibleDurationRequest* msg);
  static const ::apache::rocketmq::v2::Resource& topic(const ChangeInvisibleDurationRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& invisible_duration(const ChangeInvisibleDurationRequest* msg);
};

const ::apache::rocketmq::v2::Resource&
ChangeInvisibleDurationRequest::_Internal::group(const ChangeInvisibleDurationRequest* msg) {
  return *msg->group_;
}
const ::apache::rocketmq::v2::Resource&
ChangeInvisibleDurationRequest::_Internal::topic(const ChangeInvisibleDurationRequest* msg) {
  return *msg->topic_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ChangeInvisibleDurationRequest::_Internal::invisible_duration(const ChangeInvisibleDurationRequest* msg) {
  return *msg->invisible_duration_;
}
void ChangeInvisibleDurationRequest::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
void ChangeInvisibleDurationRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
void ChangeInvisibleDurationRequest::clear_invisible_duration() {
  if (GetArenaForAllocation() == nullptr && invisible_duration_ != nullptr) {
    delete invisible_duration_;
  }
  invisible_duration_ = nullptr;
}
ChangeInvisibleDurationRequest::ChangeInvisibleDurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
}
ChangeInvisibleDurationRequest::ChangeInvisibleDurationRequest(const ChangeInvisibleDurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receipt_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receipt_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receipt_handle().empty()) {
    receipt_handle_.Set(from._internal_receipt_handle(), 
      GetArenaForAllocation());
  }
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_group()) {
    group_ = new ::apache::rocketmq::v2::Resource(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_topic()) {
    topic_ = new ::apache::rocketmq::v2::Resource(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_invisible_duration()) {
    invisible_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.invisible_duration_);
  } else {
    invisible_duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
}

inline void ChangeInvisibleDurationRequest::SharedCtor() {
receipt_handle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receipt_handle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invisible_duration_) -
    reinterpret_cast<char*>(&group_)) + sizeof(invisible_duration_));
}

ChangeInvisibleDurationRequest::~ChangeInvisibleDurationRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeInvisibleDurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  receipt_handle_.Destroy();
  message_id_.Destroy();
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete invisible_duration_;
}

void ChangeInvisibleDurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeInvisibleDurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receipt_handle_.ClearToEmpty();
  message_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && invisible_duration_ != nullptr) {
    delete invisible_duration_;
  }
  invisible_duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeInvisibleDurationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receipt_handle = 3 [json_name = "receiptHandle"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receipt_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ChangeInvisibleDurationRequest.receipt_handle"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration invisible_duration = 4 [json_name = "invisibleDuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_invisible_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_id = 5 [json_name = "messageId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ChangeInvisibleDurationRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeInvisibleDurationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // string receipt_handle = 3 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_handle().data(), static_cast<int>(this->_internal_receipt_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ChangeInvisibleDurationRequest.receipt_handle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receipt_handle(), target);
  }

  // .google.protobuf.Duration invisible_duration = 4 [json_name = "invisibleDuration"];
  if (this->_internal_has_invisible_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::invisible_duration(this),
        _Internal::invisible_duration(this).GetCachedSize(), target, stream);
  }

  // string message_id = 5 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ChangeInvisibleDurationRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  return target;
}

size_t ChangeInvisibleDurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receipt_handle = 3 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt_handle());
  }

  // string message_id = 5 [json_name = "messageId"];
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .apache.rocketmq.v2.Resource group = 1 [json_name = "group"];
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .apache.rocketmq.v2.Resource topic = 2 [json_name = "topic"];
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .google.protobuf.Duration invisible_duration = 4 [json_name = "invisibleDuration"];
  if (this->_internal_has_invisible_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invisible_duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeInvisibleDurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeInvisibleDurationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeInvisibleDurationRequest::GetClassData() const { return &_class_data_; }

void ChangeInvisibleDurationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeInvisibleDurationRequest *>(to)->MergeFrom(
      static_cast<const ChangeInvisibleDurationRequest &>(from));
}


void ChangeInvisibleDurationRequest::MergeFrom(const ChangeInvisibleDurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_receipt_handle().empty()) {
    _internal_set_receipt_handle(from._internal_receipt_handle());
  }
  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_has_group()) {
    _internal_mutable_group()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_group());
  }
  if (from._internal_has_topic()) {
    _internal_mutable_topic()->::apache::rocketmq::v2::Resource::MergeFrom(from._internal_topic());
  }
  if (from._internal_has_invisible_duration()) {
    _internal_mutable_invisible_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_invisible_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeInvisibleDurationRequest::CopyFrom(const ChangeInvisibleDurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ChangeInvisibleDurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeInvisibleDurationRequest::IsInitialized() const {
  return true;
}

void ChangeInvisibleDurationRequest::InternalSwap(ChangeInvisibleDurationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receipt_handle_, lhs_arena,
      &other->receipt_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeInvisibleDurationRequest, invisible_duration_)
      + sizeof(ChangeInvisibleDurationRequest::invisible_duration_)
      - PROTOBUF_FIELD_OFFSET(ChangeInvisibleDurationRequest, group_)>(
          reinterpret_cast<char*>(&group_),
          reinterpret_cast<char*>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeInvisibleDurationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[31]);
}

// ===================================================================

class ChangeInvisibleDurationResponse::_Internal {
 public:
  static const ::apache::rocketmq::v2::Status& status(const ChangeInvisibleDurationResponse* msg);
};

const ::apache::rocketmq::v2::Status&
ChangeInvisibleDurationResponse::_Internal::status(const ChangeInvisibleDurationResponse* msg) {
  return *msg->status_;
}
void ChangeInvisibleDurationResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ChangeInvisibleDurationResponse::ChangeInvisibleDurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
}
ChangeInvisibleDurationResponse::ChangeInvisibleDurationResponse(const ChangeInvisibleDurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receipt_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receipt_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receipt_handle().empty()) {
    receipt_handle_.Set(from._internal_receipt_handle(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::apache::rocketmq::v2::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
}

inline void ChangeInvisibleDurationResponse::SharedCtor() {
receipt_handle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receipt_handle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = nullptr;
}

ChangeInvisibleDurationResponse::~ChangeInvisibleDurationResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeInvisibleDurationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  receipt_handle_.Destroy();
  if (this != internal_default_instance()) delete status_;
}

void ChangeInvisibleDurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeInvisibleDurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receipt_handle_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeInvisibleDurationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receipt_handle = 2 [json_name = "receiptHandle"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receipt_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ChangeInvisibleDurationResponse.receipt_handle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeInvisibleDurationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // string receipt_handle = 2 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receipt_handle().data(), static_cast<int>(this->_internal_receipt_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ChangeInvisibleDurationResponse.receipt_handle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receipt_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  return target;
}

size_t ChangeInvisibleDurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receipt_handle = 2 [json_name = "receiptHandle"];
  if (!this->_internal_receipt_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receipt_handle());
  }

  // .apache.rocketmq.v2.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeInvisibleDurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeInvisibleDurationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeInvisibleDurationResponse::GetClassData() const { return &_class_data_; }

void ChangeInvisibleDurationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeInvisibleDurationResponse *>(to)->MergeFrom(
      static_cast<const ChangeInvisibleDurationResponse &>(from));
}


void ChangeInvisibleDurationResponse::MergeFrom(const ChangeInvisibleDurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_receipt_handle().empty()) {
    _internal_set_receipt_handle(from._internal_receipt_handle());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::apache::rocketmq::v2::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeInvisibleDurationResponse::CopyFrom(const ChangeInvisibleDurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ChangeInvisibleDurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeInvisibleDurationResponse::IsInitialized() const {
  return true;
}

void ChangeInvisibleDurationResponse::InternalSwap(ChangeInvisibleDurationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &receipt_handle_, lhs_arena,
      &other->receipt_handle_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeInvisibleDurationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fservice_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fservice_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::QueryRouteRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::QueryRouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::QueryRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::QueryRouteResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::QueryRouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::QueryRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::SendMessageRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::SendMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::SendMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::SendResultEntry*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::SendResultEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::SendResultEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::SendMessageResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::SendMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::SendMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::QueryAssignmentRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::QueryAssignmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::QueryAssignmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::QueryAssignmentResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::QueryAssignmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::QueryAssignmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ReceiveMessageRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ReceiveMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ReceiveMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ReceiveMessageResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ReceiveMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ReceiveMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::AckMessageEntry*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::AckMessageEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::AckMessageEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::AckMessageRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::AckMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::AckMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::AckMessageResultEntry*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::AckMessageResultEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::AckMessageResultEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::AckMessageResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::AckMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::AckMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::HeartbeatRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::HeartbeatResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::EndTransactionRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::EndTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::EndTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::EndTransactionResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::EndTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::EndTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::PrintThreadStackTraceCommand*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::PrintThreadStackTraceCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::PrintThreadStackTraceCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ThreadStackTrace*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ThreadStackTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ThreadStackTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::VerifyMessageCommand*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::VerifyMessageCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::VerifyMessageCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::VerifyMessageResult*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::VerifyMessageResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::VerifyMessageResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::RecoverOrphanedTransactionCommand*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::RecoverOrphanedTransactionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::RecoverOrphanedTransactionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Publishing*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Publishing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Publishing >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Subscription*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Metric*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::Settings*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::Settings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::TelemetryCommand*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::TelemetryCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::TelemetryCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::NotifyClientTerminationRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::NotifyClientTerminationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::NotifyClientTerminationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::NotifyClientTerminationResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::NotifyClientTerminationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::NotifyClientTerminationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ChangeInvisibleDurationRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ChangeInvisibleDurationResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

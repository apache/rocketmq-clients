// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/admin.proto

#include "apache/rocketmq/v2/admin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apache {
namespace rocketmq {
namespace v2 {
PROTOBUF_CONSTEXPR ChangeLogLevelRequest::ChangeLogLevelRequest(
    ::_pbi::ConstantInitialized)
  : level_(0)
{}
struct ChangeLogLevelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeLogLevelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeLogLevelRequestDefaultTypeInternal() {}
  union {
    ChangeLogLevelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeLogLevelRequestDefaultTypeInternal _ChangeLogLevelRequest_default_instance_;
PROTOBUF_CONSTEXPR ChangeLogLevelResponse::ChangeLogLevelResponse(
    ::_pbi::ConstantInitialized)
  : remark_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ChangeLogLevelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeLogLevelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeLogLevelResponseDefaultTypeInternal() {}
  union {
    ChangeLogLevelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeLogLevelResponseDefaultTypeInternal _ChangeLogLevelResponse_default_instance_;
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
static ::_pb::Metadata file_level_metadata_apache_2frocketmq_2fv2_2fadmin_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_apache_2frocketmq_2fv2_2fadmin_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_apache_2frocketmq_2fv2_2fadmin_2eproto = nullptr;

const uint32_t TableStruct_apache_2frocketmq_2fv2_2fadmin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeLogLevelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeLogLevelRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeLogLevelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apache::rocketmq::v2::ChangeLogLevelResponse, remark_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::apache::rocketmq::v2::ChangeLogLevelRequest)},
  { 7, -1, -1, sizeof(::apache::rocketmq::v2::ChangeLogLevelResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apache::rocketmq::v2::_ChangeLogLevelRequest_default_instance_._instance,
  &::apache::rocketmq::v2::_ChangeLogLevelResponse_default_instance_._instance,
};

const char descriptor_table_protodef_apache_2frocketmq_2fv2_2fadmin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036apache/rocketmq/v2/admin.proto\022\022apache"
  ".rocketmq.v2\"\234\001\n\025ChangeLogLevelRequest\022E"
  "\n\005level\030\001 \001(\0162/.apache.rocketmq.v2.Chang"
  "eLogLevelRequest.LevelR\005level\"<\n\005Level\022\t"
  "\n\005TRACE\020\000\022\t\n\005DEBUG\020\001\022\010\n\004INFO\020\002\022\010\n\004WARN\020\003"
  "\022\t\n\005ERROR\020\004\"0\n\026ChangeLogLevelResponse\022\026\n"
  "\006remark\030\001 \001(\tR\006remark2r\n\005Admin\022i\n\016Change"
  "LogLevel\022).apache.rocketmq.v2.ChangeLogL"
  "evelRequest\032*.apache.rocketmq.v2.ChangeL"
  "ogLevelResponse\"\000B=\n\022apache.rocketmq.v2B"
  "\007MQAdminP\001\240\001\001\330\001\001\370\001\001\252\002\022Apache.Rocketmq.V2"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto = {
    false, false, 448, descriptor_table_protodef_apache_2frocketmq_2fv2_2fadmin_2eproto,
    "apache/rocketmq/v2/admin.proto",
    &descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_apache_2frocketmq_2fv2_2fadmin_2eproto::offsets,
    file_level_metadata_apache_2frocketmq_2fv2_2fadmin_2eproto, file_level_enum_descriptors_apache_2frocketmq_2fv2_2fadmin_2eproto,
    file_level_service_descriptors_apache_2frocketmq_2fv2_2fadmin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_getter() {
  return &descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_apache_2frocketmq_2fv2_2fadmin_2eproto(&descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto);
namespace apache {
namespace rocketmq {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLogLevelRequest_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto);
  return file_level_enum_descriptors_apache_2frocketmq_2fv2_2fadmin_2eproto[0];
}
bool ChangeLogLevelRequest_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::TRACE;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::DEBUG;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::INFO;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::WARN;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::ERROR;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::Level_MIN;
constexpr ChangeLogLevelRequest_Level ChangeLogLevelRequest::Level_MAX;
constexpr int ChangeLogLevelRequest::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChangeLogLevelRequest::_Internal {
 public:
};

ChangeLogLevelRequest::ChangeLogLevelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ChangeLogLevelRequest)
}
ChangeLogLevelRequest::ChangeLogLevelRequest(const ChangeLogLevelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ChangeLogLevelRequest)
}

inline void ChangeLogLevelRequest::SharedCtor() {
level_ = 0;
}

ChangeLogLevelRequest::~ChangeLogLevelRequest() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ChangeLogLevelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeLogLevelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeLogLevelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeLogLevelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ChangeLogLevelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeLogLevelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apache.rocketmq.v2.ChangeLogLevelRequest.Level level = 1 [json_name = "level"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::apache::rocketmq::v2::ChangeLogLevelRequest_Level>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeLogLevelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ChangeLogLevelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apache.rocketmq.v2.ChangeLogLevelRequest.Level level = 1 [json_name = "level"];
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ChangeLogLevelRequest)
  return target;
}

size_t ChangeLogLevelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ChangeLogLevelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .apache.rocketmq.v2.ChangeLogLevelRequest.Level level = 1 [json_name = "level"];
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeLogLevelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeLogLevelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeLogLevelRequest::GetClassData() const { return &_class_data_; }

void ChangeLogLevelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeLogLevelRequest *>(to)->MergeFrom(
      static_cast<const ChangeLogLevelRequest &>(from));
}


void ChangeLogLevelRequest::MergeFrom(const ChangeLogLevelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ChangeLogLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeLogLevelRequest::CopyFrom(const ChangeLogLevelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ChangeLogLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLogLevelRequest::IsInitialized() const {
  return true;
}

void ChangeLogLevelRequest::InternalSwap(ChangeLogLevelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLogLevelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fadmin_2eproto[0]);
}

// ===================================================================

class ChangeLogLevelResponse::_Internal {
 public:
};

ChangeLogLevelResponse::ChangeLogLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:apache.rocketmq.v2.ChangeLogLevelResponse)
}
ChangeLogLevelResponse::ChangeLogLevelResponse(const ChangeLogLevelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remark_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    remark_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remark().empty()) {
    remark_.Set(from._internal_remark(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apache.rocketmq.v2.ChangeLogLevelResponse)
}

inline void ChangeLogLevelResponse::SharedCtor() {
remark_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  remark_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangeLogLevelResponse::~ChangeLogLevelResponse() {
  // @@protoc_insertion_point(destructor:apache.rocketmq.v2.ChangeLogLevelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeLogLevelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  remark_.Destroy();
}

void ChangeLogLevelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeLogLevelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apache.rocketmq.v2.ChangeLogLevelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remark_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeLogLevelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string remark = 1 [json_name = "remark"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_remark();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "apache.rocketmq.v2.ChangeLogLevelResponse.remark"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeLogLevelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apache.rocketmq.v2.ChangeLogLevelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string remark = 1 [json_name = "remark"];
  if (!this->_internal_remark().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remark().data(), static_cast<int>(this->_internal_remark().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "apache.rocketmq.v2.ChangeLogLevelResponse.remark");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remark(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apache.rocketmq.v2.ChangeLogLevelResponse)
  return target;
}

size_t ChangeLogLevelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apache.rocketmq.v2.ChangeLogLevelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remark = 1 [json_name = "remark"];
  if (!this->_internal_remark().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remark());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeLogLevelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeLogLevelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeLogLevelResponse::GetClassData() const { return &_class_data_; }

void ChangeLogLevelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeLogLevelResponse *>(to)->MergeFrom(
      static_cast<const ChangeLogLevelResponse &>(from));
}


void ChangeLogLevelResponse::MergeFrom(const ChangeLogLevelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apache.rocketmq.v2.ChangeLogLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remark().empty()) {
    _internal_set_remark(from._internal_remark());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeLogLevelResponse::CopyFrom(const ChangeLogLevelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apache.rocketmq.v2.ChangeLogLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLogLevelResponse::IsInitialized() const {
  return true;
}

void ChangeLogLevelResponse::InternalSwap(ChangeLogLevelResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &remark_, lhs_arena,
      &other->remark_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLogLevelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_getter, &descriptor_table_apache_2frocketmq_2fv2_2fadmin_2eproto_once,
      file_level_metadata_apache_2frocketmq_2fv2_2fadmin_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace rocketmq
}  // namespace apache
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ChangeLogLevelRequest*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ChangeLogLevelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ChangeLogLevelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apache::rocketmq::v2::ChangeLogLevelResponse*
Arena::CreateMaybeMessage< ::apache::rocketmq::v2::ChangeLogLevelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apache::rocketmq::v2::ChangeLogLevelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

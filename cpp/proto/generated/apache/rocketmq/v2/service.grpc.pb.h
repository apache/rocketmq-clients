// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apache/rocketmq/v2/service.proto
#ifndef GRPC_apache_2frocketmq_2fv2_2fservice_2eproto__INCLUDED
#define GRPC_apache_2frocketmq_2fv2_2fservice_2eproto__INCLUDED

#include "apache/rocketmq/v2/service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace apache {
namespace rocketmq {
namespace v2 {

class MessagingService final {
 public:
  static constexpr char const* service_full_name() {
    return "apache.rocketmq.v2.MessagingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::apache::rocketmq::v2::QueryRouteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>> AsyncQueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>>(AsyncQueryRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>> PrepareAsyncQueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>>(PrepareAsyncQueryRouteRaw(context, request, cq));
    }
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::apache::rocketmq::v2::HeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::apache::rocketmq::v2::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::apache::rocketmq::v2::QueryAssignmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>> AsyncQueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>>(AsyncQueryAssignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>> PrepareAsyncQueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>>(PrepareAsyncQueryAssignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>> ReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>>(ReceiveMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>> AsyncReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>>(AsyncReceiveMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>> PrepareAsyncReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>>(PrepareAsyncReceiveMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::apache::rocketmq::v2::AckMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>> AsyncAckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>>(AsyncAckMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>> PrepareAsyncAckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>>(PrepareAsyncAckMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>> AsyncForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>>(AsyncForwardMessageToDeadLetterQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>> PrepareAsyncForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>>(PrepareAsyncForwardMessageToDeadLetterQueueRaw(context, request, cq));
    }
    virtual ::grpc::Status EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::apache::rocketmq::v2::EndTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>> AsyncEndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>>(AsyncEndTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>> PrepareAsyncEndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>>(PrepareAsyncEndTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>> Telemetry(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>>(TelemetryRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>> AsyncTelemetry(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>>(AsyncTelemetryRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>> PrepareAsyncTelemetry(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>>(PrepareAsyncTelemetryRaw(context, cq));
    }
    virtual ::grpc::Status NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>> AsyncNotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>>(AsyncNotifyClientTerminationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>> PrepareAsyncNotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>>(PrepareAsyncNotifyClientTerminationRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>> AsyncChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>>(AsyncChangeInvisibleDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>> PrepareAsyncChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>>(PrepareAsyncChangeInvisibleDurationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::apache::rocketmq::v2::ReceiveMessageResponse>* reactor) = 0;
      virtual void AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Telemetry(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::apache::rocketmq::v2::TelemetryCommand,::apache::rocketmq::v2::TelemetryCommand>* reactor) = 0;
      virtual void NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>* AsyncQueryRouteRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>* PrepareAsyncQueryRouteRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>* AsyncQueryAssignmentRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>* PrepareAsyncQueryAssignmentRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>* ReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>* AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>* PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>* AsyncAckMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>* PrepareAsyncAckMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* AsyncForwardMessageToDeadLetterQueueRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* PrepareAsyncForwardMessageToDeadLetterQueueRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>* AsyncEndTransactionRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>* PrepareAsyncEndTransactionRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* TelemetryRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* AsyncTelemetryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* PrepareAsyncTelemetryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* AsyncNotifyClientTerminationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* PrepareAsyncNotifyClientTerminationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* AsyncChangeInvisibleDurationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* PrepareAsyncChangeInvisibleDurationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::apache::rocketmq::v2::QueryRouteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>> AsyncQueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>>(AsyncQueryRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>> PrepareAsyncQueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>>(PrepareAsyncQueryRouteRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::apache::rocketmq::v2::HeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>> AsyncHeartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::apache::rocketmq::v2::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::apache::rocketmq::v2::QueryAssignmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>> AsyncQueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>>(AsyncQueryAssignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>> PrepareAsyncQueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>>(PrepareAsyncQueryAssignmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::apache::rocketmq::v2::ReceiveMessageResponse>> ReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::apache::rocketmq::v2::ReceiveMessageResponse>>(ReceiveMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>> AsyncReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>>(AsyncReceiveMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>> PrepareAsyncReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>>(PrepareAsyncReceiveMessageRaw(context, request, cq));
    }
    ::grpc::Status AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::apache::rocketmq::v2::AckMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>> AsyncAckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>>(AsyncAckMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>> PrepareAsyncAckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>>(PrepareAsyncAckMessageRaw(context, request, cq));
    }
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>> AsyncForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>>(AsyncForwardMessageToDeadLetterQueueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>> PrepareAsyncForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>>(PrepareAsyncForwardMessageToDeadLetterQueueRaw(context, request, cq));
    }
    ::grpc::Status EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::apache::rocketmq::v2::EndTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>> AsyncEndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>>(AsyncEndTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>> PrepareAsyncEndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>>(PrepareAsyncEndTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>> Telemetry(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>>(TelemetryRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>> AsyncTelemetry(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>>(AsyncTelemetryRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>> PrepareAsyncTelemetry(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>>(PrepareAsyncTelemetryRaw(context, cq));
    }
    ::grpc::Status NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>> AsyncNotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>>(AsyncNotifyClientTerminationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>> PrepareAsyncNotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>>(PrepareAsyncNotifyClientTerminationRaw(context, request, cq));
    }
    ::grpc::Status ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>> AsyncChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>>(AsyncChangeInvisibleDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>> PrepareAsyncChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>>(PrepareAsyncChangeInvisibleDurationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::apache::rocketmq::v2::ReceiveMessageResponse>* reactor) override;
      void AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response, std::function<void(::grpc::Status)>) override;
      void ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Telemetry(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::apache::rocketmq::v2::TelemetryCommand,::apache::rocketmq::v2::TelemetryCommand>* reactor) override;
      void NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response, std::function<void(::grpc::Status)>) override;
      void NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>* AsyncQueryRouteRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>* PrepareAsyncQueryRouteRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>* AsyncQueryAssignmentRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>* PrepareAsyncQueryAssignmentRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::apache::rocketmq::v2::ReceiveMessageResponse>* ReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request) override;
    ::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>* AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>* PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>* AsyncAckMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>* PrepareAsyncAckMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* AsyncForwardMessageToDeadLetterQueueRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* PrepareAsyncForwardMessageToDeadLetterQueueRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>* AsyncEndTransactionRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>* PrepareAsyncEndTransactionRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* TelemetryRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* AsyncTelemetryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* PrepareAsyncTelemetryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* AsyncNotifyClientTerminationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* PrepareAsyncNotifyClientTerminationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* AsyncChangeInvisibleDurationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* PrepareAsyncChangeInvisibleDurationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_QueryRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryAssignment_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_AckMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_ForwardMessageToDeadLetterQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_EndTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_Telemetry_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyClientTermination_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeInvisibleDuration_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status QueryRoute(::grpc::ServerContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response);
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response);
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response);
    virtual ::grpc::Status QueryAssignment(::grpc::ServerContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response);
    virtual ::grpc::Status ReceiveMessage(::grpc::ServerContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest* request, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* writer);
    virtual ::grpc::Status AckMessage(::grpc::ServerContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response);
    virtual ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response);
    virtual ::grpc::Status EndTransaction(::grpc::ServerContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response);
    virtual ::grpc::Status Telemetry(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* stream);
    virtual ::grpc::Status NotifyClientTermination(::grpc::ServerContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response);
    virtual ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryRoute() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_QueryRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRoute(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryRoute(::grpc::ServerContext* context, ::apache::rocketmq::v2::QueryRouteRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::QueryRouteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::apache::rocketmq::v2::HeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::HeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::apache::rocketmq::v2::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryAssignment() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_QueryAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssignment(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryAssignment(::grpc::ServerContext* context, ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::QueryAssignmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveMessage(::grpc::ServerContext* context, ::apache::rocketmq::v2::ReceiveMessageRequest* request, ::grpc::ServerAsyncWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AckMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AckMessage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AckMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAckMessage(::grpc::ServerContext* context, ::apache::rocketmq::v2::AckMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::AckMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ForwardMessageToDeadLetterQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ForwardMessageToDeadLetterQueue() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ForwardMessageToDeadLetterQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardMessageToDeadLetterQueue(::grpc::ServerContext* context, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndTransaction() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_EndTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTransaction(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndTransaction(::grpc::ServerContext* context, ::apache::rocketmq::v2::EndTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::EndTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Telemetry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Telemetry() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Telemetry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Telemetry(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTelemetry(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyClientTermination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyClientTermination() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_NotifyClientTermination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyClientTermination(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyClientTermination(::grpc::ServerContext* context, ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeInvisibleDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeInvisibleDuration() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ChangeInvisibleDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeInvisibleDuration(::grpc::ServerContext* context, ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_QueryRoute<WithAsyncMethod_Heartbeat<WithAsyncMethod_SendMessage<WithAsyncMethod_QueryAssignment<WithAsyncMethod_ReceiveMessage<WithAsyncMethod_AckMessage<WithAsyncMethod_ForwardMessageToDeadLetterQueue<WithAsyncMethod_EndTransaction<WithAsyncMethod_Telemetry<WithAsyncMethod_NotifyClientTermination<WithAsyncMethod_ChangeInvisibleDuration<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_QueryRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryRoute() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response) { return this->QueryRoute(context, request, response); }));}
    void SetMessageAllocatorFor_QueryRoute(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRoute(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QueryAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QueryAssignment() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response) { return this->QueryAssignment(context, request, response); }));}
    void SetMessageAllocatorFor_QueryAssignment(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QueryAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssignment(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryAssignment(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::apache::rocketmq::v2::ReceiveMessageRequest, ::apache::rocketmq::v2::ReceiveMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest* request) { return this->ReceiveMessage(context, request); }));
    }
    ~WithCallbackMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::apache::rocketmq::v2::ReceiveMessageResponse>* ReceiveMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AckMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AckMessage() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response) { return this->AckMessage(context, request, response); }));}
    void SetMessageAllocatorFor_AckMessage(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AckMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AckMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ForwardMessageToDeadLetterQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ForwardMessageToDeadLetterQueue() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response) { return this->ForwardMessageToDeadLetterQueue(context, request, response); }));}
    void SetMessageAllocatorFor_ForwardMessageToDeadLetterQueue(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ForwardMessageToDeadLetterQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardMessageToDeadLetterQueue(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndTransaction() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response) { return this->EndTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_EndTransaction(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTransaction(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Telemetry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Telemetry() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Telemetry(context); }));
    }
    ~WithCallbackMethod_Telemetry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Telemetry(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* Telemetry(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NotifyClientTermination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyClientTermination() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response) { return this->NotifyClientTermination(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyClientTermination(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyClientTermination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyClientTermination(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyClientTermination(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeInvisibleDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeInvisibleDuration() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response) { return this->ChangeInvisibleDuration(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeInvisibleDuration(
        ::grpc::MessageAllocator< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeInvisibleDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeInvisibleDuration(
      ::grpc::CallbackServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_QueryRoute<WithCallbackMethod_Heartbeat<WithCallbackMethod_SendMessage<WithCallbackMethod_QueryAssignment<WithCallbackMethod_ReceiveMessage<WithCallbackMethod_AckMessage<WithCallbackMethod_ForwardMessageToDeadLetterQueue<WithCallbackMethod_EndTransaction<WithCallbackMethod_Telemetry<WithCallbackMethod_NotifyClientTermination<WithCallbackMethod_ChangeInvisibleDuration<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_QueryRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryRoute() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_QueryRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRoute(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryAssignment() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_QueryAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssignment(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AckMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AckMessage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AckMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ForwardMessageToDeadLetterQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ForwardMessageToDeadLetterQueue() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ForwardMessageToDeadLetterQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndTransaction() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_EndTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTransaction(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Telemetry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Telemetry() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Telemetry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Telemetry(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyClientTermination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyClientTermination() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_NotifyClientTermination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyClientTermination(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeInvisibleDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeInvisibleDuration() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ChangeInvisibleDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryRoute() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_QueryRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRoute(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryRoute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryAssignment() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_QueryAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssignment(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryAssignment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AckMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AckMessage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AckMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAckMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ForwardMessageToDeadLetterQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ForwardMessageToDeadLetterQueue() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ForwardMessageToDeadLetterQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForwardMessageToDeadLetterQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndTransaction() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_EndTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTransaction(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Telemetry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Telemetry() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Telemetry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Telemetry(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTelemetry(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyClientTermination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyClientTermination() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_NotifyClientTermination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyClientTermination(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyClientTermination(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeInvisibleDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeInvisibleDuration() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ChangeInvisibleDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeInvisibleDuration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryRoute() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryRoute(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryRoute(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QueryAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QueryAssignment() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryAssignment(context, request, response); }));
    }
    ~WithRawCallbackMethod_QueryAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryAssignment(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QueryAssignment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReceiveMessage(context, request); }));
    }
    ~WithRawCallbackMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReceiveMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AckMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AckMessage() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AckMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_AckMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AckMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ForwardMessageToDeadLetterQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ForwardMessageToDeadLetterQueue() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ForwardMessageToDeadLetterQueue(context, request, response); }));
    }
    ~WithRawCallbackMethod_ForwardMessageToDeadLetterQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ForwardMessageToDeadLetterQueue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndTransaction() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTransaction(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Telemetry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Telemetry() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Telemetry(context); }));
    }
    ~WithRawCallbackMethod_Telemetry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Telemetry(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Telemetry(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyClientTermination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyClientTermination() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyClientTermination(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyClientTermination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyClientTermination(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyClientTermination(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeInvisibleDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeInvisibleDuration() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeInvisibleDuration(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeInvisibleDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeInvisibleDuration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryRoute() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse>* streamer) {
                       return this->StreamedQueryRoute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryRoute(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryRouteRequest* /*request*/, ::apache::rocketmq::v2::QueryRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::QueryRouteRequest,::apache::rocketmq::v2::QueryRouteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::HeartbeatRequest* /*request*/, ::apache::rocketmq::v2::HeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::HeartbeatRequest,::apache::rocketmq::v2::HeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::SendMessageRequest* /*request*/, ::apache::rocketmq::v2::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::SendMessageRequest,::apache::rocketmq::v2::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryAssignment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryAssignment() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse>* streamer) {
                       return this->StreamedQueryAssignment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryAssignment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryAssignment(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::QueryAssignmentRequest* /*request*/, ::apache::rocketmq::v2::QueryAssignmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryAssignment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::QueryAssignmentRequest,::apache::rocketmq::v2::QueryAssignmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AckMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AckMessage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse>* streamer) {
                       return this->StreamedAckMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AckMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AckMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::AckMessageRequest* /*request*/, ::apache::rocketmq::v2::AckMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAckMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::AckMessageRequest,::apache::rocketmq::v2::AckMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ForwardMessageToDeadLetterQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ForwardMessageToDeadLetterQueue() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* streamer) {
                       return this->StreamedForwardMessageToDeadLetterQueue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ForwardMessageToDeadLetterQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ForwardMessageToDeadLetterQueue(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* /*request*/, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedForwardMessageToDeadLetterQueue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest,::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndTransaction() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse>* streamer) {
                       return this->StreamedEndTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndTransaction(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::EndTransactionRequest* /*request*/, ::apache::rocketmq::v2::EndTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::EndTransactionRequest,::apache::rocketmq::v2::EndTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyClientTermination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyClientTermination() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse>* streamer) {
                       return this->StreamedNotifyClientTermination(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyClientTermination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyClientTermination(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* /*request*/, ::apache::rocketmq::v2::NotifyClientTerminationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyClientTermination(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::NotifyClientTerminationRequest,::apache::rocketmq::v2::NotifyClientTerminationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeInvisibleDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeInvisibleDuration() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* streamer) {
                       return this->StreamedChangeInvisibleDuration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeInvisibleDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeInvisibleDuration(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* /*request*/, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeInvisibleDuration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest,::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueryRoute<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_QueryAssignment<WithStreamedUnaryMethod_AckMessage<WithStreamedUnaryMethod_ForwardMessageToDeadLetterQueue<WithStreamedUnaryMethod_EndTransaction<WithStreamedUnaryMethod_NotifyClientTermination<WithStreamedUnaryMethod_ChangeInvisibleDuration<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReceiveMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReceiveMessage() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::apache::rocketmq::v2::ReceiveMessageRequest, ::apache::rocketmq::v2::ReceiveMessageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::apache::rocketmq::v2::ReceiveMessageRequest, ::apache::rocketmq::v2::ReceiveMessageResponse>* streamer) {
                       return this->StreamedReceiveMessage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReceiveMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveMessage(::grpc::ServerContext* /*context*/, const ::apache::rocketmq::v2::ReceiveMessageRequest* /*request*/, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReceiveMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::apache::rocketmq::v2::ReceiveMessageRequest,::apache::rocketmq::v2::ReceiveMessageResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReceiveMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_QueryRoute<WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_QueryAssignment<WithSplitStreamingMethod_ReceiveMessage<WithStreamedUnaryMethod_AckMessage<WithStreamedUnaryMethod_ForwardMessageToDeadLetterQueue<WithStreamedUnaryMethod_EndTransaction<WithStreamedUnaryMethod_NotifyClientTermination<WithStreamedUnaryMethod_ChangeInvisibleDuration<Service > > > > > > > > > > StreamedService;
};

}  // namespace v2
}  // namespace rocketmq
}  // namespace apache


#endif  // GRPC_apache_2frocketmq_2fv2_2fservice_2eproto__INCLUDED

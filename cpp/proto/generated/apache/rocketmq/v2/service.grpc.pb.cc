// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apache/rocketmq/v2/service.proto

#include "apache/rocketmq/v2/service.pb.h"
#include "apache/rocketmq/v2/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace apache {
namespace rocketmq {
namespace v2 {

static const char* MessagingService_method_names[] = {
  "/apache.rocketmq.v2.MessagingService/QueryRoute",
  "/apache.rocketmq.v2.MessagingService/Heartbeat",
  "/apache.rocketmq.v2.MessagingService/SendMessage",
  "/apache.rocketmq.v2.MessagingService/QueryAssignment",
  "/apache.rocketmq.v2.MessagingService/ReceiveMessage",
  "/apache.rocketmq.v2.MessagingService/AckMessage",
  "/apache.rocketmq.v2.MessagingService/ForwardMessageToDeadLetterQueue",
  "/apache.rocketmq.v2.MessagingService/EndTransaction",
  "/apache.rocketmq.v2.MessagingService/Telemetry",
  "/apache.rocketmq.v2.MessagingService/NotifyClientTermination",
  "/apache.rocketmq.v2.MessagingService/ChangeInvisibleDuration",
};

std::unique_ptr< MessagingService::Stub> MessagingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessagingService::Stub> stub(new MessagingService::Stub(channel, options));
  return stub;
}

MessagingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_QueryRoute_(MessagingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(MessagingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMessage_(MessagingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryAssignment_(MessagingService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveMessage_(MessagingService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AckMessage_(MessagingService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForwardMessageToDeadLetterQueue_(MessagingService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndTransaction_(MessagingService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Telemetry_(MessagingService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_NotifyClientTermination_(MessagingService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeInvisibleDuration_(MessagingService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MessagingService::Stub::QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::apache::rocketmq::v2::QueryRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryRoute_, context, request, response);
}

void MessagingService::Stub::async::QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryRoute_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::QueryRoute(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>* MessagingService::Stub::PrepareAsyncQueryRouteRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::QueryRouteResponse, ::apache::rocketmq::v2::QueryRouteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryRoute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryRouteResponse>* MessagingService::Stub::AsyncQueryRouteRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRouteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::apache::rocketmq::v2::HeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

void MessagingService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::Heartbeat(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Heartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>* MessagingService::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::HeartbeatResponse, ::apache::rocketmq::v2::HeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::HeartbeatResponse>* MessagingService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::apache::rocketmq::v2::SendMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>* MessagingService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::SendMessageResponse, ::apache::rocketmq::v2::SendMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::SendMessageResponse>* MessagingService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::apache::rocketmq::v2::QueryAssignmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryAssignment_, context, request, response);
}

void MessagingService::Stub::async::QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryAssignment_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::QueryAssignment(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryAssignment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>* MessagingService::Stub::PrepareAsyncQueryAssignmentRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::QueryAssignmentResponse, ::apache::rocketmq::v2::QueryAssignmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryAssignment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::QueryAssignmentResponse>* MessagingService::Stub::AsyncQueryAssignmentRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryAssignmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::apache::rocketmq::v2::ReceiveMessageResponse>* MessagingService::Stub::ReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::apache::rocketmq::v2::ReceiveMessageResponse>::Create(channel_.get(), rpcmethod_ReceiveMessage_, context, request);
}

void MessagingService::Stub::async::ReceiveMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest* request, ::grpc::ClientReadReactor< ::apache::rocketmq::v2::ReceiveMessageResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::apache::rocketmq::v2::ReceiveMessageResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ReceiveMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>* MessagingService::Stub::AsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::apache::rocketmq::v2::ReceiveMessageResponse>::Create(channel_.get(), cq, rpcmethod_ReceiveMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::apache::rocketmq::v2::ReceiveMessageResponse>* MessagingService::Stub::PrepareAsyncReceiveMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::apache::rocketmq::v2::ReceiveMessageResponse>::Create(channel_.get(), cq, rpcmethod_ReceiveMessage_, context, request, false, nullptr);
}

::grpc::Status MessagingService::Stub::AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::apache::rocketmq::v2::AckMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AckMessage_, context, request, response);
}

void MessagingService::Stub::async::AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AckMessage_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::AckMessage(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AckMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>* MessagingService::Stub::PrepareAsyncAckMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::AckMessageResponse, ::apache::rocketmq::v2::AckMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AckMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::AckMessageResponse>* MessagingService::Stub::AsyncAckMessageRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAckMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForwardMessageToDeadLetterQueue_, context, request, response);
}

void MessagingService::Stub::async::ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardMessageToDeadLetterQueue_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::ForwardMessageToDeadLetterQueue(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForwardMessageToDeadLetterQueue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* MessagingService::Stub::PrepareAsyncForwardMessageToDeadLetterQueueRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForwardMessageToDeadLetterQueue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>* MessagingService::Stub::AsyncForwardMessageToDeadLetterQueueRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForwardMessageToDeadLetterQueueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::apache::rocketmq::v2::EndTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndTransaction_, context, request, response);
}

void MessagingService::Stub::async::EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndTransaction_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::EndTransaction(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>* MessagingService::Stub::PrepareAsyncEndTransactionRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::EndTransactionResponse, ::apache::rocketmq::v2::EndTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::EndTransactionResponse>* MessagingService::Stub::AsyncEndTransactionRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* MessagingService::Stub::TelemetryRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>::Create(channel_.get(), rpcmethod_Telemetry_, context);
}

void MessagingService::Stub::async::Telemetry(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::apache::rocketmq::v2::TelemetryCommand,::apache::rocketmq::v2::TelemetryCommand>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::apache::rocketmq::v2::TelemetryCommand,::apache::rocketmq::v2::TelemetryCommand>::Create(stub_->channel_.get(), stub_->rpcmethod_Telemetry_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* MessagingService::Stub::AsyncTelemetryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>::Create(channel_.get(), cq, rpcmethod_Telemetry_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* MessagingService::Stub::PrepareAsyncTelemetryRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>::Create(channel_.get(), cq, rpcmethod_Telemetry_, context, false, nullptr);
}

::grpc::Status MessagingService::Stub::NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyClientTermination_, context, request, response);
}

void MessagingService::Stub::async::NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyClientTermination_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::NotifyClientTermination(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyClientTermination_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* MessagingService::Stub::PrepareAsyncNotifyClientTerminationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::NotifyClientTerminationResponse, ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyClientTermination_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::NotifyClientTerminationResponse>* MessagingService::Stub::AsyncNotifyClientTerminationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyClientTerminationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessagingService::Stub::ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeInvisibleDuration_, context, request, response);
}

void MessagingService::Stub::async::ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeInvisibleDuration_, context, request, response, std::move(f));
}

void MessagingService::Stub::async::ChangeInvisibleDuration(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeInvisibleDuration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* MessagingService::Stub::PrepareAsyncChangeInvisibleDurationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse, ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeInvisibleDuration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>* MessagingService::Stub::AsyncChangeInvisibleDurationRaw(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeInvisibleDurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

MessagingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::QueryRouteRequest, ::apache::rocketmq::v2::QueryRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::QueryRouteRequest* req,
             ::apache::rocketmq::v2::QueryRouteResponse* resp) {
               return service->QueryRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::HeartbeatRequest, ::apache::rocketmq::v2::HeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::HeartbeatRequest* req,
             ::apache::rocketmq::v2::HeartbeatResponse* resp) {
               return service->Heartbeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::SendMessageRequest, ::apache::rocketmq::v2::SendMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::SendMessageRequest* req,
             ::apache::rocketmq::v2::SendMessageResponse* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::QueryAssignmentRequest, ::apache::rocketmq::v2::QueryAssignmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::QueryAssignmentRequest* req,
             ::apache::rocketmq::v2::QueryAssignmentResponse* resp) {
               return service->QueryAssignment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessagingService::Service, ::apache::rocketmq::v2::ReceiveMessageRequest, ::apache::rocketmq::v2::ReceiveMessageResponse>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::ReceiveMessageRequest* req,
             ::grpc::ServerWriter<::apache::rocketmq::v2::ReceiveMessageResponse>* writer) {
               return service->ReceiveMessage(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::AckMessageRequest, ::apache::rocketmq::v2::AckMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::AckMessageRequest* req,
             ::apache::rocketmq::v2::AckMessageResponse* resp) {
               return service->AckMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* req,
             ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* resp) {
               return service->ForwardMessageToDeadLetterQueue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::EndTransactionRequest, ::apache::rocketmq::v2::EndTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::EndTransactionRequest* req,
             ::apache::rocketmq::v2::EndTransactionResponse* resp) {
               return service->EndTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< MessagingService::Service, ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::apache::rocketmq::v2::TelemetryCommand,
             ::apache::rocketmq::v2::TelemetryCommand>* stream) {
               return service->Telemetry(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::NotifyClientTerminationRequest, ::apache::rocketmq::v2::NotifyClientTerminationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::NotifyClientTerminationRequest* req,
             ::apache::rocketmq::v2::NotifyClientTerminationResponse* resp) {
               return service->NotifyClientTermination(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessagingService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessagingService::Service, ::apache::rocketmq::v2::ChangeInvisibleDurationRequest, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessagingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* req,
             ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* resp) {
               return service->ChangeInvisibleDuration(ctx, req, resp);
             }, this)));
}

MessagingService::Service::~Service() {
}

::grpc::Status MessagingService::Service::QueryRoute(::grpc::ServerContext* context, const ::apache::rocketmq::v2::QueryRouteRequest* request, ::apache::rocketmq::v2::QueryRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::Heartbeat(::grpc::ServerContext* context, const ::apache::rocketmq::v2::HeartbeatRequest* request, ::apache::rocketmq::v2::HeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::SendMessage(::grpc::ServerContext* context, const ::apache::rocketmq::v2::SendMessageRequest* request, ::apache::rocketmq::v2::SendMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::QueryAssignment(::grpc::ServerContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest* request, ::apache::rocketmq::v2::QueryAssignmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::ReceiveMessage(::grpc::ServerContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest* request, ::grpc::ServerWriter< ::apache::rocketmq::v2::ReceiveMessageResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::AckMessage(::grpc::ServerContext* context, const ::apache::rocketmq::v2::AckMessageRequest* request, ::apache::rocketmq::v2::AckMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::ForwardMessageToDeadLetterQueue(::grpc::ServerContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest* request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::EndTransaction(::grpc::ServerContext* context, const ::apache::rocketmq::v2::EndTransactionRequest* request, ::apache::rocketmq::v2::EndTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::Telemetry(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::NotifyClientTermination(::grpc::ServerContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest* request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessagingService::Service::ChangeInvisibleDuration(::grpc::ServerContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest* request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace apache
}  // namespace rocketmq
}  // namespace v2


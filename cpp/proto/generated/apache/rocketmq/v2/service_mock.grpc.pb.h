// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apache/rocketmq/v2/service.proto

#include "apache/rocketmq/v2/service.pb.h"
#include "apache/rocketmq/v2/service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace apache {
namespace rocketmq {
namespace v2 {

class MockMessagingServiceStub : public MessagingService::StubInterface {
 public:
  MOCK_METHOD3(QueryRoute, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::apache::rocketmq::v2::QueryRouteResponse* response));
  MOCK_METHOD3(AsyncQueryRouteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncQueryRouteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryRouteResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryRouteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Heartbeat, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::apache::rocketmq::v2::HeartbeatResponse* response));
  MOCK_METHOD3(AsyncHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHeartbeatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::HeartbeatResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::HeartbeatRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendMessage, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::apache::rocketmq::v2::SendMessageResponse* response));
  MOCK_METHOD3(AsyncSendMessageRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendMessageRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::SendMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::SendMessageRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(QueryAssignment, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::apache::rocketmq::v2::QueryAssignmentResponse* response));
  MOCK_METHOD3(AsyncQueryAssignmentRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncQueryAssignmentRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::QueryAssignmentResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::QueryAssignmentRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(ReceiveMessageRaw, ::grpc::ClientReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request));
  MOCK_METHOD4(AsyncReceiveMessageRaw, ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncReceiveMessageRaw, ::grpc::ClientAsyncReaderInterface< ::apache::rocketmq::v2::ReceiveMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ReceiveMessageRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(AckMessage, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::apache::rocketmq::v2::AckMessageResponse* response));
  MOCK_METHOD3(AsyncAckMessageRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAckMessageRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::AckMessageResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::AckMessageRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ForwardMessageToDeadLetterQueue, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse* response));
  MOCK_METHOD3(AsyncForwardMessageToDeadLetterQueueRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncForwardMessageToDeadLetterQueueRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ForwardMessageToDeadLetterQueueRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EndTransaction, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::apache::rocketmq::v2::EndTransactionResponse* response));
  MOCK_METHOD3(AsyncEndTransactionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEndTransactionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::EndTransactionResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::EndTransactionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD1(TelemetryRaw, ::grpc::ClientReaderWriterInterface< ::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>*(::grpc::ClientContext* context));
  MOCK_METHOD3(AsyncTelemetryRaw, ::grpc::ClientAsyncReaderWriterInterface<::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD2(PrepareAsyncTelemetryRaw, ::grpc::ClientAsyncReaderWriterInterface<::apache::rocketmq::v2::TelemetryCommand, ::apache::rocketmq::v2::TelemetryCommand>*(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(NotifyClientTermination, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::apache::rocketmq::v2::NotifyClientTerminationResponse* response));
  MOCK_METHOD3(AsyncNotifyClientTerminationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNotifyClientTerminationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::NotifyClientTerminationResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::NotifyClientTerminationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ChangeInvisibleDuration, ::grpc::Status(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::apache::rocketmq::v2::ChangeInvisibleDurationResponse* response));
  MOCK_METHOD3(AsyncChangeInvisibleDurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncChangeInvisibleDurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::apache::rocketmq::v2::ChangeInvisibleDurationResponse>*(::grpc::ClientContext* context, const ::apache::rocketmq::v2::ChangeInvisibleDurationRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace apache
} // namespace rocketmq
} // namespace v2

